/*! '2019-02-04 *//*global
    $, console, w2ui, w2confirm, app, getBUDfromBID, getCurrentBusiness, getParentAccounts,
    setToForm, form_dirty_alert, formRecDiffer, getFormSubmitData, delete_confirm_options,
    w2utils, formRefreshCallBack, setDefaultFormFieldAsPreviousRecord, exportGLAccounts, popupImportFileDialog,
    getAccountInitRecord, computeAmountRemaining, getARRulesInitRecord, renderReversalIcon, getBusinessAssessmentRules,
    getAsmsInitRecord, popupAsmRevMode, asmFormRASelect, updateGridPostDataDates
*/
"use strict";
window.getAccountInitRecord = function (BID, BUD, previousFormRecord){
    var y = new Date();

    var defaultFormData = {
        recid: 0,
        LID: 0,
        PLID: 0,
        BID: BID,
        BUD: BUD,
        RAID: 0,
        TCID: 0,
        GLNumber: '',
        Name: '',
        AcctType: '',
        // AllowPost: true,
        IsActive: 0, // 1<<0: 0=active, 1=inactive
        Description: '',
        LastModTime: y.toISOString(),
        LastModBy: 0,
    };

    // if it called after 'save and add another' action there previous form record is passed as Object
    // else it is null
    if ( previousFormRecord ) {
        defaultFormData = setDefaultFormFieldAsPreviousRecord(
            [ 'Name', 'Description'], // Fields to Reset
            defaultFormData,
            previousFormRecord
        );
    }

    return defaultFormData;
};


window.buildAccountElements = function() {

    //------------------------------------------------------------------------
    //          accountsGrid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'accountsGrid',
        url: '/v1/GLAccounts',
        multiSelect: false,
        show: {
            toolbar         : true,
            footer          : true,
            toolbarAdd      : true,   // indicates if toolbar add new button is visible
            toolbarDelete   : false,   // indicates if toolbar delete button is visible
            toolbarSave     : false,   // indicates if toolbar save button is visible
            selectColumn    : false,
            expandColumn    : false,
            toolbarEdit     : false,
            toolbarSearch   : false,
            toolbarInput    : true,
            searchAll       : false,
            toolbarReload   : true,
            toolbarColumns  : true,
        },
        toolbar: {
            items: [
                { type: 'break' },
                { type: 'button', id: 'export', caption: 'Export', icon: 'fas fa-download' },
                { type: 'button', id: 'import', caption: 'Import', icon: 'fas fa-upload' }
            ],
            onClick: function(event) {
                event.onComplete = function() {
                    // export function
                    if(event.target == "export") {
                        exportGLAccounts();
                    }

                    // import function
                    if(event.target == "import") {
                        popupImportFileDialog();
                    }
                };
            }
        },
        columns: [
            {field: 'recid',    caption: 'recid',     size: '80px', sortable: false, hidden: true},
            {field: 'LID',      caption: 'LID',       size: '50px', sortable: false, hidden: true},
            {field: 'PLID',     caption: 'PLID',      size: '50px', sortable: false, hidden: true},
            {field: 'BID',      caption: 'BID',       size: '40px', sortable: false, hidden: true},
            {field: 'GLNumber', caption: 'GL Number', size: '100px', sortable: true},
            {field: 'Name',     caption: 'Name',      size: '450px', sortable: true},
            {field: 'IsActive', caption: 'Is Active',    size: '90px', sortable: true,
                render: function (record/*, index, col_index*/) {
                    if (typeof record === "undefined") {
                        return;
                    }
                    var html = "No";
                    if (record.IsActive) {
                        html = "Yes";
                    }
                    return html;
                },
            },
            {field: 'AcctType', caption: 'AcctType', size: '150px', sortable: true},
        ],
        onRefresh: function(event) {
            event.onComplete = function() {
                if (app.active_grid == this.name) {
                    if (app.new_form_rec) {
                        this.selectNone();
                    }
                    else{
                        this.select(app.last.grid_sel_recid);
                    }
                }
            };
        },
        onClick: function(event) {
            event.onComplete = function() {
                var yes_args = [this, event.recid],
                    no_args = [this],
                    no_callBack = function(grid) {
                        grid.select(app.last.grid_sel_recid);
                        return false;
                    },
                    yes_callBack = function(grid, recid) {
                        app.last.grid_sel_recid = parseInt(recid);

                        // keep highlighting current row in any case
                        grid.select(app.last.grid_sel_recid);

                        var x = getCurrentBusiness();
                        var BID=parseInt(x.value);
                        var BUD = getBUDfromBID(BID);
                        var rec = grid.get(recid);

                        // get latest gl accounts first
                        getParentAccounts(rec.BID, rec.LID)
                        .done(function(data) {
                            if (data.status != 'success') {
                                w2ui.accountForm.message(data.message);
                                w2ui.toplayout.content('right', w2ui.accountForm);
                                w2ui.toplayout.show('right', true);
                                w2ui.toplayout.sizeTo('right', 700);
                                return;
                            }
                            else {
                                w2ui.accountForm.get("PLID").options.items = app.parent_accounts[BUD];
                                setToForm('accountForm', '/v1/account/' + rec.BID + '/' + rec.LID, 400, true);
                            }
                        })
                        .fail(function(/*data*/) {
                            console.log("unable to get gl accounts list");
                            return;
                        });
                    };

                // warn user if form content has been changed
                form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
            };
        },
        onAdd: function (/*event*/) {
            var yes_args = [this],
                no_callBack = function() {
                    return false;
                },
                yes_callBack = function(grid) {
                    // reset grid sel recid
                    app.last.grid_sel_recid = -1;
                    grid.selectNone();

                    var x = getCurrentBusiness();
                    var BID=parseInt(x.value);
                    var BUD = getBUDfromBID(BID);
                    getParentAccounts(BID, 0)
                   .done(function(data) {
                        if (data.status != 'success') {
                            w2ui.accountForm.message(data.message);
                            w2ui.toplayout.content('right', w2ui.accountForm);
                            w2ui.toplayout.show('right', true);
                            w2ui.toplayout.sizeTo('right', 700);
                            return;
                        } else {
                            var record = getAccountInitRecord(BID, BUD, null);

                            w2ui.accountForm.get("PLID").options.items = app.parent_accounts[BUD];
                            w2ui.accountForm.record = record;
                            // NOTE: even inside "setToForm", form is refreshing but header isn't updating,
                            // so need to call here once before
                            w2ui.accountForm.refresh();
                            // now show the form
                            setToForm('accountForm', '/v1/account/' + BID + '/0', 400);
                        }
                    })
                    .fail( function() {
                        console.log('unable to get GLAccounts');
                        return;
                    });
                };

                // warn user if form content has been changed
                form_dirty_alert(yes_callBack, no_callBack, yes_args);
        },
    });

    //------------------------------------------------------------------------
    //          Account Form
    //------------------------------------------------------------------------
    $().w2form({
        name: 'accountForm',
        header: 'Account Detail',
        url: '/v1/account',
        style: 'border: 0px; background-color: transparent;display: block;',
        formURL: '/webclient/html/formacct.html',
        fields: [
            { field: "recid",       required: false,    type: 'int',        html: { caption: "recid", page: 0, column: 0 } },
            { field: "LID",         required: false,    type: 'int',        html: { caption: "LID", page: 0, column: 0 } },
            { field: 'PLID',        required: false,    type: 'list',       options: { items: [], selected: {}, maxDropHeight: 200 } },
            { field: "BID",         required: false,    type: 'int',        html: { caption: "BID", page: 0, column: 0 } },
            { field: "BUD",         required: true,     type: 'list',       options: { items: app.businesses, maxDropHeight: 350 }, html: { caption: "BUD", page: 0, column: 0 } },
            { field: "RAID",        required: false,    type: 'int',        html: { caption: "RAID", page: 0, column: 0 } },
            { field: "TCID",        required: false,    type: 'int',        html: { caption: "TCID", page: 0, column: 0 } },
            { field: "GLNumber",    required: true,     type: 'text',       html: { caption: "GLNumber", page: 0, column: 0 } },
            { field: "Name",        required: true,     type: 'text',       html: { caption: "Name", page: 0, column: 0 } },
            { field: "AcctType",    required: true,     type: 'list',       options: { items: app.qbAcctType, selected: {}, maxDropHeight: 350 }, html: { caption: "Account Type", page: 0, column: 0 } },
            // { field: "AllowPost",   required: true,     type: 'checkbox',   html: { caption: "AllowPost", page: 0, column: 0 } },
            { field: 'IsActive',    required: true,     type: 'checkbox',   html: { page: 0, column: 0 } },
            { field: "Description", required: false,    type: 'text',       html: { caption: "Description", page: 0, column: 0 } },
            { field: "LastModTime", required: false,    type: 'time',       html: { caption: "LastModTime", page: 0, column: 0 } },
            { field: "LastModBy",   required: false,    type: 'int',        html: { caption: "LastModBy", page: 0, column: 0 } },
            { field: "CreateTS",    required: false,    type: 'time',       html: { caption: "LastModTime", page: 0, column: 0 } },
            { field: "CreateBy",    required: false,    type: 'int',        html: { caption: "LastModBy", page: 0, column: 0 } },
        ],
        toolbar: {
            items: [
                { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
                { id: 'bt3', type: 'spacer' },
                { id: 'btnClose', type: 'button', icon: 'fas fa-times' },
            ],
            onClick: function(event) {
                switch(event.target) {
                    case 'btnClose':
                        var no_callBack = function() { return false; },
                            yes_callBack = function() {
                                w2ui.toplayout.hide('right',true);
                                w2ui.accountsGrid.render();
                            };
                        form_dirty_alert(yes_callBack, no_callBack);
                        break;
                }
            }
        },
        onChange: function(event) {
            event.onComplete = function() {
                // formRecDiffer: 1=current record, 2=original record, 3=diff object
                var diff = formRecDiffer(this.record, app.active_form_original, {});
                // if diff == {} then make dirty flag as false, else true
                if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                    app.form_is_dirty = false;
                } else {
                    app.form_is_dirty = true;
                }
            };
        },
        onSubmit: function(target, data) {
            delete data.postData.record.LastModTime;
            delete data.postData.record.LastModBy;
            delete data.postData.record.CreateTS;
            delete data.postData.record.CreateBy;
            // modify form data for server request
            getFormSubmitData(data.postData.record);
            data.postData.record.IsActive = int_to_bool(data.postData.record.IsActive);
        },
        actions: {
            saveadd: function() {
                var f = this,
                    grid = w2ui.accountsGrid,
                    x = getCurrentBusiness(),
                    r = f.record,
                    BID=parseInt(x.value),
                    BUD=getBUDfromBID(BID);

                // clean dirty flag of form
                app.form_is_dirty = false;
                // clear the grid select recid
                app.last.grid_sel_recid  =-1;

                // select none if you're going to add new record
                grid.selectNone();

                f.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }

                    f.get("PLID").options.selected = r.PLID[0];

                    // JUST RENDER THE GRID ONLY
                    grid.render();

                    // add new empty record and just refresh the form, don't need to do CLEAR form
                    var record = getAccountInitRecord(BID, BUD, f.record);

                    w2ui.accountForm.get("PLID").options.items = app.parent_accounts[BUD];
                    f.record = record;
                    f.header = "Edit Account Details (new)"; // have to provide header here, otherwise have to call refresh method twice to get this change in form
                    f.url = '/v1/account/' + BID+'/0/';
                    f.refresh();
                });
            },
            save: function() {
                var f = this,
                    tgrid = w2ui.accountsGrid;

                f.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }
                    w2ui.toplayout.hide('right',true);
                    tgrid.render();
                });
            },
            delete: function() {

                var form = this;

                w2confirm(delete_confirm_options)
                .yes(function() {
                    var tgrid = w2ui.accountsGrid;
                    var params = {cmd: 'delete', formname: form.name, LID: form.record.LID };
                    var dat = JSON.stringify(params);

                    // delete Depository request
                    $.post(form.url, dat, null, "json")
                    .done(function(data) {
                        if (data.status === "error") {
                            form.error(w2utils.lang(data.message));
                            return;
                        }

                        w2ui.toplayout.hide('right',true);
                        tgrid.remove(app.last.grid_sel_recid);
                        tgrid.render();
                    })
                    .fail(function(/*data*/){
                        form.error("Delete Account failed.");
                        return;
                    });
                })
                .no(function() {
                    return;
                });
            },
        },
        onRefresh: function(event) {
            event.onComplete = function() {
                var f = w2ui.accountForm,
                    r = f.record,
                    BUD = getBUDfromBID(r.BID),
                    header = "Edit Account Details ({0})",
                    PLIDSel = {},
                    acctTypeSel = {};

                // PLID selected
                app.parent_accounts[BUD].forEach(function(item) {
                    if (r.PLID == item.id) {
                        $.extend(PLIDSel, item);
                    }
                });

                // accttype selected
                app.qbAcctType.forEach(function(item) {
                    if (r.AcctType == item) {
                        $.extend(acctTypeSel, {id: item, text: item});
                    }
                });

                // $("#accountForm").find('input[name=PLID]').data("selected", PLIDSel).change();
                // Reference: http://jsfiddle.net/vtoah4t5/7/
                // $("#accountForm").find('input[name=PLID]').w2field('list',{
                //     items: PLIDList,
                //     selected: PLIDSel,
                // }).data("selected", PLIDSel).change();

                f.get("PLID").options.selected = PLIDSel;
                f.get("AcctType").options.selected = acctTypeSel;

                formRefreshCallBack(f, "LID", header);
            };
        },
    });

};

// exportGLAccounts downloads csv file containing all accounts info
window.exportGLAccounts = function () {
    var x = getCurrentBusiness(),
        BID=parseInt(x.value);

    var downloadURL = "/v1/exportaccounts/" + BID + "/";
    $.ajax({
        url: downloadURL,
        type: 'GET',
        success: function() {
            downloadMediaFromURL(downloadURL);
        }
    });
};

// popupImportFileDialog invoked when user wants to import file of accounts
window.popupImportFileDialog = function () {

    var BizSelHTML = '<select id="importGLAcctsBizSel" class="w2ui-select" style="cursor: default; width: 100%; outline: none; opacity: 1; margin: 0px; border: 1px solid transparent; padding: 4px 4px 4px 0px;">';
    app.businesses.forEach(function(bud) {
        BizSelHTML += '<option val=' + bud + '>' + bud + '</option>';
    });
    BizSelHTML += '</select>';

    w2popup.open({
        title     : 'Import GLAccounts file',
        body      : '<div class="w2ui-centered">' +
            '<div class="w2ui-field"><label>GLAccounts file: </label><div><input type="file" name="acct_import_file" class="w2ui-input" style="cursor: default; width: 100%; outline: none; opacity: 1; margin: 0px; border: 1px solid transparent; padding: 4px 4px 4px 0px; background-color: transparent;" /></div></div>' +
            '<div class="w2ui-field"><label>Business Unit: </label><div>' + BizSelHTML + '</div></div>' +
            '</div>',
        buttons   : '<button class="w2ui-btn" onclick="w2popup.close();">Close</button> '+
                    '<button class="w2ui-btn" onclick="importAccountsFile();" >Import</button>',
        width     : 500,
        height    : 200,
        overflow  : 'hidden',
        color     : '#333',
        speed     : '0.3',
        opacity   : '0.5',
        modal     : true,
        showClose : true,
        onOpen: function(event) {
            $("select[id=importGLAcctsBizSel]").val(""); //onOpen reset selection
        }
    });
};

// importAccountsFile request to server for importing accounts file
window.importAccountsFile = function () {
    var x = getCurrentBusiness(),
        BID=parseInt(x.value),
        BUD = getBUDfromBID(BID);

    var chosenBUD = $("select[id=importGLAcctsBizSel]").val();

    var importURL = "/v1/importaccounts/" + BID + "/";
    var formData = new FormData();
    var file = $("input[name=acct_import_file]")[0].files[0];
    // empty file check
    if (file.size < 1) {
        alert("File is empty");
        return false;
    }
    // .csv extension check
    var splitParts = file.name.split(".");
    var ext = splitParts[splitParts.length - 1];
    if (ext != "csv") {
        alert("Please, upload csv file");
        return false;
    }
    formData.append("GLAccountFile", file);
    formData.append("BUD", chosenBUD);

    $.ajax({
        url: importURL,
        type: 'POST',
        data: formData,
        contentType: false,
        processData: false,
        dataType: "json",
        success: function (response) {
            if (response.status == "success") {
                // reset html inputs
                $("select[id=importGLAcctsBizSel]").val("");
                $("input[name=acct_import_file]").val("");

                // close popup
                w2popup.close();

                // reload accounts grid if imported csv's business is current business
                if (BUD == chosenBUD) {
                    w2ui.accountsGrid.reload();
                }
            }
        }
   });
};
/*global
    $,w2ui,app,console,refreshUnallocAmtSummaries,unallocAmountRemaining,_unAllocRcpts,
    parseFloat,getPayorFund,number_format, computeAmountRemaining

*/
"use strict";
window.buildAllocFundsGrid = function () {
    //------------------------------------------------------------------------
    //          allocfundsGrid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'allocfundsGrid',
        url: '/v1/allocfunds',
        multiSelect: false,
        title: 'Unpaid assesments for ',
        show: {
            header: false,
            toolbar: true,
            footer: true,
            searches: true,
            lineNumbers: false,
            selectColumn: false,
            expandColumn: false
        },
        columns: [
            {field: 'recid', type: 'int', caption: 'recid', hidden: true, size: '40px', sortable: true},
            {field: 'Name', type: 'text', caption: 'Payor Name', size: '90%', sortable: true},
            {field: 'BID', type: 'int', caption: 'BID', hidden: true},
            {field: 'TCID', type: 'int', caption: 'TCID', hidden: true},
        ],
        onRefresh: function(event) {
            event.onComplete = function() {
                var sel_recid = parseInt(this.last.sel_recid);
                if (app.active_grid == this.name && sel_recid > -1) {
                    if (app.new_form_rec) {
                        this.selectNone();
                    }
                    else{
                        this.select(sel_recid);
                    }
                }
            };
        },
        onClick:  function(event) {
            event.onComplete = function() {
                var rec = this.get(event.recid);

                app.TmpTCID = rec.TCID; // store here in case it is deselected by the time the Save function needs it
                getPayorFund(rec.BID, rec.TCID)
                .done(function(data) {
                    app.payor_fund = data.record.fund;  // store fund in app variable
                    w2ui.unpaidASMsGrid.load('/v1/unpaidasms/'+rec.BID+'/'+rec.TCID);   // load grid data

                    var top = _unAllocRcpts.layoutPanels.top(app.payor_fund, rec.Name/*, rec.TCID*/),
                        bottom = _unAllocRcpts.layoutPanels.bottom();

                    w2ui.allocfundsLayout.content('top', top);
                    w2ui.allocfundsLayout.content('main', w2ui.unpaidASMsGrid);
                    w2ui.allocfundsLayout.content('bottom', bottom);

                    w2ui.toplayout.show('right', true);
                    w2ui.toplayout.content('right', w2ui.allocfundsLayout);
                    w2ui.toplayout.sizeTo('right', 800);
                    w2ui.toplayout.render();
                })
                .fail(function(/*data*/) {
                    console.log('ERROR, unable to get payor fund for TCID', rec.TCID);
                });
            };
        },
    });

    //------------------------------------------------------------------------
    //          allocate fund layout
    //------------------------------------------------------------------------
    $().w2layout({
        name: 'allocfundsLayout',
        panels: [
            { type: "top", size: 140, style: 'border: 1px solid #cfcfcf; padding: 5px;', content: 'Allocate Fund Top Panel',
                toolbar: {
                    name: 'unallocfund_toolbar',
                    items: [
                        { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
                        { id: 'bt3', type: 'spacer' },
                        { id: 'btnClose', type: 'button', icon: 'fas fa-times' },
                    ],
                    onClick: function(event) {
                        switch(event.target) {
                            case 'btnClose':
                                w2ui.toplayout.hide('right',true);
                                w2ui.allocfundsGrid.render();
                                break;
                        }
                    }
                }
            },
            { type: "left", hidden: true },
            { type: "main", size: "90%", style: app.pstyle, content: 'Allocate Fund Main Panel' },
            { type: "right", hidden: true },
            { type: "bottom", size: 60, style: app.pstyle, content: 'Allocate Fund Bottom Panel' },
        ]
    });


    //------------------------------------------------------------------------------
    //   UNPAID ASSESSMENTS GRID
    //------------------------------------------------------------------------------

    $().w2grid({
        name: 'unpaidASMsGrid',
        header: 'Unpaid Assessments',
        show: {
            toolbar: false,
            header: true,
            footer: false,
            toolbarReload   : false,
            toolbarColumns  : false,
            toolbarSearch   : false,
            toolbarAdd: false,
            toolbarDelete: false,
            toolbarInput: false,
            searchAll: false,
            toolbarSave: false,
            toolbarEdit: false,
            searches: false,
            lineNumbers: false,
            selectColumn: false,
            expandColumn: false
        },
        columns: [
            { field: 'recid', type: 'int', caption: 'recid', size: '40px', hidden: true},
            { field: 'Date', render: 'date', caption: 'Assessment<br>Date', style: 'text-align: right', size: '80px' },
            { field: 'Assessment', caption: 'Assessment', size: '10%' },
            { field: 'Amount', render: 'money', caption: 'Assessment<br>Amount', size: '100px' },
            { field: 'AmountPaid', render: 'money', caption: 'Amount Paid', size: '100px' },
            { field: 'AmountOwed', render: 'money', caption: 'Amount Owed', size: '100px' },
            { field: 'ARID', hidden: true },
            { field: 'ASMID', hidden: true },
            // INDEX 8 is Dt. If this changes, then the id reference to it must change in the onChange handler below
            { field: 'Dt', render: 'date', caption: 'Payment Date', size: '100px', style: 'text-align: right', editable: {type: 'date'}},
            { field: 'Allocate', render: 'money', caption: 'Allocate Amount', size: '110px', editable: {type: 'float'}},
        ],
        onRefresh: function(/*event*/) {
            unallocAmountRemaining();
            refreshUnallocAmtSummaries();
        },
        onLoad: function(event) {
            event.done(function () {
                if (w2ui.unpaidASMsGrid.summary.length === 0) {
                    w2ui.unpaidASMsGrid.add({recid: 's-1', Date: '', Assessment: '', Amount: 0, AmountPaid: 0, AmountOwed: 0, Allocate: 0, w2ui: {summary: true}});
                }
            });
        },
        onRender: function(event) {
            event.done(function() {
                refreshUnallocAmtSummaries();
                unallocAmountRemaining();
            });
        },
        onChange: function(event) {
            event.onComplete = function() {
            	var i;
                //----------------------------------------------------------------
                // if they just changed the date, take the change and return...
                //----------------------------------------------------------------
                if (event.column == 8) { // if the date changes, don't mess up anything else...
                    for ( i = 0; i < w2ui.unpaidASMsGrid.records.length; i++) {
                        if ( event.recid == w2ui.unpaidASMsGrid.records[i].recid ) {
                            w2ui.unpaidASMsGrid.records[i].Dt = event.value_new;
                            return;
                        }
                    }
                    return;
                }
                var tgrid = w2ui.unpaidASMsGrid;
                var c = w2ui[event.target].getChanges();
                var total_fund = parseFloat($("#total_fund_amount").attr("data-fund")).toFixed(2);
                for ( i = 0; i < c.length; i++) {
                    var rec_index = tgrid.get(c[i].recid, true);         // get record index in `records` array
                    if (c[i].Allocate > 0) {                             // Is an amount present?
                        var fundsAllocated = 0;
                        var fundsRemaining = 0;
                        for (var j=0; j < tgrid.records.length; j++) {   // how much has been allocated everywhere else?
                            if (rec_index != tgrid.records[j].recid) {
                                fundsAllocated += tgrid.records[j].Allocate;
                            }
                        }
                        fundsRemaining = total_fund - fundsAllocated;    // how much remains?
                        var owed = tgrid.records[rec_index].AmountOwed;  // here's how much is still owed
                        var amtToPay = c[i].Allocate;                    // start by paying what the user asked
                        if (amtToPay > fundsRemaining) {
                            amtToPay = fundsRemaining;                   // adjust if it's more than what is available
                        }
                        if (amtToPay > owed) {
                            amtToPay = owed;                             // adjust if it's more than what is owed
                        }
                        tgrid.records[rec_index].Allocate = amtToPay;
                    } else {                                             // if Allocated amount is not greater than zero
                        tgrid.records[rec_index].Allocate = 0;
                    }
                    tgrid.records[rec_index].w2ui = {};                  // clear w2ui object in record
                }
                tgrid.save();
                refreshUnallocAmtSummaries();
                unallocAmountRemaining();
            };
        }
    });

};

//-----------------------------------------------------------------------------
// computeAmountRemaining - based on the amounts allocated to receipts in the
// unpaid receipts list, compute the amount of funds remaining to be allocated
// @params
// @return  the amount of funds remaining; a number
//-----------------------------------------------------------------------------
window.computeAmountRemaining = function () {
    var totalFunds = app.payor_fund; // must already be set to total unallocated receipt funds
    for (var i=0; i < w2ui.unpaidASMsGrid.records.length; i++) {
        totalFunds -= w2ui.unpaidASMsGrid.records[i].Allocate;
    }
    return totalFunds;
};


//-----------------------------------------------------------------------------
// unallocAmountRemaining - display the funds remaining to be allocated
// @params
// @return
//-----------------------------------------------------------------------------
window.unallocAmountRemaining = function () {
    var dispAmt = number_format(computeAmountRemaining(), 2, '.', ',');
    var x = document.getElementById("total_fund_amount");
    if (x !== null) {
        x.innerHTML = dispAmt;
    }
};

//-----------------------------------------------------------------------------
// refreshUnallocAmtSummaries - This routine totals the summary columns for the
// unpaid assessments grid.
// @params
// @return
//-----------------------------------------------------------------------------
window.refreshUnallocAmtSummaries = function () {
    if (w2ui.unpaidASMsGrid.records.length === 0 ) { return; }
    var amt = 0;
    var amtPaid = 0;
    var amtOwed = 0;
    var alloc = 0;
    for (var i=0; i < w2ui.unpaidASMsGrid.records.length; i++) {
        amt += w2ui.unpaidASMsGrid.records[i].Amount;
        amtPaid += w2ui.unpaidASMsGrid.records[i].AmountPaid;
        amtOwed += w2ui.unpaidASMsGrid.records[i].AmountOwed;
        alloc += w2ui.unpaidASMsGrid.records[i].Allocate;
    }
    w2ui.unpaidASMsGrid.set('s-1', {Amount: amt, AmountPaid: amtPaid, AmountOwed: amtOwed, Allocate: alloc});
};

//-----------------------------------------------------------------------------
// getPayorFund - get payor fund
// @params
// @return  the jquery promise
//-----------------------------------------------------------------------------
window.getPayorFund = function (BID, TCID) {
    return jQuery.ajax({
        type: "GET",
        url: '/v1/payorfund/'+BID+'/'+TCID,
        dataType: "json",
    });
};

//-----------------------------------------------------------------------------
// Auto Allocate amount for each unpaid assessment
// returns false
//-----------------------------------------------------------------------------
jQuery(document).on('click', '#auto_allocate_btn', function(/*event*/) {

    // var fund = app.payor_fund;
    var fund = computeAmountRemaining();
    var grid = w2ui.unpaidASMsGrid;

    for (var i = 0; i < grid.records.length; i++) {
        if (fund <= 0) {
            break;
        }

        //--------------------------------------------
        // if it already has an amount, skip it...
        //--------------------------------------------
        if (grid.records[i].Allocate > 0 ) {
            continue;
        }

        // //------------------------------------------------------------------
        // // if this row has been fully paid then move on to the next row
        // //------------------------------------------------------------------
        // if (grid.records[i].Amount - grid.records[i].AmountPaid <= 0) {
        //     continue;
        // }

        // check if fully paid or not
        if (grid.records[i].Amount - grid.records[i].AmountPaid <= fund){
            grid.records[i].Allocate = grid.records[i].Amount - grid.records[i].AmountPaid;
            grid.set(grid.records[i].recid, grid.records[i]);
        } else {
            grid.records[i].Allocate = fund;
            grid.set(grid.records[i].recid, grid.records[i]);
        }

        // decrement fund value by whatever the amount allocated for each record
        fund = fund - grid.records[i].Allocate;
    }
    refreshUnallocAmtSummaries();
    unallocAmountRemaining();
    return false;
});

jQuery(document).on('click', '#alloc_fund_save_btn', function(/*event*/) {

    var tgrid = w2ui.allocfundsGrid;
    var rec = tgrid.getSelection();
    if (rec.length < 0) {
        return;
    }

    // rec = tgrid.get(rec[0]);
    var tcid = app.TmpTCID,
        x = getCurrentBusiness();
    var bid = parseInt(x.value,10);


    var params = {cmd: 'save', TCID: tcid, BID: bid, records: w2ui.unpaidASMsGrid.records };
    var dat = JSON.stringify(params);

    // submit request
    $.post('/v1/allocfunds/'+bid+'/', dat, null, "json")
    .done(function(data) {
        if (data.status != "success") {
            return;
        }
        w2ui.toplayout.hide('right',true);
        w2ui.toplayout.render();
        tgrid.reload();
    })
    .fail(function(/*data*/){
        console.log("Payor Fund Allocation failed.");
    });
});


/* This module is for updating the app datastructure */

/* global
    $,getBUDfromBID,
*/

"use strict";

//-------------------------------------------------------------------------------
// UpdateCloseInfo - This routine calls the closeinfo web service and updates
//     the global app datastruct with the latest info.
//
// INPUTS:
//     bid  - the business id
//
// RETURNS:
//     nothing at this time
//-------------------------------------------------------------------------------
window.UpdateCloseInfo = function (bid) {
    var url = "/v1/closeinfo/" + bid;
    $.get(url)
        .done( function(data, textStatus, jqXHR) {
            var BUD = getBUDfromBID(data.BID);
            app.CloseInfo[BUD] = data;
        })
        .fail( function( jqXHR, textStatus, errorThrown ) {
            console.log(jqXHR);
            console.log(textStatus);
            console.log(errorThrown);
        });
};

/* global
    w2ui,console,$,setDefaultFormFieldAsPreviousRecord,w2uiDateControlString,
    app,getBUDfromBID,getPostAccounts,setToForm,getCurrentBusiness,form_dirty_alert,
    w2confirm,w2utils,getFormSubmitData,int_to_bool,formRefreshCallBack,formRecDiffer,
    getARRulesInitRecord
*/
"use strict";
window.getARRulesInitRecord = function (BID, BUD, post_accounts_pre_selected, previousFormRecord){
    var y1 = new Date();
    var y = new Date(y1.getFullYear(), 0, 1, 0,0,0);
    var ny = new Date(9999, 11, 31, 0, 0, 0);

    var defaultFormData = {
        recid:                  0,
        BID:                    BID,
        BUD:                    BUD,
        ARID:                   0,
        ARType:                 -1,
        DebitLID:               post_accounts_pre_selected,
        CreditLID:              post_accounts_pre_selected,
        Name:                   '',
        Description:            '',
        DtStart:                w2uiDateControlString(y),
        DtStop:                 w2uiDateControlString(ny),
        PriorToRAStart:         true,
        PriorToRAStop:          true,
        ApplyRcvAccts:          false,
        RAIDrqd:                false,
        AutoPopulateToNewRA:    false,
        IsRentASM:              false,
        IsSecDepASM:            false,
        IsNonRecurCharge:       false,
        PETIDReq:               false,
        VIDReq:                 false,
        DefaultAmount:          0.0,
        DefaultRentCycle:       6,
        DefaultProrationCycle:  4,
    };


    // if it called after 'save and add another' action there previous form record is passed as Object
    // else it is null
    if ( previousFormRecord ) {
        defaultFormData = setDefaultFormFieldAsPreviousRecord(
            [ 'Name', 'Description'], // Fields to Reset
            defaultFormData,
            previousFormRecord
        );
    }

    return defaultFormData;
};

window.buildARElements = function () {

//------------------------------------------------------------------------
//          Account Rules Grid
//------------------------------------------------------------------------
$().w2grid({
    name: 'arsGrid',
    url: '/v1/ars',
    multiSelect: false,
    show: {
        toolbar        : true,
        footer         : true,
        toolbarAdd     : true,    // indicates if toolbar add new button is visible
        toolbarDelete  : false,   // indicates if toolbar delete button is visible
        toolbarSave    : false,   // indicates if toolbar save button is visible
        selectColumn   : false,
        expandColumn   : false,
        toolbarEdit    : false,
        toolbarSearch  : false,
        toolbarInput   : false,
        searchAll      : false,
        toolbarReload  : false,
        toolbarColumns : true,
    },
    columns: [
        {field: 'recid',  hidden: true,  caption: 'recid', size: '40px',  sortable: true},
        {field: 'ARID',   hidden: true,  caption: 'ARID', size: '75px', sortable: true, style: 'text-align: center'},
        {field: 'BID',    hidden: true,  caption: 'BID',   size: '150px', sortable: true, style: 'text-align: center'},
        {field: 'Name',   hidden: false, caption: 'Name',  size: '15%',   sortable: true, style: 'text-align: left'},
        {field: 'ARType', hidden: false, caption: 'ARType',size: '100px',  sortable: true, style: 'text-align: left',
            render: function (record, index, col_index) {
                return app.ARTypes[this.getCellValue(index, col_index)];
            }
        },
        {field: 'DebitLID',        hidden: true,  caption: 'DebitLID',   size: '50px', sortable: true},
        {field: 'DebitLedgerName', hidden: false, caption: 'Debit',      size: '200px',sortable: true, style: 'text-align: left'},
        {field: 'CreditLID',       hidden: true,  caption: 'CreditLID',  size: '50px', sortable: true},
        {field: 'CreditLedgerName',hidden: false, caption: 'Credit',     size: '200px',sortable: true, style: 'text-align: left'},
        {field: 'DtStart',                        caption: 'Start',      size: '80px', sortable: true, style: 'text-align: right'},
        {field: 'DtStop',                         caption: 'Stop',       size: '80px', sortable: true, style: 'text-align: right'},
        {field: 'Description',     hidden: false, caption: 'Description',size: '20%',  sortable: true, style: 'text-align: left'},
    ],
    onRefresh: function(event) {
        event.onComplete = function() {
            if (app.active_grid == this.name) {
                if (app.new_form_rec) {
                    this.selectNone();
                }
                else{
                    this.select(app.last.grid_sel_recid);
                }
            }
        };
    },
    onClick: function(event) {
        event.onComplete = function () {
            var yes_args = [this, event.recid],
                no_args = [this],
                no_callBack = function(grid) {
                    grid.select(app.last.grid_sel_recid);
                    return false;
                },
                yes_callBack = function(grid, recid) {
                    app.last.grid_sel_recid = parseInt(recid);

                    // keep highlighting current row in any case
                    grid.select(app.last.grid_sel_recid);

                    // multi select is false
                    var rec = grid.get(recid),
                        BUD = getBUDfromBID(rec.BID);

                    // set ARType DropDown list
                    var artype_selected,
                        artype_items = [];

                    Object.keys(app.ARTypes).forEach(function(id){
                        var artype_id = parseInt(id);
                        if (rec.ARType == artype_id) {
                            artype_selected = {id: artype_id, text: app.ARTypes[artype_id]};
                        }
                        artype_items.push({id: artype_id, text: app.ARTypes[artype_id]});
                    });

                    // get gl account list
                    getPostAccounts(rec.BID)
                    .done(function(/*data*/){
                        // set fields
                        w2ui.arsForm.get('ARType').options.items=artype_items;
                        w2ui.arsForm.get('ARType').options.selected=artype_selected;
                        w2ui.arsForm.get('DebitLID').options.items=app.post_accounts[BUD];
                        w2ui.arsForm.get('DebitLID').options.selected={id: rec.DebitLID, text: rec.DebitLedgerName};
                        w2ui.arsForm.get('CreditLID').options.items=app.post_accounts[BUD];
                        w2ui.arsForm.get('CreditLID').options.selected={id: rec.CreditLID, text: rec.CreditLedgerName};
                        setToForm('arsForm', '/v1/ar/' + rec.BID + '/' + rec.ARID, 400, true);
                    })
                    .fail(function(/*data*/){
                        console.log("Failed to get glAccountList");
                    });
                };

            // alert user if form content has been changed
            form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
        };
    },
    onAdd: function (/*event*/) {
        var yes_args = [this],
            no_callBack = function() { return false; },
            yes_callBack = function(grid) {
                // first reset grid sel recid
                app.last.grid_sel_recid = -1;
                grid.selectNone();

                // Insert an empty record...
                var x = getCurrentBusiness(),
                    BID=parseInt(x.value),
                    BUD = getBUDfromBID(BID);

                // get latest gl accounts first
                getPostAccounts(BID)
                .done(function(data) {
                    if (data.status != 'success') {
                        w2ui.arsForm.message(data.message);
                        w2ui.toplayout.content('right', w2ui.arsForm);
                        w2ui.toplayout.show('right', true);
                        w2ui.toplayout.sizeTo('right', 700);
                        return;
                    }
                    else {
                        var artype_pre_selected = {id: -1, text: " -- Select AR type -- "};
                        var artype_items = [artype_pre_selected];
                        Object.keys(app.ARTypes).forEach(function(id){
                            var artype_id = parseInt(id);
                            artype_items.push({id: artype_id, text: app.ARTypes[artype_id]});
                        });

                        var post_accounts_pre_selected = {id: 0, text: " -- Select GL Account -- "};
                        var post_accounts_items = [post_accounts_pre_selected];
                        post_accounts_items = post_accounts_items.concat(app.post_accounts[BUD]);

                        w2ui.arsForm.get('ARType').options.items = artype_items;
                        w2ui.arsForm.get('ARType').options.selected = artype_pre_selected;
                        w2ui.arsForm.get('DebitLID').options.items = post_accounts_items;
                        w2ui.arsForm.get('DebitLID').options.selected = post_accounts_pre_selected;
                        w2ui.arsForm.get('CreditLID').options.items = post_accounts_items;
                        w2ui.arsForm.get('CreditLID').options.selected = post_accounts_pre_selected;
                        // w2ui.arsForm.refresh();
                        var record = getARRulesInitRecord(BID, BUD, post_accounts_pre_selected, null);
                        w2ui.arsForm.record = record;
                        w2ui.arsForm.refresh();
                        setToForm('arsForm', '/v1/ar/' + BID + '/0', 400);
                    }
                })
                .fail( function() {
                    console.log('unable to get GLAccounts');
                    return;
                 });
            };

        // alert user if form content has been changed
        form_dirty_alert(yes_callBack, no_callBack, yes_args);
    },
});

    //------------------------------------------------------------------------
    //          Account Rules Form
    //------------------------------------------------------------------------
    $().w2form({
        name: 'arsForm',
        style: 'border: 0px; background-color: transparent;',
        header: 'Edit Account Rule',
        url: '/v1/ar',
        formURL: '/webclient/html/formar.html',
        fields: [
            { field: 'recid',                   type: 'int',      required: false, html: { page: 0, column: 0 } },
            { field: 'ARID',                    type: 'int',      required: true,  html: { page: 0, column: 0 } },
            { field: 'BID',                     type: 'int',      required: true,  html: { page: 0, column: 0 } },
            { field: 'BUD',                     type: 'list',     required: true,  html: { page: 0, column: 0 }, options: { items: app.businesses } },
            { field: 'Name',                    type: 'text',     required: true,  html: { page: 0, column: 0 } },
            { field: 'ARType',                  type: 'list',     required: true,  html: { page: 0, column: 0 }, options: { items: [], selected: {}, maxDropHeight: 200 } },
            { field: 'DebitLID',                type: 'list',     required: true,  html: { page: 0, column: 0 }, options: { items: [], selected: {}, maxDropHeight: 200 } },
            { field: 'CreditLID',               type: 'list',     required: true,  html: { page: 0, column: 0 }, options: { items: [], selected: {}, maxDropHeight: 200 } },
            { field: 'Description',             type: 'text',     required: false, html: { page: 0, column: 0 } },
            { field: 'DtStart',                 type: 'date',     required: true,  html: { page: 0, column: 0 } },
            { field: 'DtStop',                  type: 'date',     required: true,  html: { page: 0, column: 0 } },
            { field: 'PriorToRAStart',          type: 'checkbox', required: true,  html: { page: 0, column: 0 } },
            { field: 'PriorToRAStop',           type: 'checkbox', required: true,  html: { page: 0, column: 0 } },
            { field: 'ApplyRcvAccts',           type: 'checkbox', required: true,  html: { page: 0, column: 0 } },
            { field: 'RAIDrqd',                 type: 'checkbox', required: true,  html: { page: 0, column: 0 } },
            { field: 'DefaultAmount',           type: 'money',    required: true,  html: { page: 0, column: 0 } },
            { field: 'DefaultRentCycle',        type: 'list',     required: true,  html: { page: 0, column: 0 }, options: {items: app.w2ui.listItems.cycleFreq, selected: {}} },
            { field: 'DefaultProrationCycle',   type: 'list',     required: true,  html: { page: 0, column: 0 }, options: {items: app.w2ui.listItems.cycleFreq, selected: {}} },
            { field: 'AutoPopulateToNewRA',     type: 'checkbox', required: true,  html: { page: 0, column: 0 } },
            { field: 'IsRentASM',               type: 'checkbox', required: true,  html: { page: 0, column: 0 } },
            { field: 'IsSecDepASM',             type: 'checkbox', required: true,  html: { page: 0, column: 0 } },
            { field: 'IsNonRecurCharge',        type: 'checkbox', required: true,  html: { page: 0, column: 0 } },
            { field: 'PETIDReq',                type: 'checkbox', required: true,  html: { page: 0, column: 0 } },
            { field: 'VIDReq',                  type: 'checkbox', required: true,  html: { page: 0, column: 0 } },
            { field: "LastModTime",             type: 'time',     required: false, html: { page: 0, column: 0, caption: "LastModTime" } },
            { field: "LastModBy",               type: 'int',      required: false, html: { page: 0, column: 0, caption: "LastModBy" } },
            { field: "CreateTS",                type: 'time',     required: false, html: { page: 0, column: 0, caption: "CreateTS" } },
            { field: "CreateBy",                type: 'int',      required: false, html: { page: 0, column: 0, caption: "CreateBy" } }
        ],
        toolbar: {
            items: [
                { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
                { id: 'bt3', type: 'spacer' },
                { id: 'btnClose', type: 'button', icon: 'fas fa-times' },
            ],
            onClick: function (event) {
                switch(event.target) {
                case 'btnClose':
                    var no_callBack = function() { return false; },
                        yes_callBack = function() {
                            w2ui.toplayout.hide('right',true);
                            w2ui.arsGrid.render();
                        };
                    form_dirty_alert(yes_callBack, no_callBack);
                    break;
                }
            },
        },
        onValidate: function(event) {
            if (this.record.DtStart === '') {
                event.errors.push({
                    field: this.get('DtStart'),
                    error: 'Start date cannot be blank'
                });
            }
            if (this.record.DtStop === '') {
                event.errors.push({
                    field: this.get('DtStop'),
                    error: 'Stop date cannot be blank'
                });
            }
        },
        actions: {
            saveadd: function() {
                var f = this,
                    grid = w2ui.arsGrid,
                    x = getCurrentBusiness(),
                    BID=parseInt(x.value),
                    BUD=getBUDfromBID(BID);

                // clean dirty flag of form
                app.form_is_dirty = false;
                // clear the grid select recid
                app.last.grid_sel_recid  =-1;

                // select none if you're going to add new record
                grid.selectNone();

                f.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }

                    // JUST RENDER THE GRID ONLY
                    grid.render();

                    // add new empty record and just refresh the form, don't need to do CLEAR form
                    var artype_items = [];
                    Object.keys(app.ARTypes).forEach(function(id){
                        var artype_id = parseInt(id);
                        artype_items.push({id: artype_id, text: app.ARTypes[artype_id]});
                    });

                    var post_accounts_pre_selected = {id: 0, text: " -- Select GL Account -- "};
                    var post_accounts_items = [post_accounts_pre_selected];
                    post_accounts_items = post_accounts_items.concat(app.post_accounts[BUD]);

                    w2ui.arsForm.get('ARType').options.items = artype_items;
                    // w2ui.arsForm.get('ARType').options.selected = artype_pre_selected;
                    w2ui.arsForm.get('DebitLID').options.items = post_accounts_items;
                    w2ui.arsForm.get('DebitLID').options.selected = post_accounts_pre_selected;
                    w2ui.arsForm.get('CreditLID').options.items = post_accounts_items;
                    w2ui.arsForm.get('CreditLID').options.selected = post_accounts_pre_selected;
                    var record = getARRulesInitRecord(BID, BUD, post_accounts_pre_selected, f.record);
                    f.record = record;
                    f.header = "Edit Account Rule (new)"; // have to provide header here, otherwise have to call refresh method twice to get this change in form
                    f.url = '/v1/ar/' + BID+'/0';
                    f.refresh();
                });
            },
            delete: function() {
                var form = this;
                w2confirm(delete_confirm_options)
                .yes(function () {
                    var tgrid = w2ui.arsGrid;
                    var params = {cmd: 'delete', formname: form.name, ARID: form.record.ARID };
                    var dat = JSON.stringify(params);

                    // delete AR request
                    $.post(form.url, dat, null, "json")
                    .done(function(data) {
                        if (data.status === "error") {
                            form.error(w2utils.lang(data.message));
                            return;
                        }
                        w2ui.toplayout.hide('right',true);
                        tgrid.remove(app.last.grid_sel_recid);
                        tgrid.render();
                    })
                    .fail(function(/*data*/){
                        form.error("Delete AR failed.");
                        return;
                    });
                })
                .no(function () {
                    return;
                });
            },
            save: function () {
                //var obj = this;
                var tgrid = w2ui.arsGrid;
                tgrid.selectNone();

                this.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }
                    w2ui.toplayout.hide('right',true);
                    tgrid.render();
                });
            },
        },
        onSubmit: function(target, data){
            delete data.postData.record.LastModTime;
            delete data.postData.record.LastModBy;
            delete data.postData.record.CreateTS;
            delete data.postData.record.CreateBy;
            getFormSubmitData(data.postData.record);

            // object to value before submit to server
            data.postData.record.PriorToRAStart = int_to_bool(data.postData.record.PriorToRAStart);
            data.postData.record.PriorToRAStop = int_to_bool(data.postData.record.PriorToRAStop);
            data.postData.record.ApplyRcvAccts = int_to_bool(data.postData.record.ApplyRcvAccts);
            data.postData.record.RAIDrqd = int_to_bool(data.postData.record.RAIDrqd);
            data.postData.record.AutoPopulateToNewRA = int_to_bool(data.postData.record.AutoPopulateToNewRA);
            data.postData.record.IsRentASM = int_to_bool(data.postData.record.IsRentASM);
            data.postData.record.IsSecDepASM = int_to_bool(data.postData.record.IsSecDepASM);
            data.postData.record.IsNonRecurCharge = int_to_bool(data.postData.record.IsNonRecurCharge);
            data.postData.record.PETIDReq = int_to_bool(data.postData.record.PETIDReq);
            data.postData.record.VIDReq = int_to_bool(data.postData.record.VIDReq);
        },
        onRefresh: function(event) {
            var f = this;
            event.onComplete = function() {
                var header          = "Edit Account Rule ({0})",
                    rentCycleSel    = {},
                    prorationSel    = {};

                app.w2ui.listItems.cycleFreq.map(function(item) {
                    if (item.id === f.record.DefaultRentCycle) {
                        rentCycleSel = item;
                    }
                    if (item.id === f.record.DefaultProrationCycle) {
                        prorationSel = item;
                    }
                });

                f.get("DefaultRentCycle").options.selected = rentCycleSel;
                f.get("DefaultProrationCycle").options.selected = prorationSel;
                // ENABLE/DISABLE RENT/PRORATION CYCLE
                f.get("DefaultRentCycle").disabled = f.record.IsNonRecurCharge;
                f.get("DefaultProrationCycle").disabled = f.record.IsNonRecurCharge;

                formRefreshCallBack(f, "ARID", header);

                // HANDLE FORM INPUTS
                var b = ("Receipt" === f.record.ARType.text && f.record.ApplyRcvAccts);
                $(f.box).find("input[name=RAIDrqd]").prop( "disabled", !b);
            };
        },
        onChange: function(event) {
            event.onComplete = function() {
                var f = this;
                switch (event.target) {
                    case "IsNonRecurCharge":
                        if (event.value_new) {
                            f.record.DefaultRentCycle = 0;
                            f.record.DefaultProrationCycle = 0;
                        }
                        f.refresh();
                        f.refresh();
                        break;
                    case "IsRentASM":
                        if (event.value_new) {
                            f.record.IsSecDepASM = false;
                        }
                        f.refresh();
                        break;
                    case "IsSecDepASM":
                        if (event.value_new) {
                            f.record.IsRentASM = false;
                        }
                        f.refresh();
                        break;
                    case "PETIDReq":
                        if (event.value_new) { // then it should be rent assessment
                            f.record.IsRentASM = true;
                        }
                        f.refresh();
                        break;
                    case "VIDReq":
                        if (event.value_new) { // then it should be rent assessment
                            f.record.IsRentASM = true;
                        }
                        f.refresh();
                        break;
                }

                // formRecDiffer: 1=current record, 2=original record, 3=diff object
                var diff = formRecDiffer(this.record, app.active_form_original, {});
                // if diff == {} then make dirty flag as false, else true
                if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                    app.form_is_dirty = false;
                } else {
                    app.form_is_dirty = true;
                }

                var b = ("Receipt" === f.record.ARType.text && f.record.ApplyRcvAccts);
                $(f.box).find("input[name=RAIDrqd]").prop("disabled", !b);
            };
        }
    });
};

/*global
    popupRentalAgrPicker, $, console, w2ui, w2uiDateControlString, app,
    getCurrentBusiness, getBUDfromBID, w2popup, w2utils, rafinder, get2XReversalSymbolHTML,
    getGridReversalSymbolHTML, setDefaultFormFieldAsPreviousRecord, isDatePriorToCurrentDate,
    form_dirty_alert,setToForm,addDateNavToToolbar,getCurrentBID,formRefreshCallBack, renderReversalIcon,
    getBusinessAssessmentRules, getAsmsInitRecord, popupAsmRevMode, asmFormRASelect, fixExpandType

*/
"use strict";

window.getAsmsInitRecord = function (BID, BUD, previousFormRecord){
    var y = new Date();
    var y1 = new Date(new Date().setFullYear(new Date().getFullYear() + 1));

    var initRentCycle, initProrationCycle;
    for (var i = 0; i < app.cycleFreq.length; i++) {
        if (app.cycleFreq[i] === "Monthly") {
            initRentCycle = i;
        }
        if (app.cycleFreq[i] === "Daily") {
            initProrationCycle = i;
        }
    }

    var defaultFormData = {
        ARID: 0,
        recid: 0,
        RID: 0,
        ASMID: 0,
        PASMID: 0,
        ATypeLID: 0,
        InvoiceNo: 0,
        RAID: 0,
        BID: BID,
        BUD: BUD,
        Start: w2uiDateControlString(y),
        Stop: w2uiDateControlString(y1),
        RentCycle: initRentCycle,
        ProrationCycle: initProrationCycle,
        TCID: 0,
        Amount: 0,
        Rentable: '',
        AcctRule: '',
        Comment: '',
        LastModTime: y.toISOString(),
        LastModBy: 0,
        CreateTS: y.toISOString(),
        CreateBy: 0,
        ExpandPastInst: true,
        FLAGS: 0,
        Mode: 0,
    };

    // if it called after 'save and add another' action there previous form record is passed as Object
    // else it is null
    if ( previousFormRecord ) {
        defaultFormData = setDefaultFormFieldAsPreviousRecord(
            [ 'Amount', 'Comment', 'RAID', 'Rentable'], // Fields to Reset
            defaultFormData,
            previousFormRecord
        );
    }

    return defaultFormData;
};

//-----------------------------------------------------------------------------
// getBusinessAssessmentRules - return the promise object of request to get latest
//                              assessment rules for given BID.
//                              It updates the "app.AssessmentRules" variable for requested BUD
// @params  - BID : Business ID (expected current one)
//          - BUD : Business Unit Designation
// @return  - promise object from $.get
//-----------------------------------------------------------------------------
window.getBusinessAssessmentRules = function (BID, BUD) {
    // if not BUD in app.AssessmentRules then initialize it with blank list
    if (!(BUD in app.AssessmentRules)) {
        app.AssessmentRules[BUD] = [];
    }

    // return promise
    return $.get("/v1/uival/" + BID + "/app.AssessmentRules", null, null, "json").done(function(data) {
            // if it doesn't meet this condition, then save the data
            if (!('status' in data && data.status !== "success")) {
                app.AssessmentRules[BUD] = data[BUD];
            }
        });
};

window.renderReversalIcon = function (record /*, index, col_index*/) {
    if (typeof record === "undefined") {
        return;
    }
    if ( (record.FLAGS & app.asmFLAGS.REVERSED) !== 0 ) { // if reversed then
        return getGridReversalSymbolHTML();
    }
    return '';
};

window.buildAssessmentElements = function () {
    //------------------------------------------------------------------------
    //          asmsGrid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'asmsGrid',
        url: '/v1/asms',
        multiSelect: false,
        postData: {searchDtStart: app.D1, searchDtStop: app.D2},
        show: {
            toolbar         : true,
            footer          : true,
            toolbarAdd      : true,   // indicates if toolbar add new button is visible
            toolbarDelete   : false,   // indicates if toolbar delete button is visible
            toolbarSave     : false,   // indicates if toolbar save button is visible
            selectColumn    : false,
            expandColumn    : false,
            toolbarEdit     : false,
            toolbarSearch   : false,
            toolbarInput    : true,
            searchAll       : false,
            toolbarReload   : true,
            toolbarColumns  : true,
        },
        columns: [
            {field: 'recid', hidden: true, caption: 'recid',  size: '40px', sortable: true},
            {field: 'epoch', size: '10px', style: 'text-align: center', sortable: true,
                    render: function (record /*, index, col_index*/) {
                        if (typeof record === "undefined") {
                            return;
                        }
                        if (record.RentCycle !== 0 && record.PASMID === 0) { // if epoch then make row bold
                            if (record.w2ui === undefined) {
                                record.w2ui = {class:""};
                            }
                            record.w2ui.class = "asmEpochRow";
                            return '<i class="fas fa-sync-alt" title="epoch" aria-hidden="true"></i>';
                        } else if (record.RentCycle) { // if recurring assessment then put refresh icon
                            if (record.w2ui === undefined) {
                                record.w2ui = {class:""};
                            }
                            record.w2ui.class = "asmInstRow";
                            return '<i class="fas fa-sync-alt" title="recurring" aria-hidden="true"></i>';
                        }
                        return ''; // if non-recur assessment then do nothing
                    },
            },
            {field: 'reversed', size: '10px', style: 'text-align: center', sortable: true,
                    render: renderReversalIcon,
            },
            {field: 'ASMID', caption: 'ASMID',  size: '60px', style: 'text-align: right', sortable: true},
            {field: 'Invoice', caption: 'Invoice', size: '80px', sortable: true, style: 'text-align: right'},
            {field: 'ARID', caption: 'ARID',  hidden: true, sortable: false},
            {field: 'Start', caption: 'Start Date', size: '80px', sortable: true, style: 'text-align: right'},
            {field: 'Stop', caption: 'Stop Date', size: '80px', sortable: true, style: 'text-align: right'},
            {field: 'RentCycle', caption: 'RentCycle',  hidden: true, sortable: false},
            {field: 'AcctRule', caption: 'Account Rule',  size: '200px', style: 'text-align: left', sortable: true},
            {field: 'Amount', caption: 'Amount', size: '100px', sortable: true, render: 'money', style: 'text-align: right'},
            {field: 'BID', hidden: true, caption: 'BUD', size: '40px', sortable: false},
            {field: 'PASMID', hidden: true, caption: 'PASMID', size: '40px', sortable: false},
            {field: 'RAID', caption: app.sRentalAgreement,  size: '125px', style: 'text-align: right', sortable: true},
            {field: 'RID', caption: 'RID',  size: '40px', hidden: true, sortable: false},
            {field: 'Rentable', caption: app.sRentable,  size: '150px', sortable: true},
            {field: 'Comment', caption: 'Comment',  size: '600px', sortable: true},
            // {field: 'ATypeLID', caption: 'Type', size: '100px', sortable: true, style: 'text-align: right'},
            // {field: 'RentCycle', caption: app.sRentCycle,  size: '60px', style: 'text-align: right', sortable: true},
            // {field: 'ProrationCycle', caption: sProrationCycle,  size: '60px', style: 'text-align: right', sortable: true},
        ],
        searches : [
            { field: 'Amount', caption: 'Amount', type: 'string' },
            // { field: 'Invoice', caption: 'Invoice Number', type: 'string' },
            { field: 'AcctRule', caption: 'Account Rule', type: 'string' },
            { field: 'Rentable', caption: app.sRentable, type: 'string' },
        ],
        onClick: function(event) {
            event.onComplete = function () {
                var yes_args = [this, event.recid],
                    no_args = [this],
                    no_callBack = function(grid) {
                        grid.select(app.last.grid_sel_recid);
                        return false;
                    },
                    yes_callBack = function(grid, recid) {
                        var BID = getCurrentBID(),
                            BUD = getBUDfromBID(BID);

                        app.last.grid_sel_recid = parseInt(recid);

                        // keep highlighting current row in any case
                        grid.select(app.last.grid_sel_recid);

                        var rec = grid.get(recid);
                        var myurl = '/v1/asm/' + BID + '/' + rec.ASMID;
                        var formName = (rec.RentCycle !== 0 && rec.PASMID === 0) ? "asmEpochForm" : "asmInstForm";
                        var f = w2ui[formName];
                        console.log( 'calling setToForm( '+formName+', ' + myurl + ')');

                        // before setting to the form, get the list of AcctRules...
                        getBusinessAssessmentRules(BID, BUD)
                        .done( function(data) {
                            if ('status' in data && data.status !== 'success') {
                                f.message(data.message);
                            } else {
                                f.get('ARID').options.items = app.AssessmentRules[BUD];
                                f.refresh();
                                setToForm(f.name, myurl, 450, true);
                            }
                        })
                        .fail( function() {
                            console.log('Error getting /v1/uival/' + BID + '/app.AssessmentRules');
                        });
                    };

                    // warn user if form content has been changed
                    form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
            };
        },
        onAdd: function (/*event*/) {
            var yes_args = [this],
                no_callBack = function() { return false; },
                yes_callBack = function(grid) {
                    var BID = getCurrentBID(),
                        BUD = getBUDfromBID(BID);

                    // Always create epoch assessment
                    var f = w2ui.asmEpochForm;

                    // reset it
                    app.last.grid_sel_recid = -1;
                    grid.selectNone();

                    getBusinessAssessmentRules(BID, BUD)
                    .done( function(data) {
                        if ('status' in data && data.status !== 'success') {
                            f.message(data.message);
                        } else {
                            app.ridRentablePicker.BID = BID; // needed by typedown
                            // f.fields[5].options.url = '/v1/rentablestd/' + app.ridRentablePicker.BID;
                            f.get("ARID").options.items = app.AssessmentRules[BUD];
                            f.record = getAsmsInitRecord(BID, BUD, null);
                            f.refresh();

                            setToForm('asmEpochForm', '/v1/asm/' + BID + '/0', 450);
                        }
                    })
                    .fail( function() {
                        console.log('Error getting /v1/uival/'+BID+'/app.AssessmentRules');
                     });
                };

                // warn user if form content has been changed
                form_dirty_alert(yes_callBack, no_callBack, yes_args);
        },
        onRefresh: function(event) {
            event.onComplete = function() {
                if (app.active_grid == this.name) {
                    if (app.new_form_rec) {
                        this.selectNone();
                    }
                    else{
                        this.select(app.last.grid_sel_recid);
                    }
                }

                if (event.target == 'monthfwd') {  // we do these tasks after monthfwd is refreshed so we know that the 2 date controls exist
                    setDateControlsInToolbar('asms');
                    w2ui.asmsGrid.postData = {searchDtStart: app.D1, searchDtStop: app.D2};
                }
            };
        }
    });

    addDateNavToToolbar('asms');

    //---------------------------------------------------------------------------------
    //          asmEpochForm  -  assessment epoch - this is for recurring assessments
    //---------------------------------------------------------------------------------
    $().w2form({
        name: 'asmEpochForm',
        style: 'border: 0px; background-color: transparent;',
        header: app.sAssessment + ' Detail',
        url: '/v1/asm',
        formURL: '/webclient/html/formasmepoch.html',
        fields: [
            { field: 'ARID',          type: 'list',     required: true, options: { items: app.AssessmentRules }},
            { field: 'recid',         type: 'int',      required: false },
            { field: 'ASMID',         type: 'int',      required: false },
            { field: 'BID',           type: 'int',      required: true },
            { field: 'BUD',           type: 'list',     required: true, options: {items: app.businesses} },
            { field: 'PASMID',        type: 'w2int',    required: false },
            { field: 'Rentable',      type: 'text',     required: false },
            { field: 'InvoiceNo',     type: 'int',      required: false },
            { field: 'RID',           type: 'int',      required: false },
            { field: 'ATypeLID',      type: 'int',      required: false },
            { field: 'RAID',          type: 'int',      required: true },
            { field: 'Amount',        type: 'money',    required: true },
            { field: 'Start',         type: 'date',     required: true },
            { field: 'Stop',          type: 'date',     required: true },
            { field: 'RentCycle',     type: 'list',     required: true, options: {items: app.w2ui.listItems.cycleFreq}, },
            { field: 'ProrationCycle',type: 'list',     required: true, options: {items: app.w2ui.listItems.cycleFreq}, },
            { field: 'Comment',       type: 'text',     required: false },
            { field: 'LastModTime',   type: 'hidden',   required: false },
            { field: 'LastModBy',     type: 'hidden',   required: false },
            { field: 'LastModByUser', type: 'hidden',   required: false },
            { field: 'CreateTS',      type: 'hidden',   required: false },
            { field: 'CreateBy',      type: 'hidden',   required: false },
            { field: 'CreateByUser',  type: 'hidden',   required: false },
            { field: 'ExpandPastInst',type: 'checkbox', required: false },
            { field: 'FLAGS',         type: 'w2int',    required: false },
            { field: 'Mode',          type: 'w2int',    required: false },
        ],
        toolbar: {
            items: [
                { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
                { id: 'bt3', type: 'spacer' },
                { id: 'btnClose', type: 'button', icon: 'fas fa-times' },
            ],
            onClick: function (event) {
                switch(event.target) {
                case 'btnClose':
                    var no_callBack = function() { return false; },
                        yes_callBack = function() {
                            w2ui.toplayout.hide('right',true);
                            w2ui.asmsGrid.render();
                        };
                    form_dirty_alert(yes_callBack, no_callBack);
                    break;
                }
            },
        },
        onValidate: function (event) {
            if (this.record.ARID.id === 0) {
                event.errors.push({
                    field: this.get('ARID'),
                    error: 'The Account Rule needs to be set'
                });
            }
            if (this.record.Amount < 0.01) {
                event.errors.push({
                    field: this.get('Amount'),
                    error: 'Amount must be at least $0.01'
                });
            }
        },
        actions: {
            close: function() {
                var no_callBack = function() { return false; },
                    yes_callBack = function() {
                        w2ui.toplayout.hide('right',true);
                        w2ui.asmsGrid.render();
                    };
                form_dirty_alert(yes_callBack, no_callBack);
            },
            saveadd: function() {
                var f = this,
                    grid = w2ui.asmsGrid,
                    BID = getCurrentBID(),
                    BUD = getBUDfromBID(BID);

                // clean dirty flag of form
                app.form_is_dirty = false;
                // clear the grid select recid
                app.last.grid_sel_recid  =-1;

                // unselect the record
                grid.selectNone();
                fixExpandType(this.record);

                // first save the record
                f.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }
                    // render the grid only
                    grid.render();

                    getBusinessAssessmentRules(BID, BUD)
                    .done( function(data) {
                        if ('status' in data && data.status !== 'success') {
                            f.message(data.message);
                        } else {
                            app.ridRentablePicker.BID = BID; // needed by typedown
                            // f.fields[5].options.url = '/v1/rentablestd/' + app.ridRentablePicker.BID;
                            f.get("ARID").options.items = app.AssessmentRules[BUD];
                            f.record = getAsmsInitRecord(BID, BUD, f.record);
                            f.header = "Edit Assessment (new)"; // have to provide header here, otherwise have to call refresh method twice to get this change in form
                            f.url  = "/v1/asm/" + BID + "/0";
                            f.refresh();
                        }
                    })
                    .fail( function() {
                        console.log('Error getting /v1/uival/'+BID+'/app.AssessmentRules');
                     }); //get assessment UI val done

                });
            },
            save: function () {
                var x = getCurrentBusiness();
                var grid = w2ui.asmsGrid;

                grid.selectNone();
                fixExpandType(this.record);
                w2ui.asmEpochForm.url = '/v1/asm/' + x.value + '/' + w2ui.asmEpochForm.record.ASMID;

                this.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }
                    w2ui.toplayout.hide('right',true);
                    grid.render();
                });
            },
            reverse: function() {
                popupAsmRevMode(2, w2ui.asmEpochForm);
            },
        },
        onRefresh: function(event) {
            event.onComplete = function() {
                var f = this,
                    r = f.record,
                    header = "Edit Assessment ({0})";

                formRefreshCallBack(f, "ASMID", header);

                // ===========================
                // SPECIAL CASE
                // ===========================

                if (r.ASMID === 0) { // if new record then do not worry about reversed thing
                    $(f.box).find("button[name=reverse]").addClass("hidden");
                    $(f.box).find("button[name=save]").removeClass("hidden");
                    $(f.box).find("button[name=saveadd]").removeClass("hidden");
                    $(f.box).find("button[name=close]").addClass("hidden");
                    $(f.box).find("#FLAGReport").addClass("hidden");
                    $(f.box).find("#AssessmentInfo").addClass("hidden");

                    // ENABLE ALL INPUTS IF ALL OF THOSE HAVE BEEN DISABLED FOR REVERSED PREVIOUSLY
                    // $(f.box).find('input,button').not('input[name=BUD]').prop("disabled", false);

                    return;
                } else {
                    $(f.box).find("#FLAGReport").removeClass("hidden");
                    $(f.box).find("#AssessmentInfo").removeClass("hidden");
                }

                // Assessment Info at the top of form in white box
                var info = '<p><i class="fas fa-sync-alt" style="margin-right: 5px;"></i> Repeating Assessment Series Definition</p>'.format(r.ASMID);
                $(f.box).find("#AssessmentInfo").html(info);

                // FLAG reports
                var flag = r.FLAGS,
                    flagHTML = "";

                // check if it is reversed or not
                if ( (flag & app.asmFLAGS.REVERSED) !== 0 ) { // if reversed then
                    flagHTML += "<p><strong>{0}</strong> ({1})</p>".format("REVERSED", r.Comment);
                    // reversed indication icon
                    flagHTML += get2XReversalSymbolHTML();
                    // if reversed then do not show reverse, save button
                    $(f.box).find("button[name=reverse]").addClass("hidden");
                    $(f.box).find("button[name=save]").addClass("hidden");
                    $(f.box).find("button[name=saveadd]").addClass("hidden");
                    // if reversed then we need to show close button at the bottom of form
                    $(f.box).find("button[name=close]").removeClass("hidden");

                    // ****************************************
                    // IF REVERSED THEN DISABLE ALL INPUTS, BUTTONS  EXCEPT close button
                    // ****************************************
                    $(f.box).find('input,button:not([name=close])').prop("disabled", true);

                } else {
                    // IF NOT REVERSED THEN ONLY SHOW PAID STATUS IN FOOTER
                    // unpaid, partial paid or fully paid
                    if ( (flag | app.asmFLAGS.UNPAID) === 0 || (flag & (app.asmFLAGS.PARTIALPAID | app.asmFLAGS.FULLYPAID)) === 0 ) {
                        flagHTML += "<p><strong>{0}</strong></p>".format("Unpaid");
                    }
                    else if ( (flag & app.asmFLAGS.PARTIALPAID) !== 0 ) {
                        flagHTML += "<p><strong>{0}</strong></p>".format("Partially paid");
                    }
                    else if ( (flag & app.asmFLAGS.FULLYPAID) !== 0 ) {
                        flagHTML += "<p><strong>{0}</strong></p>".format("Fully paid");
                    }

                    // show reverse, save button, hide close button
                    $(f.box).find("button[name=reverse]").removeClass("hidden");
                    $(f.box).find("button[name=save]").removeClass("hidden");
                    $(f.box).find("button[name=saveadd]").removeClass("hidden");
                    $(f.box).find("button[name=close]").addClass("hidden");

                    // ****************************************
                    // IF not REVERSED THEN ENABLE ALL INPUTS
                    // ****************************************
                    $(f.box).find('input,button').not('input[name=BUD]').prop("disabled", false);
                }

                // finally append
                flagHTML += "<p>Last Update: {0} by {1}</p>".format(r.LastModTime, r.LastModByUser);
                flagHTML += "<p>Created: {0} by {1}</p>".format(r.CreateTS, r.CreateByUser);
                $(f.box).find("#FLAGReport").html(flagHTML);
            };
        },
        onChange: function(event) {
            event.onComplete = function() {
                var f = this,
                    r = f.record;
                if (event.target == "Start") {
                    var x = document.getElementsByName('ExpandPastInst')[0];
                    var DtStart = dateFromString(event.value_new);
                    if (r.RentCycle.text != "Norecur") {
                        // create past instances is marked as true if startdate is prior to current date
                        f.record.ExpandPastInst = isDatePriorToCurrentDate(DtStart);
                        $(f.box).find("input[name=ExpandPastInst]").prop( "disabled", !isDatePriorToCurrentDate(DtStart) );
                    } else {
                        // if Start date has been changed, in rentcycle with norecur mode
                        // then we need to set stop date same value of start date
                        r.Stop = r.Start;
                        // Norecur then disable checkbox for "create past instances"
                        $(f.box).find("input[name=ExpandPastInst]").prop( "disabled", true);
                        f.record.ExpandPastInst = false;
                    }
                }
                if (event.target == "RentCycle") {
                    if (event.value_new.text == "Norecur") {
                        r.RentCycle = event.value_new;
                        r.ProrationCycle = "Norecur";
                        r.Stop = r.Start;
                        // disable stop date control
                        $(f.box).find("input[name=Stop]").prop( "disabled", true );
                        // Norecur then disable checkbox for "create past instances"
                        $(f.box).find("input[name=ExpandPastInst]").prop( "disabled", true);
                        f.record.ExpandPastInst = false;
                    } else {
                        // enable stop date control
                        $(f.box).find("input[name=Stop]").prop("disabled", false);
                        var startDate = $(f.box).find("input[name=Start]").val();
                        f.record.ExpandPastInst  = isDatePriorToCurrentDate(new Date(startDate));
                        $(f.box).find("input[name=ExpandPastInst]").prop( "disabled", !isDatePriorToCurrentDate(new Date(startDate)) );
                    }
                }

                // copy original record temporary and reset it back after refresh event
                var temp = $.extend(true, {}, app.active_form_original);
                // finally refresh the form
                f.refresh();
                // now reset app original form record
                app.active_form_original = $.extend(true, {}, temp);

                // formRecDiffer: 1=current record, 2=original record, 3=diff object
                var diff = formRecDiffer(r, app.active_form_original, {});
                // if diff == {} then make dirty flag as false, else true
                if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                    app.form_is_dirty = false;
                } else {
                    app.form_is_dirty = true;
                }
            };
        },
        onSubmit: function(target, data) {
            delete data.postData.record.LastModTime;
            delete data.postData.record.LastModBy;
            delete data.postData.record.CreateTS;
            delete data.postData.record.CreateBy;
            // modify form data for server request
            getFormSubmitData(data.postData.record);
            console.log(data.postData.record);
            fixExpandType(data.postData.record);
            app.cycleFreq.forEach(function(item, index) {
                if (item == data.postData.record.RentCycle) {
                    data.postData.record.RentCycle = index;
                }
                if (item == data.postData.record.ProrationCycle) {
                    data.postData.record.ProrationCycle = index;
                }
            });
            //
        },
    });

    //----------------------------------------------------------------------------------------------
    //          asmInstForm  -  assessment instance - instances only, not for recurring assessments
    //----------------------------------------------------------------------------------------------
    $().w2form({
        name: 'asmInstForm',
        style: 'border: 0px; background-color: transparent;',
        header: app.sAssessment + ' Detail',
        url: '/v1/asm',
        formURL: '/webclient/html/formasminst.html',
        fields: [
            { field: 'ARID',          type: 'list',   required: true, options: { items: app.AssessmentRules } },
            { field: 'recid',         type: 'int',    required: false },
            { field: 'ASMID',         type: 'int',    required: false },
            { field: 'BUD',           type: 'list',   options:  {items: app.businesses}, required: false },
            { field: 'BID',         type: 'int',    required: true },
            { field: 'PASMID',        type: 'w2int',  required: false },
            { field: 'RID',           type: 'w2int',  hidden:   true },
            { field: 'Rentable',      type: 'text',   required: false },
            { field: 'RAID',          type: 'w2int',  required: false },
            { field: 'Amount',        type: 'money',  required: true },
            { field: 'Start',         type: 'date',   required: true },
            { field: 'Stop',          type: 'date',   required: true },
            { field: 'RentCycle',     type: 'list',   options:  {items: app.w2ui.listItems.cycleFreq}, required: true },
            { field: 'ProrationCycle',type: 'list',   options:  {items: app.w2ui.listItems.cycleFreq}, required: true },
            { field: 'Comment',       type: 'text',   required: false },
            { field: 'LastModTime',   type: 'hidden', required: false },
            { field: 'LastModBy',     type: 'hidden', required: false },
            { field: 'LastModByUser', type: 'hidden', required: false },
            { field: 'CreateTS',      type: 'hidden', required: false },
            { field: 'CreateBy',      type: 'hidden', required: false },
            { field: 'CreateByUser',  type: 'hidden', required: false },
            { field: 'FLAGS',         type: 'w2int',  required: false },
            { field: 'Mode',          type: 'w2int',  required: false },
        ],
        toolbar: {
            items: [
                { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
                { id: 'bt3', type: 'spacer' },
                { id: 'btnClose', type: 'button', icon: 'fas fa-times' },
            ],
            onClick: function (event) {
                switch(event.target) {
                case 'btnClose':
                    var no_callBack = function() { return false; },
                        yes_callBack = function() {
                            w2ui.toplayout.hide('right',true);
                            w2ui.asmsGrid.render();
                        };
                    form_dirty_alert(yes_callBack, no_callBack);
                    break;
                }
            },
        },
        onError: function(event) {
            console.log('onError handler called. event - '+event);
        },
        actions: {
            close: function() {
                var no_callBack = function() { return false; },
                    yes_callBack = function() {
                        w2ui.toplayout.hide('right',true);
                        w2ui.asmsGrid.render();
                    };
                form_dirty_alert(yes_callBack, no_callBack);
            },
            saveadd: function() {
                var f = this,
                    epochForm = w2ui.asmEpochForm,
                    grid = w2ui.asmsGrid,
                    BID = getCurrentBID(),
                    BUD = getBUDfromBID(BID);

                // clean dirty flag of form
                app.form_is_dirty = false;
                // clear the grid select recid
                app.last.grid_sel_recid  =-1;

                // unselect the record
                grid.selectNone();
                fixExpandType(this.record);

                // first save the record
                f.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }

                    // render the grid only
                    grid.render();

                    getBusinessAssessmentRules(BID, BUD)
                    .done( function(data) {
                        if ('status' in data && data.status !== 'success') {
                            f.message(data.message);
                        } else {
                            app.ridRentablePicker.BID = BID; // needed by typedown

                            // epochForm.fields[5].options.url = '/v1/rentablestd/' + app.ridRentablePicker.BID;
                            epochForm.get("ARID").options.items = app.AssessmentRules[BUD];
                            epochForm.record =  getAsmsInitRecord(BID, BUD, null);
                            // epochForm.header = "Edit Assessment (new)"; // have to provide header here, otherwise have to call refresh method twice to get this change in form
                            // f.refresh();
                            setToForm(epochForm.name, '/v1/asm/' + BID + '/0', 400);
                        }
                    })
                    .fail( function() {
                        console.log('Error getting /v1/uival/'+BID+'/app.AssessmentRules');
                     }); //get assessment UI val done
                });
            },
            save: function () {
                var f = this;
                var grid = w2ui.asmsGrid;
                fixExpandType(this.record);
                grid.selectNone();

                f.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }
                    w2ui.toplayout.hide('right',true);
                    grid.render();
                });

            },
            reverse: function() {
                popupAsmRevMode(0,w2ui.asmInstForm);
            },
        },
        onLoad: function(event) {
            event.onComplete = function() {
                var f = this;
                var r = f.record;

                // if PASMID is 0 then return
                if (r.PASMID === 0) {
                    return;
                }

                var BID = getCurrentBID();
                var params = {"cmd":"get", "recid":0,"name":"asmInstForm"};
                var dat = JSON.stringify(params);
                $.post('/v1/asm/' + BID + '/' + r.PASMID, dat, null, "json")
                .done( function(data) {
                    if (data.status !== 'success') {
                        f.message(data.message);
                        f.pasmStart = "";
                        f.pasmStop = "";
                    } else {
                        // get parent assessment dates and store it in form
                        f.pasmStart = data.record.Start;
                        f.pasmStop = data.record.Stop;
                    }
                })
                .fail( function() {
                    console.log('Error getting /v1/asm/' + BID + '/' + r.PASMID);
                });
            };
        },
        onRefresh: function(event) {
            event.onComplete = function() {
                var f = this,
                    r = f.record,
                    header = "Edit Assessment ({0})",
                    info = "";

                formRefreshCallBack(f, "ASMID", header);
                // ==============================
                // SPECIAL CASE
                // ==============================

                if (r.ASMID === 0) { // if new record then do not worry about reversed thing
                    $(f.box).find("button[name=reverse]").addClass("hidden");
                    $(f.box).find("button[name=save]").removeClass("hidden");
                    $(f.box).find("button[name=saveadd]").removeClass("hidden");
                    $(f.box).find("button[name=close]").addClass("hidden");
                    $(f.box).find("#FLAGReport").addClass("hidden");
                    $(f.box).find("#AssessmentInfo").addClass("hidden");

                    // ENABLE ALL INPUTS IF ALL OF THOSE HAVE BEEN DISABLED FOR REVERSED PREVIOUSLY
                    // $(f.box).find('input,button').not('input[name=BUD]').prop("disabled", false);

                    return;
                } else {
                    $(f.box).find("#FLAGReport").removeClass("hidden");
                    $(f.box).find("#AssessmentInfo").removeClass("hidden");
                }

                // Assessment Info at the top of form
                // r.epoch = app.epochInstance[  (r.RentCycle !== 'Norecur' && r.PASMID === 0) ? 0 : 1 ];
                if (typeof r.RentCycle !== "object") { return; }
                setTimeout(function(){
                    if (r.RentCycle.text == 'Norecur' && r.PASMID === 0) {
                        // Non-recurred instance
                        info = '<p style="margin-bottom: 0px;">Single Instance Assessment</p>'.format(r.ASMID);
                    } else {
                        // INSTANCE has 4 variables: ParentASM, RentCycle, Start, Stop
                        info = app.asmInstanceHeader.format(''+r.PASMID, r.RentCycle.text, f.pasmStart, f.pasmStop);
                    }
                    $(f.box).find("#AssessmentInfo").html(info);
                }, 500);

                // FLAG reports
                var flag = r.FLAGS,
                    flagHTML = "";

                // check if it is reversed or not
                if ( (flag & app.asmFLAGS.REVERSED) !== 0 ) { // if reversed then
                    flagHTML += "<p><strong>{0}</strong> ({1})</p>".format("REVERSED", r.Comment);
                    // reversed indication icon
                    flagHTML += get2XReversalSymbolHTML();
                    // if reversed then do not show reverse, save button in form
                    $(f.box).find("button[name=reverse]").addClass("hidden");
                    $(f.box).find("button[name=save]").addClass("hidden");
                    $(f.box).find("button[name=saveadd]").addClass("hidden");
                    // if reversed then we need to show close button at the bottom
                    $(f.box).find("button[name=close]").removeClass("hidden");

                    // ****************************************
                    // IF REVERSED THEN DISABLE ALL INPUTS, BUTTONS  EXCEPT close button
                    // ****************************************
                    $(f.box).find('input,button:not([name=close])').prop("disabled", true);

                } else {
                    // IF NOT REVERSED THEN ONLY SHOW PAID STATUS IN FOOTER
                    // unpaid, partial paid or fully paid
                    if ( (flag | app.asmFLAGS.UNPAID) === 0 || (flag & (app.asmFLAGS.PARTIALPAID | app.asmFLAGS.FULLYPAID)) === 0 ) {
                        flagHTML += "<p><strong>{0}</strong></p>".format("Unpaid");
                    }
                    else if ( (flag & app.asmFLAGS.PARTIALPAID) !== 0 ) {
                        flagHTML += "<p><strong>{0}</strong></p>".format("Partially paid");
                    }
                    else if ( (flag & app.asmFLAGS.FULLYPAID) !== 0 ) {
                        flagHTML += "<p><strong>{0}</strong></p>".format("Fully paid");
                    }

                    // show reverse, save button, hide close button
                    $(f.box).find("button[name=reverse]").removeClass("hidden");
                    $(f.box).find("button[name=save]").removeClass("hidden");
                    $(f.box).find("button[name=saveadd]").removeClass("hidden");
                    $(f.box).find("button[name=close]").addClass("hidden");

                    // ****************************************
                    // IF not REVERSED THEN ENABLE ALL INPUTS
                    // ****************************************
                    $(f.box).find('input,button').not('input[name=BUD]').prop("disabled", false);
                }

                // finally append
                flagHTML += "<p>Last Update: {0} by {1}</p>".format(r.LastModTime, r.LastModByUser);
                flagHTML += "<p>Created: {0} by {1}</p>".format(r.CreateTS, r.CreateByUser);
                $(f.box).find("#FLAGReport").html(flagHTML);
            };
        },
        onChange: function(event) {
            event.onComplete = function() {
                var f = this,
                    r = f.record;
                if (event.target == "Start") {
                    var x = document.getElementsByName('ExpandPastInst')[0];
                    var DtStart = dateFromString(event.value_new);
                    if (r.RentCycle.text != "Norecur") {
                        // create past instances is marked as true if startdate is prior to current date
                        f.record.ExpandPastInst = isDatePriorToCurrentDate(DtStart);
                        $(f.box).find("input[name=ExpandPastInst]").prop( "disabled", !isDatePriorToCurrentDate(DtStart) );
                    } else {
                        // if Start date has been changed, in rentcycle with norecur mode
                        // then we need to set stop date same value of start date
                        r.Stop = r.Start;
                        // Norecur then disable checkbox for "create past instances"
                        $(f.box).find("input[name=ExpandPastInst]").prop( "disabled", true);
                        f.record.ExpandPastInst = false;
                    }
                }
                if (event.target == "RentCycle") {
                    if (event.value_new.text == "Norecur") {
                        r.RentCycle = event.value_new;
                        r.ProrationCycle = "Norecur";
                        r.Stop = r.Start;
                        // disable stop date control
                        $(f.box).find("input[name=Stop]").prop( "disabled", true );
                        // Norecur then disable checkbox for "create past instances"
                        $(f.box).find("input[name=ExpandPastInst]").prop( "disabled", true);
                        f.record.ExpandPastInst = false;
                    } else {
                        // enable stop date control
                        $(f.box).find("input[name=Stop]").prop("disabled", false);
                        var startDate = $(f.box).find("input[name=Start]").val();
                        f.record.ExpandPastInst  = isDatePriorToCurrentDate(new Date(startDate));
                        $(f.box).find("input[name=ExpandPastInst]").prop( "disabled", !isDatePriorToCurrentDate(new Date(startDate)) );
                    }
                }

                // copy original record temporary and reset it back after refresh event
                var temp = $.extend(true, {}, app.active_form_original);
                // finally refresh the form
                f.refresh();
                // now reset app original form record
                app.active_form_original = $.extend(true, {}, temp);

                // formRecDiffer: 1=current record, 2=original record, 3=diff object
                var diff = formRecDiffer(r, app.active_form_original, {});
                // if diff == {} then make dirty flag as false, else true
                if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                    app.form_is_dirty = false;
                } else {
                    app.form_is_dirty = true;
                }
            };
        },
        onSubmit: function(target, data) {
            delete data.postData.record.LastModTime;
            delete data.postData.record.LastModBy;
            delete data.postData.record.CreateTS;
            delete data.postData.record.CreateBy;
            // modify form data for server request
            getFormSubmitData(data.postData.record);
            fixExpandType(data.postData.record);
            app.cycleFreq.forEach(function(item, index) {
                if (item == data.postData.record.RentCycle) {
                    data.postData.record.RentCycle = index;
                }
                if (item == data.postData.record.ProrationCycle) {
                    data.postData.record.ProrationCycle = index;
                }
            });
        },
    });


    //------------------------------------------------------------------------
    //          asmsReverseMode
    //------------------------------------------------------------------------
    $().w2form({
        name: 'reverseMode',
        style: 'border: 0px; background-color: transparent;',
        formURL: '/webclient/html/formasmrev.html',
        focus  : 0,
        fields: [
            { field: 'ReverseMode', type: 'list',
              options: { items: app.asmsRevMode},
             required: true },
        ],
        actions: {
            reverse: function () {
                // var form = w2ui.asmInstForm;
                var form = app.AsmtModeCallerForm;
                var tgrid = w2ui.asmsGrid;

                console.log('asmsReverseMode: Mode = ' + w2ui.reverseMode.record.ReverseMode.id);
                w2popup.close();
                w2ui.toplayout.hide('right',true);
                tgrid.refresh();

                var params = {
                    cmd:         'delete',
                    formname:    form.name,
                    ASMID:       form.record.ASMID,
                    ReverseMode: w2ui.reverseMode.record.ReverseMode.id,
                };
                var dat = JSON.stringify(params);

                // They chose the delete / reverse button
                $.post(form.url, dat, null, "json")
                .done(function(data) {
                    if (data.status === "error") {
                        form.error(w2utils.lang(data.message));
                        return;
                    }
                    w2ui.toplayout.hide('right',true);
                    // reversed items should not be deleted!
                    tgrid.render();
                })
                .fail(function(/*data*/){
                    form.error("Reverse Assessment instance failed.");
                    return;
                });
            },
            cancel: function() {
                w2popup.close();
            },
        },
    });
};

window.fixExpandType = function(record) {
    if (typeof record.ExpandPastInst == "number") {
        var b = record.ExpandPastInst == 1;
        record.ExpandPastInst = b;
    }
};

window.asmOpenRASelect = function () {
    rafinder.cb = asmFormRASelect;
    popupRentalAgrPicker();
};

window.asmFormRASelect = function () {
    w2ui.asmEpochForm.record.RAID = w2ui.rentalAgrPicker.record.RAID;
    w2ui.asmEpochForm.record.Rentable = w2ui.rentalAgrPicker.record.RentableName.text;
    w2ui.asmEpochForm.record.RID = w2ui.rentalAgrPicker.record.RentableName.id;
    w2ui.asmEpochForm.refresh();
};

window.popupAsmRevMode = function (mode,form) {
    w2ui.reverseMode.record.ReverseMode = mode;
    app.AsmtModeCallerForm = form;
    $().w2popup('open', {
        title   : 'Reverse Repeating Assessment',
        body    : '<div id="form" style="width: 100%; height: 100%;"></div>',
        style   : 'padding: 15px 0px 0px 0px',
        width   : 400,
        height  : 225,
        showMax : true,
        onToggle: function (event) {
            $(w2ui.reverseMode.box).hide();
            event.onComplete = function () {
                $(w2ui.reverseMode.box).show();
                w2ui.reverseMode.resize();
            };
        },
        onOpen: function (event) {
            event.onComplete = function () {
                $('#w2ui-popup #form').w2render('reverseMode');
            };
        }
    });
};

/*global
	buildDepositElements, buildAppLayout, buildSidebar, buildAllocFundsGrid,
    buildAccountElements, buildTransactElements, buildRentableTypeElements,
    buildRentableElements, buildRAPicker, buildReceiptElements,
    buildAssessmentElements, buildExpenseElements, buildARElements,
    buildPaymentTypeElements, buildDepositoryElements, buildDepositElements,
    buildStatementsElements, buildReportElements, buildLedgerElements,
    buildTWSElements, buildDepositMethodElements, buildPayorStatementElements,
    buildRentRollElements, buildLoginForm, buildAppLayout,
    buildROVReceiptElements,buildTaskListElements,buildTaskListDefElements,
    finishTaskListForm, createDepositForm, createPayorStmtForm,
    createStmtForm, finishForms, finishTLDForm,
    buildClosePeriodElements,buildRAFlowElements,buildBusinessElements,
    finishBizForm, 
*/

"use strict";

// buildPageElementsWrapper calls all the routines that build UI
// elements.
//
// INPUTS:
//  uitype - 0 - standard, full-featured, Roller interface
//           1 - the Receipt-Only version of Roller
//
// RETURNS:
//  nothing
//-----------------------------------------------------------------
window.buildPageElementsWrapper = function (uitype) {
    buildAppLayout();
    buildSidebar(uitype);
    buildAllocFundsGrid();
    buildAccountElements();
    buildBusinessElements();
    buildTransactElements();
    buildRentableTypeElements();
    buildRentableElements();
    buildRAFlowElements();
    buildRAPicker();
    switch (uitype) {
        case 0: buildReceiptElements(uitype); break;
        case 1: buildROVReceiptElements(uitype); break;
    }
    buildAssessmentElements();
    buildExpenseElements();
    buildARElements();
    buildPaymentTypeElements();
    buildDepositoryElements();
    buildDepositElements();
    buildStatementsElements();
    buildReportElements();
    buildLedgerElements();
    buildTWSElements();
    buildDepositMethodElements();
    buildPayorStatementElements();
    buildRentRollElements();
    buildLoginForm();
    buildTaskListElements();
    buildTaskListDefElements();
    finishForms();
};

// finishForms is something that needs to be done after all the
// UI elements have been created. In particular, we use this call
// to add UI elements to w2layout objects.  I'm still not sure why
// we need to wait to do this, but I do know that if we add these
// elements to the layouts right after the elements have been
// created then it doesn't work. By waiting a little bit, it all
// seems to work.
//
// INPUTS:
//
// RETURNS:
//  nothing
//-----------------------------------------------------------------
window.finishForms = function () {
    createStmtForm();
    createPayorStmtForm();
    createDepositForm();
    finishTaskListForm();
    finishTLDForm();
    finishBizForm();
};

"use strict";
/*global
    w2ui, $, app, console, w2utils,
    form_dirty_alert, addDateNavToToolbar, w2uiDateControlString,
    dateFromString, taskDateRender, setToTLForm,
    taskFormDueDate,taskCompletionChange,taskFormDoneDate,
    openTaskForm,setInnerHTML,w2popup,ensureSession,dtFormatISOToW2ui,
    createNewBusiness, getBUDfromBID, exportItemReportPDF, exportItemReportCSV,
    popupNewBusinessForm, getTLDs, getCurrentBID, getNewBusinessRecord,
    closeTaskForm, setTaskButtonsState, renderTaskGridDate, localtimeToUTC, TLD,
    taskFormDueDate1, finishBizForm, setToBizForm, renderReversalIcon,
    getGridReversalSymbolHTML, openBizForm, createNewBusiness, getBusinessInitRecord,
    tlPickerRender, tlPickerDropRender, tlPickerCompare, getTLName,
*/

//-----------------------------------------------------------------------------
// getBusinessInitRecord - the default new record values
//
// @params
//   bid = business id (or the BUD)
// d1,d2 = date range to use
//-----------------------------------------------------------------------------
window.getBusinessInitRecord = function() {
    var y = {
        Name: "",
        BUD: "",
        BID: 0,
        DefaultRentCycle: 6,
        DefaultProrationCycle: 4,
        DefaultGSRPC: 4,
        FLAGS: 1,
        EDIenabled: true,
        AllowBackdatedRA: false,
        Disabled: false,
    };
    return y;
};

//-----------------------------------------------------------------------------
// renderReversalIcon - Show the reversal icon if FLAGS bit 2 is set
//
// @params
//   bid = business id (or the BUD)
// d1,d2 = date range to use
//-----------------------------------------------------------------------------
window.renderReversalIcon = function (record /*, index, col_index*/) {
    if (typeof record === "undefined") {
        return;
    }
    if ( (record.FLAGS & (1<<2)) !== 0 ) { // if reversed then
        return getGridReversalSymbolHTML();
    }
    return '';
};

window.buildBusinessElements = function () {
    //------------------------------------------------------------------------
    //          tlsGrid  -  TASK LISTS in the date range
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'businessGrid',
        url: '/v1/tls',
        multiSelect: false,
        postData: {searchDtStart: app.D1, searchDtStop: app.D2},
        show: {
            toolbar         : true,
            footer          : true,
            toolbarAdd      : true,    // indicates if toolbar add new button is visible
            toolbarDelete   : false,   // indicates if toolbar delete button is visible
            toolbarSave     : false,   // indicates if toolbar save button is visible
            selectColumn    : false,
            expandColumn    : false,
            toolbarEdit     : false,
            toolbarSearch   : false,
            toolbarInput    : false,
            searchAll       : false,
            toolbarReload   : true,
            toolbarColumns  : true,
        },
        columns: [
            {field: 'recid',                    hidden: true,  size: '40px', sortable: false, caption: 'recid' },
            {field: 'reversed',                 hidden: false, size: '10px', style: 'text-align: center', sortable: true,
                    render: renderReversalIcon,
            },
            {field: 'BID',                      hidden: false, size: '40px', sortable: false, caption: 'BID' },
            {field: 'BUD',                      hidden: false, size: '40px', sortable: false, caption: 'BUD' },
            {field: 'Name',                     hidden: false, size: '90%', sortable: false, caption: 'Name' },
            {field: 'DefaultRentCycle',         hidden: true,  size: '40px', sortable: false, caption: 'DefaultRentCycle' },
            {field: 'DefaultProrationCycle',    hidden: true,  size: '40px', sortable: false, caption: 'DefaultProrationCycle' },
            {field: 'DefaultGSRPC',             hidden: true,  size: '40px', sortable: false, caption: 'DefaultGSRPC' },
            {field: 'ClosePeriodTLID',          hidden: true,  size: '40px', sortable: false, caption: 'ClosePeriodTLID' },
            {field: 'FLAGS',                    hidden: true,  size: '40px', sortable: false, caption: 'FLAGS' },
            {field: 'EDIenabled',               hidden: true,  size: '40px', sortable: false, caption: 'EDIenabled' },
            {field: 'AllowBackdatedRA',         hidden: true,  size: '40px', sortable: false, caption: 'AllowBackdatedRA' },
            {field: 'Disabled',                 hidden: true,  size: '40px', sortable: false, caption: 'Disabled' },
            {field: 'LastModTime',              hidden: true,  size: '40px', sortable: false, caption: 'LastModTime' },
            {field: 'LastModBy',                hidden: true,  size: '40px', sortable: false, caption: 'LastModBy' },
            {field: 'CreateTS',                 hidden: true,  size: '40px', sortable: false, caption: 'CreateTS' },
            {field: 'CreateBy',                 hidden: true,  size: '40px', sortable: false, caption: 'CreateBy' },
        ],
        onClick: function(event) {
            event.onComplete = function () {
                var yes_args = [this, event.recid],
                    no_args = [this],
                    no_callBack = function(grid) {
                        grid.select(app.last.grid_sel_recid);
                        return false;
                    },
                    yes_callBack = function(grid, recid) {
                        app.last.grid_sel_recid = parseInt(recid);

                        // keep highlighting current row in any case
                        grid.select(app.last.grid_sel_recid);

                        var rec = grid.get(recid);
                        setToBizForm(rec.BID, app.D1, app.D2);
                    };
                form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
            };
        },
        onAdd: function(event) {
            event.onComplete = function () {
                var bid = getCurrentBID();
                createNewBusiness(bid);
            };
        },
    });

    addDateNavToToolbar('business'); // "Grid" is appended to the supplied string

    //------------------------------------------------------------------------
    //  bizLayout - The layout to contain the tabbed form and buttons
    //               main - bizDetailForm
    //               bottom - bizCloseForm
    //------------------------------------------------------------------------
    $().w2layout({
        name: 'bizLayout',
        padding: 0,
        panels: [
            { type: 'left',    size: 0,     hidden: true },
            { type: 'top',     size: 0,     hidden: true, content: 'top',  resizable: true, style: app.pstyle },
            { type: 'main',    size: '60%', hidden: false, content: 'main', resizable: true, style: app.pstyle },
            { type: 'preview', size: 0,     hidden: true,  content: 'PREVIEW'  },
            { type: 'bottom',  size: 50,    hidden: false, content: 'bottom', resizable: false, style: app.pstyle },
            { type: 'right',   size: 0,     hidden: true }
        ]
    });

    //------------------------------------------------------------------------
    //  bizDetailForm
    //------------------------------------------------------------------------
    $().w2form({
        name: 'bizDetailForm',
        style: 'border: 0px; background-color: transparent;',
        formURL: '/webclient/html/formbizdetail.html',
        url: '/v1/business',
        toolbar: {
            items: [
                { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
                { id: 'bt3', type: 'spacer' },
                { id: 'btnClose', type: 'button', icon: 'fas fa-times' },
            ],
            onClick: function (event) {
                if (event.target == 'btnClose') {
                    var no_callBack = function() { return false; },
                        yes_callBack = function() {
                            w2ui.toplayout.hide('right',true);
                            w2ui.businessGrid.render();
                        };
                    form_dirty_alert(yes_callBack, no_callBack);
                }
                if (event.target == 'btnNotes') {
                    notesPopUp();
                }
            },
        },
        fields: [
            { field: 'BID',                     type: 'int',      required: false },
            { field: 'BUD',                     type: 'text',     required: false },
            { field: 'Name',                    type: 'text',     required: false },
            { field: 'DefaultRentCycle',        type: 'list',     required: false, options: {items: app.w2ui.listItems.cycleFreq}, },
            { field: 'DefaultProrationCycle',   type: 'list',     required: false, options: {items: app.w2ui.listItems.cycleFreq}, },
            { field: 'DefaultGSRPC',            type: 'list',     required: false, options: {items: app.w2ui.listItems.cycleFreq}, },
            { field: 'FLAGS',                   type: 'hidden',   required: false },
            { field: 'EDIenabled',              type: 'checkbox', required: false },
            { field: 'AllowBackdatedRA',        type: 'checkbox', required: false },
            { field: 'Disabled',                type: 'checkbox', required: false },
            { field: 'CPTLID',                  type: 'int',      required: false },
            { field: 'CPTLName',                type: 'enum',     required: false,
                options: {
                    url:            '/v1/tltd/',
                    max:            1,
                    items:          [],
                    openOnFocus:    true,
                    maxDropWidth:   350,
                    maxDropHeight:  350,
                    renderItem:     tlPickerRender,
                    renderDrop:     tlPickerDropRender,
                    compare:        tlPickerCompare,
                    onNew: function (event) {
                        console.log('++ New Item: Do not forget to submit it to the server too', event);
                        //$.extend(event.item, { FirstName: '', LastName : event.item.text });
                    }
                },
            },

            { field: 'LastModTime',             type: 'hidden',   required: false },
            { field: 'LastModBy',               type: 'hidden',   required: false },
            { field: 'CreateTS',                type: 'hidden',   required: false },
            { field: 'CreateBy',                type: 'hidden',   required: false },
        ],
        actions: {
            // save: function(target, data){
            //     var f = w2ui.bizDetailForm;
            //     var r = f.record;
            //     f.url = '/v1/business/' + r.BID ;
            //     var s = r.Name.text;
            //     r.TLDID = r.Name.id;
            //     r.Name = s;
            //     r.Pivot = localtimeToUTC(r.Pivot);
            //     r.Timezone = app.timezone;
            //     var params = {cmd: 'save', formname: f.name, record: r };
            //
            //     var dat = JSON.stringify(params);
            //     var BID = r.BID;
            //
            //     // submit request
            //     $.post(f.url, dat, null, "json")
            //     .done(function(data) {
            //         if (data.status != "success") {
            //             return;
            //         }
            //         w2ui.tlsGrid.reload();
            //         var tlid = data.recid;
            //         setToTLForm(BID, tlid, app.D1, app.D2);
            //         w2popup.close();
            //     })
            //     .fail(function(/*data*/){
            //         console.log("Payor Fund Allocation failed.");
            //     });
            //
            // },
        },
        // onLoad: function(event) {
        //     // event.onComplete = function(event) {
        //     // };
        // },
        onRefresh: function(event) {
            var f = this;
            event.onComplete = function(event) {
                var f = w2ui.bizDetailForm;
                var r = f.record;
                // if (typeof r.CPTLName === "undefined") {return;}
                if (r.ClosePeriodTLID === 0 || typeof r.CPTLName === "undefined") {
                    return;
                }
                var cp = {
                    recid: r.ClosePeriodTLID,
                    TLID: r.ClosePeriodTLID,
                    Name: r.CPTLName,
                };
                if ($(f.box).find("input[name=CPTLName]").length > 0) {
                    console.log('initialized CPTLName to '+cp.Name+ ' ' + cp.TLID);
                    $(f.box).find("input[name=CPTLName]").data('selected', [cp]).data('w2field').refresh();
                    //f.refresh();
                }
            };
        },
        onChange: function(event) {
            // event.onComplete = function() {
            // };
        },
    });

    //------------------------------------------------------------------------
    //  bizCloseForm
    //------------------------------------------------------------------------
    $().w2form({
        name: 'bizCloseForm',
        style: 'border: 0px; background-color: transparent;',
        formURL: '/webclient/html/formbizclose.html',
        url: '',
        fields: [],
        actions: {
            save: function(target, data){
                var r = w2ui.bizDetailForm.record;
                var business = {
                    cmd: "save",
                    record: r,
                };

                //---------------------------------------------
                // Change a few objects to integer values...
                //---------------------------------------------
                var x = r.DefaultRentCycle.id;
                business.record.DefaultRentCycle = x;
                x = r.DefaultProrationCycle.id;
                business.record.DefaultProrationCycle = x;
                x = r.DefaultGSRPC.id;
                business.record.DefaultGSRPC = x;

                var dat=JSON.stringify(business);
                var url='/v1/business/' + w2ui.bizDetailForm.record.BID;
                $.post(url,dat)
                .done(function(data) {
                    if (data.status === "error") {
                        w2ui.bizDetailForm.error(w2utils.lang(data.message));
                        return;
                    }
                    w2ui.toplayout.hide('right',true);
                    w2ui.businessGrid.render();
                })
                .fail(function(/*data*/){
                    w2ui.bizDetailForm.error("Save Business failed.");
                    return;
                });
            },

            delete: function(target,data) {
                // var business = {
                //     cmd: "delete",
                // };
                // var dat=JSON.stringify(business);
                // var url='/v1/business/' + w2ui.bizDetailForm.record.BID + '/' + w2ui.bizDetailForm.record.TLID;
                // $.post(url,dat)
                // .done(function(data) {
                //     if (data.status === "error") {
                //         w2ui.bizDetailForm.error(w2utils.lang(data.message));
                //         return;
                //     }
                //     w2ui.toplayout.hide('right',true);
                //     w2ui.tlsGrid.render();
                // })
                // .fail(function(/*data*/){
                //     w2ui.bizDetailForm.error("Save Business failed.");
                //     return;
                // });
            },
        },
    });
};

//-----------------------------------------------------------------------------
// openBizForm - make the form visible and render it
//
// @params
//-----------------------------------------------------------------------------
window.openBizForm = function() {
    w2ui.toplayout.content('right', w2ui.bizLayout);
    w2ui.toplayout.show('right', true);
    w2ui.toplayout.sizeTo('right', 500);
    w2ui.toplayout.render();
    app.new_form_rec = false;  // mark as record exists
    app.form_is_dirty = false; // mark as no changes yet
};

//-----------------------------------------------------------------------------
// setToBizForm - edit the supplied business.
//
// @params
//   bid = business id (or the BUD)
// d1,d2 = date range to use
//-----------------------------------------------------------------------------
window.setToBizForm = function (bid, d1,d2) {
    if (bid > 0) {
        w2ui.bizDetailForm.url = '/v1/business/' + bid; // the tasks associated with the selected tasklist
        w2ui.bizDetailForm.postData = {
            searchDtStart: d1,
            searchDtStop: d2,
        };
        w2ui.bizDetailForm.header = 'Business ' + bid;
        w2ui.bizDetailForm.request();
        w2ui.bizDetailForm.fields[11].options.url = '/v1/tltd/' + bid;
        openBizForm();
    }
};

//-----------------------------------------------------------------------------
// createNewBusiness - Initialize the form's record to a new business and
//      open the form.
//
// @params
//-----------------------------------------------------------------------------
window.createNewBusiness = function() {
    w2ui.bizDetailForm.record = getBusinessInitRecord();
    w2ui.bizDetailForm.header = 'Business (new)';
    w2ui.bizDetailForm.fields[11].options.url = '/v1/tltd'; // no biz id
    openBizForm();
};

//-----------------------------------------------------------------------------
// finishBizForm - Add graphical elements to the layout
//
// @params
//   bid = business id (or the BUD)
// d1,d2 = date range to use
//-----------------------------------------------------------------------------
window.finishBizForm = function (bid, d1,d2) {
    w2ui.bizLayout.content('main',  w2ui.bizDetailForm);
    w2ui.bizLayout.content('bottom',w2ui.bizCloseForm);
};

//-----------------------------------------------------------------------------
// tlPickerCompare - Compare item to the search string. Verify that the
//          supplied search string can be found in item.  If it's already
//          listed we don't want to list it again.
// @params
//   item = an object assumed to have a Name and TLID field
// @return - true if the search string is found, false otherwise
//-----------------------------------------------------------------------------
window.tlPickerCompare = function (item, search) {
    console.log('entered tlPickerCompare');
    var s = getTLName(item);
    s = s.toLowerCase();
    var srch = search.toLowerCase();
    var match = (s.indexOf(srch) >= 0);
    return match;
};

//-----------------------------------------------------------------------------
// tlPickerDropRender - renders a name during typedown.
// @params
//   item = an object assumed to have a FirstName and LastName
// @return - the name to render
//-----------------------------------------------------------------------------
window.tlPickerDropRender = function (item) {
    console.log('entered tlPickerDropRender');
    return getTLName(item);
};

//-----------------------------------------------------------------------------
// tlPickerRender - renders a name during typedown.
// @params
//   item = an object assumed to have a FirstName and LastName
// @return - true if the names match, false otherwise
//-----------------------------------------------------------------------------
window.tlPickerRender = function (item) {
    console.log('entered tlPickerRender.  item.Name = ' + item.Name + '  item.TLID = ' + item.TLID);
    w2ui.bizDetailForm.record.CPTLName = item.Name;
    w2ui.bizDetailForm.record.CPTLID = item.TLID;
    return getTLName(item);
};

//-----------------------------------------------------------------------------
// getTLName - returns an appropriate name for the supplied item.
//
// @params
//   item = an object assumed to have a Name and TLID
// @return - the name to render
//-----------------------------------------------------------------------------
window.getTLName = function (item) {
    var s = item.Name;
    if (item.TLID > 0) {
        s += ' ('+ item.TLID +')';
    }
    return s;
};

/*global
    w2ui,getCurrentBID,loadClosePeriodInfo,loadClosePeriodInfo,dtFormatISOToW2ui,errMsgHTML,
    successMsgHTML,cpMsg,
*/
"use strict";

var closePeriodData = {
    record: null,

};

window.switchToClosePeriod = function() {
    // w2ui.toplayout.load('main', w2ui.closePeriodLayout);
	w2ui.toplayout.load('main', '/webclient/html/cpinfo.html');
	w2ui.toplayout.hide('right',true);
    loadClosePeriodInfo();
};

// errMsgHTML - format error message in closePeriodMsgArea
//              This is message type 1
//------------------------------------------------------------
window.errMsgHTML = function(errmsg) {
    var s;
    if (errmsg.length > 0 ) {
        s = '<p style="background-color: #ffe0e0;color: #aa2222;border-color:#aa2222;border-style:solid;border-width: 1px 1px 1px 6px;"><br>&nbsp;&nbsp;' +
            '<i class="fas fa-exclamation-circle fa-2x"></i> &nbsp;&nbsp;' +
             errmsg + "<br>&nbsp;</p>";
    } else {
        s = "";
    }
    return s;
};

// errMsgHTML - format error message in closePeriodMsgArea
//              This is message type 0
//------------------------------------------------------------
window.successMsgHTML = function(msg) {
    var s;
    if (msg.length > 0 ) {
        s = '<p style="background-color: #e0ffe0;color: #22aa22;border-color:#22aa22;border-style:solid;border-width: 1px 1px 1px 6px;"><br>&nbsp;&nbsp;' +
            '<i class="fas fa-check-circle fa-2x"></i> &nbsp;&nbsp;' +
             msg + "<br>&nbsp;</p>";
    } else {
        s = "";
    }
    return s;
};

// cpMsg - write and format a message to the close period window.
//------------------------------------------------------------
window.cpMsg = function(s,mode) {
    var msg = "";
    switch (mode) {
        case 0: msg = successMsgHTML(s); break;
        case 1: msg = errMsgHTML(s); break;
    }
    document.getElementById("closePeriodMsgArea").innerHTML = msg;
};


//-----------------------------------------------------------------------------
// loadClosePeriodInfo - a layout in which we place an html page
// and a form.
//
// @params    msg - (optional) a string with an initial error message
//           mode - 0 = informational message, 1 = error message
//
// @returns
//-----------------------------------------------------------------------------
window.loadClosePeriodInfo = function (msg,mode) {
    var BID = getCurrentBID();
    var BUD = getBUDfromBID(BID);
    var params = {cmd: 'get' };
    var dat = JSON.stringify(params);

    if (typeof msg == "undefined") {
        msg = "";
        mode = 0;
    }
    //------------------------------------------------------------------------
    // If we were called with an error message, let's get it up there now....
    //------------------------------------------------------------------------
    if (msg.length > 0 ) {
        cpMsg(msg,mode);
    }

    // delete Depository request
    $.post('/v1/closeperiod/'+BID, dat, null, "json")
    .done(function(data) {

        var s = "";
        var bHaveCPTLID = false;         // does the business have a ClosePeriod TaskList
        var bHaveTargetTLID = false;     // is there an instance for this close period
        var bTargetTLCompleted = false;  // is the instance marked as completed

        if (data.status === "error") {
            cpMsg(data.message,1);
            return;
        }

        //--------------------------------------
        // Keep a local copy of the data record
        //--------------------------------------
        closePeriodData.record = data.record;
        closePeriodData.DtDone = new Date(data.record.DtDone);
        closePeriodData.DtLastClose = new Date(data.record.LastDtClose);
        var r = closePeriodData.record;

        //--------------------------------
        //  TASK LIST
        //--------------------------------
        if (r.TLID === 0) {
            s = 'No TaskList defined. You must set a TaskList for ' + BUD + ' to enable Close Period.';
        } else {
            bHaveCPTLID = true;
            s = r.TLName + ' &nbsp;&nbsp;';
            var ltl = dtFormatISOToW2ui(r.LastDtDone);
            if (ltl.length === 0) {
                s += "(no completed instances yet)";
            } else {
                s += "(last completion: " + ltl + ")";
            }
        }
        document.getElementById("closePeriodTL").innerHTML = s;

        //--------------------------------
        //  Last closed period
        //--------------------------------
        s = dtFormatISOToW2ui(r.LastDtClose);
        if (s.length > 0 ) {
             s += ' &nbsp;&nbsp;<i class="fas fa-lock"></i>';
        }
        document.getElementById("closePeriodLCP").innerHTML = s;

        //--------------------------------
        //  Target close period
        //--------------------------------
        s = dtFormatISOToW2ui(r.CloseTarget);
        if (s.length > 0 ) {
             s += ' &nbsp;&nbsp;<i class="fas fa-lock-open"></i>';
        }
        document.getElementById("closePeriodNCP").innerHTML = s;

        //--------------------------------
        //  Target close task list
        //--------------------------------
        if (r.TLIDTarget > 0) {
            bHaveTargetTLID = true;
            s = r.TLNameTarget + ' (' + r.TLIDTarget + ')';
            //var dtDue = new Date(r.DtDueTarget);
            var dtDone = new Date(r.DtDoneTarget);
            if (dtDone.getFullYear() > 1999) {
                bTargetTLCompleted = true;
                s += '  completed ' + dtFormatISOToW2ui(r.DtDoneTarget) + ' &nbsp;&nbsp;&#9989;';
            } else {
                s += '  not completed. &nbsp;Due on ' + dtFormatISOToW2ui(r.DtDueTarget) + ' &nbsp;&nbsp;&#10060;';
            }
        } else {
            s = "No task list instance for due date " + dtFormatISOToW2ui(r.DtDueTarget) + ' &nbsp;&nbsp;&#10060;';
        }
        document.getElementById("closeTargetTL").innerHTML = s;

        //--------------------------------
        //  Submit button
        //--------------------------------
        var disable = !(bHaveCPTLID && bHaveTargetTLID && bTargetTLCompleted);
        document.getElementById("closePeriodSubmit").disabled = disable;

    })
    .fail(function(/*data*/){
        var x = document.getElementById("closePeriodMsgArea");
        if (x !== null) {
            cpMsg("Get close period info failed.",1);
        }
    });
};

//-----------------------------------------------------------------------------
// submitClosePeriod is called when all the conditions of a close period are
// met and the user clicks the buttong to close the period.
//
// @params
//
// @returns
//-----------------------------------------------------------------------------
window.submitClosePeriod = function() {
    console.log('close the period');
    var BID = getCurrentBID();
    var BUD = getBUDfromBID(BID);
    var params = {cmd: 'save', record: closePeriodData.record };
    var dat = JSON.stringify(params);

    var url = '/v1/closeperiod/'+BID;
    $.post(url, dat, null, "json")
    .done( function(data) {
        if (data.status !== 'success') {
            loadClosePeriodInfo(data.message,1);
            return;
        }

        loadClosePeriodInfo('Successfully closed period ending ' +
            dtFormatISOToW2ui(closePeriodData.record.CloseTarget),0);
    })
    .fail( function() {
        loadClosePeriodInfo('error with post to: ' + url,1);
    });
};

/*global
    app, w2ui, $, monthBack, monthFwd, dayBack, dayFwd, setToCurrentMonth, setToNextMonth,
    console, dateFromString, dateControlString, w2uiDateControlString, setDateControl, updateGridPostDataDates
*/
"use strict";

//-----------------------------------------------------------------------------
// handleDateToolbarAction
//          - based on the button selected, perform the appropriate date
//            modification, update the dates in the App structure, and update
//            the toolbar widgets.
// @params
//          event - the event that occurred on the button bar
//          prefix - the prefix of the name of the date controls.  For example,
//                  if the date control is named receiptsD1, then the prefix
//                  is 'receipts'.
// @return  <no return value>
//-----------------------------------------------------------------------------
window.handleDateToolbarAction = function (event,prefix) {
    // console.log('handleDateToolbarAction: target = ' + event.target + ' prefix = ' + prefix);
    var xd1 = document.getElementsByName(prefix + 'D1')[0];
    var xd2 = document.getElementsByName(prefix + 'D2')[0];
    switch (event.target) {
        case 'monthback':
            app.D1 = monthBack(xd1);
            if ( !event.originalEvent.shiftKey ) {
                app.D2 = monthBack(xd2);
            }
            break;
        case 'monthfwd':
            if ( !event.originalEvent.shiftKey ) {
                app.D1 = monthFwd(xd1);
            }
            app.D2 = monthFwd(xd2,app.D2);
            break;
        case 'today':
            if ( event.originalEvent.shiftKey ) {
                var y = new Date();
                var d1 = new Date(y.getFullYear(), y.getMonth(), y.getDate(), 0, 0, 0, 0);
                app.D1 = setDateControl(xd1, d1);
                var d2 = dateFromString(app.D1);
                d2.setDate(d2.getDate());
                app.D2 = setDateControl(xd2, d2);
            } else {
                app.D1 = setToCurrentMonth(xd1);
                app.D2 = setToNextMonth(xd2);
            }
            break;
        case 'dayback':
            app.D1 = dayBack(xd1);
            if ( !event.originalEvent.shiftKey ) {
                app.D2 = dayBack(xd2);
            }
            break;
        case 'dayfwd':
            if ( !event.originalEvent.shiftKey ) {
                app.D1 = dayFwd(xd1);
            }
            app.D2 = dayFwd(xd2);
            break;
    }
};

//-----------------------------------------------------------------------------
// setDateControlsInToolbar
//           -  Utility routine to set the date in a toolbar date navigation
//              area to the date values in app.D1 and app.D2
// @params
//   prefix = the prefix of the name of the date controls.  For example,
//            if the date control is named receiptsD1, then the prefix is
//            'receipts'.
// @return  <no return value>
//-----------------------------------------------------------------------------
window.setDateControlsInToolbar = function (prefix) {
    var xd1 = document.getElementsByName(prefix + 'D1')[0];
    var xd2 = document.getElementsByName(prefix + 'D2')[0];
    var x = app.D2;
    if (typeof xd1 != "undefined") { xd1.value = app.D1; }
    if (typeof xd2 != "undefined") { xd2.value = x; }
};


//-----------------------------------------------------------------------------
// genDateRangeNavigator
//           -  Utility routine create an array of fields that form
//              a date range navigator.  The prefix is applied to the
//              <input type="date"> controls so that they can be
//              uniquely identified.
// @params
//   prefix = the prefix of the name of the date controls.  For example,
//            if the date control is named receiptsD1, then the prefix is
//            'receipts'.
// @return  an array of fields that can be passed into toolbar.add()
//-----------------------------------------------------------------------------
window.genDateRangeNavigator = function (prefix) {
    var html1 = '<div class="w2ui-field" style="padding: 0px 5px;">From: <input type="us-dateA" name="' + prefix + 'D1"></div>';
    var html2 = '<div class="w2ui-field" style="padding: 0px 5px;">To: <input  type="us-dateB" name="' + prefix + 'D2">' + '</div>';
    var tmp = [{ type: 'break', id: 'break1' },
        { type: 'button', id: 'monthback', icon: 'fas fa-backward', tooltip: 'month back' },
        { type: 'button', id: 'dayback', icon: 'fas fa-chevron-circle-left', tooltip: 'day back' },
        { type: 'html', id: 'D1', html: function() {return html1; },
        onRefresh: function(event) {
               if(event.target == 'D1'){
                   // console.log('Event type: '+ event.type + ' TARGET: '+ event.target, event);

                   // w2field in toolbar must be initialized during refresh
                   //     see: https://github.com/vitmalina/w2ui/issues/886
                   event.onComplete = function(/*ev*/){
                       $('input[name='+ prefix +'D1]').w2field('date', {format: 'm/d/yyyy'});
                   };
               }
            }
        },
        { type: 'button', id: 'today', icon: 'far fa-circle', tooltip: 'present month' },
        { type: 'html', id: 'D2', html: function() {return html2; },
        onRefresh: function(event) {
               if(event.target == 'D2'){
                   // console.log('Event type: '+ event.type + ' TARGET: '+ event.target, event);

                   // w2field in toolbar must be initialized during refresh
                   // see: https://github.com/vitmalina/w2ui/issues/886
                   event.onComplete = function(/*ev*/){
                       $('input[name='+ prefix +'D2]').w2field('date', {format: 'm/d/yyyy', start: $('input[name='+ prefix +'D1]')});
                   };
               }
            }
        },
        { type: 'button', id: 'dayfwd', icon: 'fas fa-chevron-circle-right', tooltip: 'day forward' },
        { type: 'button', id: 'monthfwd', icon: 'fas fa-forward', tooltip: 'month forward' },
    ];
    return tmp;
};

//-----------------------------------------------------------------------------
// updateGridPostDataDates
//          - if searchDtStart and searchDtStop have been defined in
//            grid.postData then update their values with the current
//            dates in the datanav controls
// @params
//   grid   the grid of interest
// @return  <no return value>
//-----------------------------------------------------------------------------
window.updateGridPostDataDates = function (grid) {
    var x = typeof grid.postData.searchDtStart;
    if (x === "string" || x === "undefined") {
        grid.postData.searchDtStart = app.D1;
        grid.postData.searchDtStop  = app.D2;
    }
};


//-----------------------------------------------------------------------------
// addDateNavToToolbar
//          - Utility routine create add a date navigator to a toolbar
// @params
//   prefix = the w2ui grid control prefix name that follows the naming
//            convention:  prefix + 'Grid'
// @return  <no return value>
//-----------------------------------------------------------------------------
window.addDateNavToToolbar = function (prefix) {
    var grid = w2ui[prefix+'Grid'];
    grid.toolbar.add( genDateRangeNavigator(prefix) );
    grid.toolbar.on('click', function(event) {
        if (event.target == 'w2ui-add') {
            return; // this function does not handle 'w2ui-add'
        }
        handleDateToolbarAction(event,prefix); // adjusts dates and loads into date controls
        updateGridPostDataDates(grid);
        grid.load(grid.url, function() {
            grid.refresh(); // need to refresh the grid for redraw purpose
        });
    });
    grid.toolbar.on('refresh', function (/*event*/) {
        setDateControlsInToolbar(prefix);
        updateGridPostDataDates(grid);
    });

    // bind onchange event for date input control for assessments
    var nd1 = prefix + "D1";
    var nd2 = prefix + "D2";
    $(document).on("keypress change", "input[name="+nd1+"]", function(e) {
        // if event type is keypress then
        if (e.type == 'keypress'){
            // do not proceed further until the user presses the Enter key
            if (e.which != 13) {
                return;
            }
        }
        var xd1 = document.getElementsByName(nd1)[0].value;
        var xd2 = document.getElementsByName(nd2)[0].value;
        var d1 = dateFromString(xd1);
        var d2 = dateFromString(xd2);

        // check that it is valid or not
        if (isNaN(Date.parse(xd1)) || isNaN(Date.parse(xd2))) {
            return;
        }
        // check that year is not behind 2000
        if (d1.getFullYear() < 2000) {
            return;
        }
        // check that from date does not have value greater then To date
        if (d1.getTime() >= d2.getTime()) {
            d1 = new Date(d2.getTime() - 24 * 60 * 60 * 1000); //one day back from To date
        }

        if(!(app.dateFormatRegex.test(xd1))){
            this.style.borderColor = 'red';
            return;
        }

        app.D1 = dateControlString(d1);
        app.D2 = dateControlString(d2);
        updateGridPostDataDates(grid);
        grid.load(grid.url, function() {
            grid.refresh();
            if (app.tabKeyPressed) {
                setTimeout(function () {
                    // remove any calender overlay from document
                    if ($("#w2ui-overlay").length > 0) $('#w2ui-overlay')[0].hide();
                    // move focus on next field, so it will open calender overlay for next field
                    $("input[name="+nd2+"]").focus();
                    $("input[name="+nd2+"]").select();
                    app.tabKeyPressed = false;
                    app.shiftTabKeyPressed = false;
                }, 50);
            }
        });
    }).on("keypress change", "input[name="+nd2+"]", function(e) {
        // if event type is keypress then
        if (e.type == 'keypress'){
            // do not procedd further untill user press the Enter key
            if (e.which != 13) {
                return;
            }
        }
        var xd1 = document.getElementsByName(nd1)[0].value;
        var xd2 = document.getElementsByName(nd2)[0].value;
        var d1 = dateFromString(xd1);
        var d2 = dateFromString(xd2);

        // check that it is valid or not
        if (isNaN(Date.parse(xd1)) || isNaN(Date.parse(xd2))) {
            return;
        }
        // check that year is not behind 2000
        if (d2.getFullYear() < 2000) {
            return;
        }
        // check that from date does not have value greater then To date
        if (d2.getTime() <= d1.getTime()) {
            d2 = new Date(d1.getTime() + 24 * 60 * 60 * 1000); //one day forward from From date
        }

        if(!(app.dateFormatRegex.test(xd2))){
            this.style.borderColor = 'red';
            return;
        }

        app.D1 = dateControlString(d1);
        app.D2 = dateControlString(d2);
        updateGridPostDataDates(grid);
        grid.load(grid.url, function() {
            grid.refresh();
            if (app.shiftTabKeyPressed) {
                setTimeout(function () {
                    // remove any calender overlay from document
                    if ($("#w2ui-overlay").length > 0) $('#w2ui-overlay')[0].hide();
                    // move focus on next field, so it will open calender overlay for last field (defualt shift+tab)
                    $("input[name="+nd1+"]").focus();
                    $("input[name="+nd1+"]").select();
                    app.tabKeyPressed = false;
                    app.shiftTabKeyPressed = false;
                }, 50);
            }
        });
    }).on("keyup keydown", "input[name="+nd1+"], input[name="+nd2+"]", function(e) {
        // tracking tab key on both date input
         if (e.type === 'keydown') {
            if(e.which == 9){
                app.tabKeyPressed = true;
                if (e.shiftKey) {
                    app.shiftTabKeyPressed = true;
                }
            }
        }
    });
};

"use strict";
/*global
  app, setDateControl, dateMonthBack, getDateFromDT, getTimeFromDT, dateFromString,
  dateFmtStr, zeroPad, 
*/

//-----------------------------------------------------------------------------
// newDateKeepOldTime - create a new date keeping the hour and minute equal
//           to the supplied "orig" values, and using the supplied year, month,
//           and day.
// @params
//   orig = date string - probably from a date control
//   y    = year
//   m    = month
//   d    = day
//
// @return date object
//-----------------------------------------------------------------------------
window.newDateKeepOldTime = function(orig,y,m,d) {
    var dt = new Date(orig);
    var ddt = new Date(y,m,d,dt.getHours(),dt.getMinutes());
    return ddt;
};

//-----------------------------------------------------------------------------
// zeroPad - if the string value of the number is < size, 
//           left pad it with '0' to make it the requested size.
//           LIMITATION - at most, it will pad 10 '0's.  This is 
//           extreme overkill for working with date/time strings.
// @params
//   n    = the number of interest
//   size = number of characters the output number should be
// @return string version of the number left-padded with '0's
//         to achieve a length of size.
//-----------------------------------------------------------------------------
window.zeroPad = function (n, size) {
    var s = "0000000000" + n;
    return s.substr(s.length-size);
};

//-----------------------------------------------------------------------------
// dtFormatISOToW2ui - return a w2ui datetime string from the provided
//          ISO 8601 formatted date string -- the format of JSONDateTIme 
//          strings.  The returned string is in the format:
//          m/dd/yyyy H:MM {am|pm} . It is suitable for use in a w2ui
//          form control of type 'datetime'. For example:
//
//          input: "2018-04-04T23:38:00Z"
//          output: '4/04/2018 11:38 pm'.
//
//          If the year is prior to year 2000, it returns a 0 length string.
// @params
//   s    = JSONDateTime string
// @return 
//         localtime string
//-----------------------------------------------------------------------------
window.dtFormatISOToW2ui = function (ds) {
    if (typeof ds != "string") {return ds;}  // handle error case of bad data type
    if (ds.indexOf('T') < 0) {return ds;}    // handle case where it's not in ISO format

    var dt = new Date(Date.parse(ds));
    if (dt.getFullYear() < 2000) {return '';}
    var hr = dt.getHours();
    var am = true;
    if (hr >= 12) {
        am = false;
    }
    if (hr > 12) {
        hr -= 12;
    }
    var s = 1+dt.getMonth() + '/' + zeroPad(dt.getDate(),2) + '/' +
            dt.getFullYear() + ' ' + hr + ':' + zeroPad(dt.getMinutes(),2) +
            ' ' + (am ? 'am' : 'pm');
    return s;
};

//-----------------------------------------------------------------------------
// localtimeToUTC - return a UTC datetime string from the localtime string
//          created by a w2ui datetime control.  That is, change a string
//          like this PDT string, "1/20/2018 1:00 am", to a UTC string
//          like this: "Sat, 20 Jan 2018 09:00:00 GMT"
// @params
//   s    = localtime string
// @return  UTC string
//-----------------------------------------------------------------------------
window.localtimeToUTC = function (s) {
    if (typeof s === "string" && s.length > 0) {
        var dt = new Date(s);
        return dt.toUTCString(); 
    }
    return '';
};

//-----------------------------------------------------------------------------
// dayBack - supply the date control and this function will go to the previous
//           day.
// @params
//   dc = date control
// @return string value that was set in dc
//-----------------------------------------------------------------------------
window.dayBack = function (dc) {
    var x = dateFromString(dc.value);
    x.setDate(x.getDate() - 1);
    return setDateControl(dc, x);
};

//-----------------------------------------------------------------------------
// dayFwd - supply the date control and this function will go to the next day.
// @params
//   dc = date control
// @return string value that was set in dc
//-----------------------------------------------------------------------------
window.dayFwd = function (dc) {
    var x = dateFromString(dc.value);
    x.setDate(x.getDate() + 1);
    return setDateControl(dc, x);
};

//-----------------------------------------------------------------------------
// dateMonthFwd - return a date that is one month from the supplied date. It
//                will snap the date to the end of the month if the
//                current date is the end of the month.
// @params
//   y = starting date
// @return - a date that is one month from y
//-----------------------------------------------------------------------------
window.dateMonthFwd = function (y) {

    var m = (y.getMonth() + 1) % 12; // set m to the correct next month value
    var my = (y.getMonth() + 1) / 12; // number of years to add for next month
    var d = y.getDate(); // this is the target date
    // console.log('dateMonthFwd: T1 -    d = ' + d);

    // If there is a chance that there is no such date next month, then let's make sure we
    // do this right. If the date is >= 28, then always snap it to the end of the month.
    if (d >= 28) {
        // var d0 = new Date(y.getFullYear() + my, m, 0, 0, 0, 0);
        // var daysInCurrentMonth = d0.getDate();
        var m2 = (y.getMonth() + 2) % 12; // used to find # days in month m
        var m2y = (y.getMonth() + 2) / 12; // number of years to add for month m
        var d3 = new Date(y.getFullYear() + m2y, m2, 0, 0, 0, 0);
        var daysInNextMonth = d3.getDate();
        //if (d >= daysInNextMonth || d == daysInCurrentMonth) { d = daysInNextMonth; }
        d = daysInNextMonth;
    }
    // console.log('dateMonthFwd:  m = ' + m + '   d = ' + d);
    var d2 = new Date(y.getFullYear() + my, m, d, 0, 0, 0);
    return d2;
};

//-----------------------------------------------------------------------------
// monthFwd - supply the date control and this function will go to the next
//            month. It will snap the date to the end of the month if the
//            current date is the end of the month.
// @params
//   dc     = date control
//   strval = if provided, it needs to the string value to use for the existing
//            date rather than the value of the supplied date control
// @return string value that was set in dc
//-----------------------------------------------------------------------------
window.monthFwd = function (dc,strval) {
    var y = dateFromString(dc.value);
    if (typeof strval == "string") {
        y = dateFromString(strval);
    }
    var d2 = dateMonthFwd(y);
    return setDateControl(dc, d2);
};

//-----------------------------------------------------------------------------
// setToCurrentMonth
//            This routine sets the supplied date control to the 1st of
//            the current month.
// @params
//   dc = date control
// @return string value that was set in dc
//-----------------------------------------------------------------------------
window.setToCurrentMonth = function (dc) {
    var y = new Date();
    var d2 = new Date(y.getFullYear(), y.getMonth(), 1, 0, 0, 0, 0);
    return setDateControl(dc, d2);
};

//-----------------------------------------------------------------------------
// setToNextMonth
//            This routine sets the supplied date control to the 1st of
//            the next month.
//            NOTICE: Assumes we're setting the end date of a date range.
//                    DO NOT CALL THIS ROUTINE TO SET A START DATE
// @params
//   dc = date control
// @return string value that was set in dc
//-----------------------------------------------------------------------------
window.setToNextMonth = function (dc) {
    var y = new Date();
    var my = (y.getMonth() + 1) / 12; // number of years to add for next month
    var m = (y.getMonth() + 1) % 12;  // next month
    var d2 = new Date(y.getFullYear() + my, m, 1, 0,0,0,0);
    var s = w2uiDateControlString(d2);

    // now work out the display date:
    var dispDate = d2; // assume it's mode 0

    // check EDI mode for this business and set app.D2 accordingly
    var BID = getCurrentBID();
    var BUD = getBUDfromBID(BID);
    if (EDIEnabledForBUD(BUD)) {
        dispDate.setDate(dispDate.getDate() - 1);
    }

    dc.value = w2uiDateControlString(dispDate);

    // return s;
    return dc.value;
};

//-----------------------------------------------------------------------------
// dateMonthBack - return a date which is a month prior to the supplied date
// @params
//   y = input date
// @return date which is y - 1 month
//-----------------------------------------------------------------------------
window.dateMonthBack = function (y) {
    var yb = 0; // assume same year
    var m = y.getMonth() - 1;
    if (m < 0) {
        m = 11;
        yb = 1; // we've gone back one year
    }
    var d = y.getDate();
    if (d >= 28) {
        var d0 = new Date(y.getFullYear(), ((y.getMonth() + 1) % 12), 0, 0, 0, 0); // date of last day in prev month
        var daysInCurrentMonth = d0.getDate();
        var d3 = new Date(y.getFullYear() - yb, y.getMonth(), 0, 0, 0, 0); // date() is number of days in month y.getMonth()
        var daysInPrevMonth = d3.getDate();
        //if (d == daysInCurrentMonth || d >= daysInPrevMonth) { d = daysInPrevMonth; }
        d = daysInPrevMonth;
    }
    return new Date(y.getFullYear() - yb, m, d, 0, 0, 0);
};

//-----------------------------------------------------------------------------
// monthBack - supply the date control, this function will go to the previous
//             month. It will snap the date to the end of the month if the
//             current date is the end of the month.
// @params
//   dc = date control
// @return string value that was set in dc
//-----------------------------------------------------------------------------
window.monthBack = function (dc) {
    var y = dateFromString(dc.value);
    var d2 =  dateMonthBack(y);
    return setDateControl(dc, d2);
};

//-----------------------------------------------------------------------------
// dateControlString
//           - return a date string based on the supplied date that can be
//             used as the .value attribute of a date control.  That is, in
//             the format  m/d/yyyy.
// @params
//   dt = java date value
// @return string value m/d/yyyy
//-----------------------------------------------------------------------------
window.dateControlString = function (dt) {
    var m = dt.getMonth() + 1;
    var d = dt.getDate();
    // if (m < 10) { s += '0'; }
    var s = '' + m + '/';
    // if (d < 10) { s += '0'; }
    s += d;
    s += '/' + dt.getFullYear();
    return s;
};

//-----------------------------------------------------------------------------
// w2uiDateControlString
//           - return a date string formatted the way the w2ui dates are
//             expected, based on the supplied date that can be
//             used as the .value attribute of a date control.  That is, in
//             the format  m/d/yyyy.
// @params
//   dt = java date value
// @return string value mm-dd-yyyy
//-----------------------------------------------------------------------------
window.w2uiDateControlString = function (dt) {
    var m = dt.getMonth() + 1;
    var d = dt.getDate();
    var s = '' + m + '/' + d+'/' + dt.getFullYear();
    return s;
};

//-----------------------------------------------------------------------------
// w2uiUTCDateControlString
//           - return a UTC date string formatted the way the w2ui dates are
//             expected, based on the supplied date that can be
//             used as the .value attribute of a date control.  That is, in
//             the format  m/d/yyyy.
// @params
//   dt = java date value
// @return string value mm-dd-yyyy
//-----------------------------------------------------------------------------
window.w2uiUTCDateControlString = function (dt) {
    var m = dt.getUTCMonth() + 1;
    var d = dt.getUTCDate();
    var s = '' + m + '/' + d+'/' + dt.getUTCFullYear();
    return s;
};

//-----------------------------------------------------------------------------
// w2uiDateTimeControlString
//           - return a datetime string formatted the way the w2ui datetimes
//             are expected, based on the supplied date that can be
//             used as the .value attribute of a date control.  That is, in
//             the format  m/d/yyyy HH:MM {am|pm}.
// @params
//   dt = java date value
// @return string value mm-dd-yyyy HH:MM {am|pm}
//-----------------------------------------------------------------------------
window.w2uiDateTimeControlString = function (dt) {
    var m = dt.getMonth() + 1;
    var d = dt.getDate();
    var H = dt.getHours();
    var M = dt.getMinutes();
    var s = m + '/' + d + '/' + dt.getFullYear() + ' ';
    var bPM = H >= 12;
    if (H > 12) { H = H-12;}
    s += H + ':';
    if (M < 10) {
        s += '0';
    }
    s += M + ' ' + ((bPM) ? 'p':'a') + 'm';
    return s;
};

//-----------------------------------------------------------------------------
// setDateControl
//           - supply the date control and the date. This function will format
//             the date as needed by the date control. Then it will set the
//             date control with that date. It also returns the date string
//             used to set the control.
// @params
//   dc = date control
//   dt = java date value to set in dc
// @return string value that was set in dc
//-----------------------------------------------------------------------------
window.setDateControl = function (dc, dt) {
    var s = w2uiDateControlString(dt);
    dc.value = s;
    return s;
};

//-----------------------------------------------------------------------------
// getTimeFromDT
//           - If the string is a datetime string, this function will return
//             the time portion. If there is no time portion, it returns null.
//             Datetime strings come in this format: 2018-02-28T17:00:00Z
//             if the T is present it will return 17:00:00Z .  
// @params
//   dt = a datetime string
// @return time portion of datetime string 
//         or the original string if no time is present
//-----------------------------------------------------------------------------
window.getTimeFromDT = function (dt) {
    if (typeof dt === "undefined") { return ""; }
    var i = dt.indexOf("T");
    var l = dt.length;
    var s = dt;
    if (i >= 0 &&  i+1 < l) {
        s = dt.substr(i+1,l-1);
    }
    return s;
};

//-----------------------------------------------------------------------------
// getDateFromDT
//           - If the string is a datetime string, this function will return
//             the date portion. If there is no date portion, it returns null.
//             Datetime strings come in this format: 2018-02-28T17:00:00Z
//             if the T is present it will return 2018-02-28.  
// @params
//   dt = a datetime string
// @return date portion of datetime string
//         or the original string if no date is present
//-----------------------------------------------------------------------------
window.getDateFromDT = function (dt) {
    if (typeof dt === "undefined") { return ""; }
    var i = dt.indexOf("T");
    var l = dt.length;
    if (i > 0 && l > i) {
        var s = dt.substr(0,i);
        return s;
    }
    return dt;
};

//-----------------------------------------------------------------------------
// dtTextRender - enable the Statement form in toplayout.  Also, set
//                the forms url and request data from the server
// @params
//   bid = business id (or the BUD)
//    id = Task List TLID
// d1,d2 = date range to use
//-----------------------------------------------------------------------------
window.dtTextRender = function (dt, index, col_index) {
    var d = getDateFromDT(dt);
    var t = getTimeFromDT(dt);
    if (d != t) {
        return d + ' ' + t;
    }
    return d;
};

//-----------------------------------------------------------------------------
// dateFromString - return a java date value equal to the date in the supplied
//      date control.  Datetime strings come in this format: 2018-02-28T17:00:00Z
//      if the T is present, discard everthing to the right of it before
//      doing any parsing
//
//
// @params
//   dt = date or datetime string value
// @return - java date value
//-----------------------------------------------------------------------------
window.dateFromString = function (dt) {
    if (dt === null) {
        return null;
    }

    var ds = getDateFromDT(dt);

    // Strange thing about javascript dates
    // new Date("2017-06-28") gives a date with offset value with local timezone i.e, Wed Jun 28 2017 05:30:00 GMT+0530 (IST)
    // new Date("2017/06/28") gives a date without offset value with local timezone i.e, Wed Jun 28 2017 00:00:00 GMT+0530 (IST)
    ds = ds.replace(/-/g,"\/");
    ds = ds.replace(/T.+/, ''); // first replace `/` with `-` and also remove `hh:mm:ss` value we don't need it
    return new Date(ds);
};

//-----------------------------------------------------------------------------
// dateTodayStr - return a string with today's date in the form d/m/yyyy
// @params
//   <none>
// @return - formatted date string
//-----------------------------------------------------------------------------
window.dateTodayStr = function () {
    var today = new Date();
    return dateFmtStr(today);
};

//-----------------------------------------------------------------------------
// dateFmtStr - return a string with the supplied date in the form d/m/yyyy
// @params
//    date
// @return - formatted date string
//-----------------------------------------------------------------------------
window.dateFmtStr = function (today) {
    var dd = today.getDate();
    var mm = today.getMonth() + 1; //January is 0!
    var yyyy = today.getFullYear();
    return mm + '/' + dd + '/' + yyyy;
};

//-----------------------------------------------------------------------------
// isDatePriorToCurrentDate - return boolean value
// @params
//    date object
// @return - boolean
//-----------------------------------------------------------------------------
window.isDatePriorToCurrentDate = function (date) {
    var dd = date.getDate();
    var mm = date.getMonth() + 1; //January is 0!
    var yyyy = date.getFullYear();
    var currentDateTime = new Date();
    if (currentDateTime.getTime() >= date.getTime()) {
        if (currentDateTime.getDate() == dd && currentDateTime.getMonth() == mm && currentDateTime.getFullYear() == yyyy) {
            return false;
        } else {
            return true;
        }
    }
    return false;
};

$(function() {
     $(document).on("blur change", "input[type=us-date1], input[type=us-date2]", function(e) {
         // replace trailing zero from date using regex
         this.value = this.value.replace(/\b0*(?=\d)/g, '');
         if(app.dateFormatRegex.test(this.value)){
             this.style.borderColor = '#cacaca';
         } else {
            this.style.borderColor = 'red';
         }
     });
 });
/*global
    parseInt, w2ui, app, getDepMethInitRecord
*/

"use strict";

window.getDepMethInitRecord = function (BID, BUD){
    return {
        recid: 0,
        DPMID: 0,
        BID: BID,
        BUD: BUD,
        Name: '',
    };
};

window.buildDepositMethodElements = function () {
    //------------------------------------------------------------------------
    //          Deposit Methods Grid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'depmethGrid',
        url: '/v1/depmeth',
        multiSelect: false,
        show: {
            toolbar        : true,
            footer         : true,
            toolbarAdd     : true,   // indicates if toolbar add new button is visible
            toolbarDelete  : false,   // indicates if toolbar delete button is visible
            toolbarSave    : false,   // indicates if toolbar save button is visible
            selectColumn   : false,
            expandColumn   : false,
            toolbarEdit    : false,
            toolbarSearch  : false,
            toolbarInput   : false,
            searchAll      : false,
            toolbarReload  : false,
            toolbarColumns : false,
        },
        columns: [
            {field: 'recid',      hidden: true,  caption: 'recid',       size: '40px',  sortable: true},
            {field: 'DPMID',      hidden: true,  caption: 'DEPID',       size: '150px', sortable: true},
            {field: 'BID',        hidden: true,  caption: 'BID',         size: '150px', sortable: true},
            {field: 'Name',       hidden: false, caption: 'Name',        size: '20%',   sortable: true},
            {field: 'LastModTime',hidden: true,  caption: 'LastModTime', size: '20%',   sortable: true},
            {field: 'LastModBy',  hidden: true,  caption: 'LastModBy',   size: '150px', sortable: true},
            {field: 'CreateTS',   hidden: true,  caption: 'CreateTS',    size: '20%',   sortable: true},
            {field: 'CreateBy',   hidden: true,  caption: 'CreateBy',    size: '150px', sortable: true},
        ],
        onRefresh: function(event) {
            event.onComplete = function() {
                var sel_recid = parseInt(this.last.sel_recid);
                if (app.active_grid == this.name && sel_recid > -1) {
                    if (app.new_form_rec) {
                        this.selectNone();
                    }
                    else{
                        this.select(app.last.grid_sel_recid);
                    }
                }
            };
        },
	    onClick: function(event) {
	        event.onComplete = function() {
	            var yes_args = [this, event.recid],
	                no_args = [this],
	                no_callBack = function(grid) {
	                    // we need to get selected previous one selected record, in case of no answer
	                    // in form dirty confirmation dialog
	                    grid.select(app.last.grid_sel_recid);
	                    return false;
	                },
	                yes_callBack = function(grid, recid) {
	                    app.last.grid_sel_recid = parseInt(recid);

	                    // keep highlighting current row in any case
	                    grid.select(app.last.grid_sel_recid);

	                    // get record
	                    var rec = grid.get(recid);

	                    // popup the dialog form
	                    setToForm('depmethForm', '/v1/depmeth/' + rec.BID + '/' + rec.DPMID, 400, true);
	                };

	            // form alert is content has been changed
	            form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
	        };
	    },
        onAdd: function (/*event*/) {
            var yes_args = [this],
                no_callBack = function() { return false; },
                yes_callBack = function(grid) {
                    // reset it
                    app.last.grid_sel_recid = -1;
                    grid.selectNone();

                    // Insert an empty record...
                    var x = getCurrentBusiness();
                    var BID=parseInt(x.value);
                    var BUD = getBUDfromBID(BID);
	                var record = getDepMethInitRecord(BID, BUD);
                    w2ui.depmethForm.record = record;
                    setToForm('depmethForm', '/v1/depmeth/' + BID + '/0', 400);

                };  // yes callback

            // warn user if form content has been changed
            form_dirty_alert(yes_callBack, no_callBack, yes_args);
        },
    });

    //------------------------------------------------------------------------
    //          Deposit Methods Form
    //------------------------------------------------------------------------
    $().w2form({
        name: 'depmethForm',
        header: 'Deposit Method Detail',
        url: '/v1/depmeth',
        style: 'border: 0px; background-color: transparent;display: block;',
        formURL: '/webclient/html/formdepmeth.html',
        fields: [
            { field: 'recid', type: 'int', required: false, html: { caption: 'recid', page: 0, column: 0 } },
            { field: 'BID', type: 'int', required: false, html: { caption: 'BID', page: 0, column: 0 }, hidden: true },
            { field: 'BUD', type: 'list', options: { items: app.businesses }, required: true, html: { caption: 'BUD', page: 0, column: 0 } },
            { field: 'DPMID', type: 'int', required: false, html: { caption: 'DPMID', page: 0, column: 0 }, hidden: true },
            { field: 'Name', type: 'text', required: true, html: { caption: 'Name', page: 0, column: 0 }, sortable: true },
            { field: 'LastModTime', type: 'time', required: false, html: { caption: 'LastModTime', page: 0, column: 0 } },
            { field: 'LastModBy', type: 'int', required: false, html: { caption: 'LastModBy', page: 0, column: 0 } },
        ],
        toolbar: {
            items: [
                { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
                { id: 'bt3', type: 'spacer' },
                { id: 'btnClose', type: 'button', icon: 'fas fa-times' },
            ],
            onClick: function(event) {
                switch(event.target) {
                    case 'btnClose':
                        var no_callBack = function() { return false; },
                            yes_callBack = function() {
                                w2ui.toplayout.hide('right',true);
                                w2ui.depmethGrid.render();
                            };
                        form_dirty_alert(yes_callBack, no_callBack);
                        break;
                }
            }
        },
        onError: function(event) {
            console.log(event);
        },
        actions: {
            saveadd: function() {
                var f = this,
                    grid = w2ui.depmethGrid,
                    x = getCurrentBusiness(),
                    BID=parseInt(x.value),
                    BUD=getBUDfromBID(BID);

                // clean dirty flag of form
                app.form_is_dirty = false;
                // clear the grid select recid
                app.last.grid_sel_recid  =-1;

                // select none if you're going to add new record
                grid.selectNone();

                f.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }

                    // JUST RENDER THE GRID ONLY
                    grid.render();

                    // add new empty record and just refresh the form, don't need to do CLEAR form
                    var y = new Date();
                    var record = getDepMethInitRecord(BID, BUD);
                    f.record = record;
                    f.header = "Edit Deposit Method (new)"; // have to provide header here, otherwise have to call refresh method twice to get this change in form
                    f.url = '/v1/depmeth/' + BID+'/0';
                    f.refresh();
                });
            },
            save: function(/*target, data*/) {
                var f = this,
                    tgrid = w2ui.depmethGrid;

                f.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }
                    w2ui.toplayout.hide('right',true);
                    tgrid.render();
                });
            },
            delete: function() {

                var form = this,
                    x = getCurrentBusiness(),
                    BID=parseInt(x.value),
                    BUD = getBUDfromBID(BID);

                w2confirm(delete_confirm_options)
                .yes(function() {
                    var tgrid = w2ui.depmethGrid;
                    var params = {cmd: 'delete', formname: form.name, ID: form.record.DPMID };
                    var dat = JSON.stringify(params);

                    // delete Depository request
                    $.post(form.url, dat, null, "json")
                    .done(function(data) {
                        if (data.status === "error") {
                            form.error(w2utils.lang(data.message));
                            return;
                        }

                        // remove this from app.depmeth[BUD] if successfully removed
                        var temp_list = [];
                        app.depmeth[BUD].forEach(function(item){
                            if (item.DPMID != form.record.DPMID) {
                                temp_list.push({DPMID: item.DPMID, Name: item.Name});
                            }
                        });
                        app.depmeth[BUD] = temp_list;

                        w2ui.toplayout.hide('right',true);
                        tgrid.remove(app.last.grid_sel_recid);
                        tgrid.render();
                    })
                    .fail(function(/*data*/){
                        form.error("Delete Payment failed.");
                        return;
                    });
                })
                .no(function() {
                    return;
                });
            },
        },
        onRefresh: function(event) {
            event.onComplete = function() {
                var f = this,
                    header = "Edit Deposit Method ({0})";

                formRefreshCallBack(f, "DPMID", header);
            };
        },
        onChange: function(event) {
            event.onComplete = function() {
                // formRecDiffer: 1=current record, 2=original record, 3=diff object
                var diff = formRecDiffer(this.record, app.active_form_original, {});
                // if diff == {} then make dirty flag as false, else true
                if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                    app.form_is_dirty = false;
                } else {
                    app.form_is_dirty = true;
                }
            };
        },
        onSubmit: function(target, data) {
            delete data.postData.record.LastModTime;
            delete data.postData.record.LastModBy;
            delete data.postData.record.CreateTS;
            delete data.postData.record.CreateBy;
            // modify form data for server request
            getFormSubmitData(data.postData.record);
        },
    });
};

/*global
    parseInt, w2ui, getDepMeth, getDepository, $, app, getBUDfromBID, getCurrentBusiness, console,
    form_dirty_alert, getFormSubmitData, formRecDiffer, formRefreshCallBack, addDateNavToToolbar,
    getGridReversalSymbolHTML, dateControlString, w2utils, saveDepositForm, w2confirm,
    delete_confirm_options, getBusinessDepMethods, getBusinessDepositories, setToDepositForm, getDepositInitRecord,
    calcTotalCheckedReceipts, saveDepositFormAndAnother, getCheckedReceipts
*/

"use strict";

window.getDepositInitRecord = function (BID, BUD, previousFormRecord){
    var y = new Date();
    var defaultFormData = {
        recid:          0,
        check:          0,
        DID:            0,
        BID:            BID,
        BUD:            BUD,
        DEPID:          0,
        DEPName:        "",
        DPMID:          0,
        DPMName:        "",
        Dt:             dateControlString(y),
        FLAGS:          0,
        Amount:         0.0,
        ClearedAmount:  0.0,
        LastModTime:    y.toISOString(),
        LastModBy:      0,
        CreateTS:       y.toISOString(),
        CreateBy:       0,
    };

    // if it called after 'save and add another' action there previous form record is passed as Object
    // else it is null
    if ( previousFormRecord ) {
        defaultFormData = setDefaultFormFieldAsPreviousRecord(
            [ 'FLAGS', 'Amount', 'ClearedAmount', 'LastModTime', 'Comment'], // Fields to Reset
            defaultFormData,
            previousFormRecord
        );
    }

    return defaultFormData;
};

//-----------------------------------------------------------------------------
// getBusinessDepMethods - return the promise object of request to get latest
//                         deposit methods for given BID
//                         It updates the "app.depmeth" variable for requested BUD
// @params  - BID : Business ID (expected current one)
//          - BUD : Business Unit Designation
// @return  - promise object from $.get
//-----------------------------------------------------------------------------
window.getBusinessDepMethods = function (BID, BUD) {
    // if not BUD in app.depmeth then initialize it with blank list
    if (!(BUD in app.depmeth)) {
        app.depmeth[BUD] = [];
    }

    // return promise
    return $.get("/v1/uival/" + BID + "/app.DepMethods", null, null, "json").done(function(data) {
            // if it doesn't meet this condition, then save the data
            if (!('status' in data && data.status !== "success")) {
                app.depmeth[BUD] = data[BUD];
            }
        });
};

//-----------------------------------------------------------------------------
// getBusinessDepositories - return the promise object of request to get latest
//                           depositories for given BID
//                           It updates the "app.Depositories" variable for requested BUD
// @params  - BID : Business ID (expected current one)
//          - BUD : Business Unit Designation
// @return  - promise object from $.get
//-----------------------------------------------------------------------------
window.getBusinessDepositories = function (BID, BUD) {
    // if not BUD in app.Depositories then initialize it with blank list
    if (!(BUD in app.Depositories)) {
        app.Depositories[BUD] = [];
    }

    // return promise
    return $.get("/v1/uival/" + BID + "/app.Depositories", null, null, "json").done(function(data) {
            // if it doesn't meet this condition, then save the data
            if (!('status' in data && data.status !== "success")) {
                app.Depositories[BUD] = data[BUD];
            }
        });
};


//---------------------------------------------------------------------------------
// buildDepositElements - changes the main view of the program to a grid with
//                variable name svc + 'Grid'
//
//---------------------------------------------------------------------------------
window.buildDepositElements = function () {
    //------------------------------------------------------------------------
    //          deposit Grid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'depositGrid',
        url: '/v1/deposit',
        multiSelect: false,
        show: {
            toolbar        : true,
            footer         : true,
            toolbarAdd     : true,   // indicates if toolbar add new button is visible
            toolbarDelete  : false,   // indicates if toolbar delete button is visible
            toolbarSave    : false,   // indicates if toolbar save button is visible
            selectColumn   : false,
            expandColumn   : false,
            toolbarEdit    : false,
            toolbarSearch  : false,
            toolbarInput   : false,
            searchAll      : false,
            toolbarReload  : true,
            toolbarColumns : true,
        },
        columns: [
            {field: 'recid',        hidden: true,  caption: 'recid',        size: '40px',  sortable: true},
            {field: 'DID',          hidden: false, caption: 'DID',          size: '50px',  sortable: true, style: 'text-align: center'},
            {field: 'BID',          hidden: false, caption: 'BID',          size: '50px',  sortable: true, style: 'text-align: center'},
            {field: 'BUD',          hidden: false, caption: 'BUD',          size: '50px',  sortable: true, style: 'text-align: center'},
            {field: 'DEPID',        hidden: true,  caption: 'DEPID',        size: '50px',  sortable: true, style: 'text-align: center'},
            {field: 'DEPName',      hidden: false, caption: 'Depository',   size: '80px',  sortable: true, style: 'text-align: center'},
            {field: 'DPMID',        hidden: true,  caption: 'DPMID',        size: '50px',  sortable: true, style: 'text-align: center'},
            {field: 'DPMName',      hidden: false, caption: 'Method',       size: '150px', sortable: true, style: 'text-align: center'},
            {field: 'Dt',           hidden: false, caption: 'Date',         size: '100px', sortable: true, style: 'text-align: center'},
            {field: 'Amount',       hidden: false, caption: 'Amount',       size: '100px', sortable: true, style: 'text-align: right', render: 'money'},
            {field: 'ClearedAmount',hidden: false, caption: 'ClearedAmount',size: '100px', sortable: true, style: 'text-align: right', render: 'money'},
        ],
        onRefresh: function(event) {
            event.onComplete = function() {
                var sel_recid = parseInt(this.last.sel_recid);
                if (app.active_grid == this.name && sel_recid > -1) {
                    if (app.new_form_rec) {
                        this.selectNone();
                    }
                    else{
                        this.select(app.last.grid_sel_recid);
                    }
                }
            };
        },
        onClick: function(event) {
            event.onComplete = function () {
                var yes_args = [this, event.recid];
                var no_args = [this];
                var no_callBack = function(grid) {
                        grid.select(app.last.grid_sel_recid);
                        return false;
                    };
                var yes_callBack = function(grid, recid) {
                        var f = w2ui.depositForm;

                        var BID = getCurrentBID(),
                            BUD = getBUDfromBID(BID);

                        // get the latest deposit methods
                        $.when(
                            getBusinessDepMethods(BID, BUD),
                            getBusinessDepositories(BID, BUD)
                        ).done( function(dpmResp, depResp) {

                            // deposit methods
                            if ('status' in dpmResp[0] && depResp[0].status !== 'success') {
                                f.message(dpmResp[0].message);
                            } else {
                                f.get('DPMName').options.items = app.depmeth[BUD];
                            }

                            // depositories
                            if ('status' in depResp[0] && depResp[0].status !== 'success') {
                                f.message(depResp[0].message);
                            } else{
                                f.get('DEPName').options.items = app.Depositories[BUD];
                            }

                            app.last.grid_sel_recid = parseInt(recid);
                            grid.select(app.last.grid_sel_recid); // keep highlighting current row in any case
                            f.refresh();
                            var rec = grid.get(recid);
                            var myurl = '/v1/deposit/' + BID + '/' + rec.DID;
                            var urlgrid = '/v1/depositlist/' + BID + '/' + rec.DID;
                            setToDepositForm("depositLayout","depositForm", myurl, urlgrid, 700, true);
                        }).fail(function() {
                            console.log('Error getting /v1/uival/' + BID + '/{app.DepMethods | app.Depositories}');
                        });
                    };

                form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args); // warn user if form content has been changed
            };
        },
        onAdd: function (/*event*/) {
            var yes_args = [this];
            var no_callBack = function() { return false; };
            var yes_callBack = function(grid) {

                // reset it
                app.last.grid_sel_recid = -1;
                grid.selectNone();

                // Insert an empty record...
                var BID = getCurrentBID(),
                    BUD = getBUDfromBID(BID),
                    f = w2ui.depositForm;

                // get init record and feed it to the form
                var record = getDepositInitRecord(BID, BUD, null);
                f.record = record;

                // get the latest deposit methods
                $.when(
                    getBusinessDepMethods(BID, BUD),
                    getBusinessDepositories(BID, BUD)
                ).done( function(dpmResp, depResp) {

                    // deposit methods
                    if ('status' in dpmResp[0] && depResp[0].status !== 'success') {
                        f.message(dpmResp[0].message);
                    } else {
                        f.get('DPMName').options.items = app.depmeth[BUD];
                    }

                    // depositories
                    if ('status' in depResp[0] && depResp[0].status !== 'success') {
                        f.message(depResp[0].message);
                    } else{
                        f.get('DEPName').options.items = app.Depositories[BUD];
                    }

                    f.refresh();
                    var myurl = '/v1/deposit/' + BID + '/0';
                    var urlgrid = '/v1/depositlist/' + BID + '/0';
                    setToDepositForm("depositLayout","depositForm", myurl, urlgrid, 700);
                }).fail(function() {
                    console.log('Error getting /v1/uival/' + BID + '/{app.DepMethods | app.Depositories}');
                });
            };

            // warn user if form content has been changed
            form_dirty_alert(yes_callBack, no_callBack, yes_args);
        },
   });

    addDateNavToToolbar('deposit');


    //------------------------------------------------------------------------
    //          deposit Form
    //------------------------------------------------------------------------
    $().w2form({
        name: 'depositForm',
        style: 'border: 0px; background-color: transparent;',
        header: 'Deposit Detail',
        url: '/v1/deposit',
        formURL: '/webclient/html/formdeposit.html',

        fields: [
            { field: 'recid',         type: 'int',   required: false, html: { page: 0, column: 0 } },
            { field: 'DID',           type: 'int',   required: false, html: { page: 0, column: 0 } },
            { field: 'BID',           type: 'int',   required: false, html: { page: 0, column: 0 } },
            { field: 'DEPID',         type: 'int',   required: false, html: { page: 0, column: 0 } },
            { field: 'DPMID',         type: 'int',   required: true, html: { page: 0, column: 0 } },
            { field: 'FLAGS',         type: 'int',   required: false, html: { page: 0, column: 0 } },
            { field: 'BUD',           type: 'list',  required: true, options: {items: app.businesses}, html: { page: 0, column: 0 } },
            { field: 'Dt',            type: 'date',  required: true },
            { field: 'DEPName',       type: 'list',  required: true, options:  {items: [], selected: {}} },
            { field: 'DPMName',       type: 'list',  required: true, options:  {items: [], selected: {}} },
            { field: 'Amount',        type: 'money', required: true,  html: { page: 0, column: 0 } },
            { field: 'ClearedAmount', type: 'money', required: false, html: { page: 0, column: 0 } },
            { field: 'LastModTime',   type: 'time',  required: false, html: { page: 0, column: 0 } },
            { field: 'LastModBy',     type: 'int',   required: false, html: { page: 0, column: 0 } },
            { field: 'CreateTS',      type: 'time',  required: false, html: { page: 0, column: 0 } },
            { field: 'CreateBy',      type: 'int',   required: false, html: { page: 0, column: 0 } },
        ],
        toolbar: {
            items: [
                { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
                //{ id: 'formSave', type: 'button', caption: 'Save', icon: 'fas fa-check'},
                { id: 'bt3', type: 'spacer' },
                { id: 'btnClose', type: 'button', icon: 'fas fa-times' },
            ],
            onClick: function (event) {
                switch(event.target) {
                case 'btnClose':
                    var no_callBack = function() { return false; },
                        yes_callBack = function() {
                            w2ui.toplayout.hide('right',true);
                            w2ui.depositGrid.render();
                        };
                    form_dirty_alert(yes_callBack, no_callBack);
                    break;
                case 'formSave':
                    saveDepositForm();
                }
            },
        },
        onRefresh: function(event) {
            event.onComplete = function() {
                var f = this;
                var r = f.record;
                var x = getCurrentBusiness(),
                    BID=parseInt(x.value),
                    BUD = getBUDfromBID(BID);

                var header = "Edit Deposit ({0})";
                var dpmid = r.DPMID;
                var depid = r.DEPID;

                f.get("DPMName").options.selected = getDepMeth(BUD, dpmid);
                f.get("DEPName").options.selected = getDepository(BUD, depid);

                formRefreshCallBack(f, "DID", header);
            };
        },
        onChange: function(event) {
            event.onComplete = function() {
                // formRecDiffer: 1=current record, 2=original record, 3=diff object
                var diff = formRecDiffer(this.record, app.active_form_original, {});
                // if diff == {} then make dirty flag as false, else true
                if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                    app.form_is_dirty = false;
                } else {
                    app.form_is_dirty = true;
                }
            };
        },
        onSubmit: function(target, data) {
            delete data.postData.record.LastModTime;
            delete data.postData.record.LastModBy;
            delete data.postData.record.CreateTS;
            delete data.postData.record.CreateBy;
            // modify form data for server request
            getFormSubmitData(data.postData.record);
        },
    });

    //------------------------------------------------------------------------
    //  depositListGrid - For new deposits, it lists all that are not
    //                    currently part of a deposit. Any combination can be
    //                    selected to be part of the new deposit.
    //
    //                    For existing deposits, it lists the receipts that
    //                    belong to the deposit.
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'depositListGrid',
        url: '/v1/depositlist',
        postData: {
            SearchDtStart: app.D1,
            SearchDtStop: app.D2,
        },
        multiSelect: false,
        show: {
            toolbar        : true,
            footer         : true,
            toolbarAdd     : false,   // indicates if toolbar add new button is visible
            toolbarDelete  : false,   // indicates if toolbar delete button is visible
            toolbarSave    : false,   // indicates if toolbar save button is visible
            selectColumn   : false,
            expandColumn   : false,
            toolbarEdit    : false,
            toolbarSearch  : false,
            toolbarInput   : false,
            searchAll      : false,
            toolbarReload  : false,
            toolbarColumns : false,
        },
        columns: [
            {field: 'recid',    caption: 'recid',        hidden: true,  size: '40px',  sortable: true  },
            {field: 'Check',    caption: '',             hidden: false, size: '40px',  editable: { type: 'checkbox' } },
            {field: 'reversed', size: '10px', style: 'text-align: center', sortable: true,
                    render: function (record /*, index, col_index*/) {
                        if (typeof record === "undefined") {
                            return;
                        }
                        if ( (record.FLAGS & app.rcptFLAGS.REVERSED) !== 0 ) { // if reversed then
                            return getGridReversalSymbolHTML();
                        }
                        return '';
                    },
            },
            {field: 'RCPTID',   caption: 'Receipt ID',   hidden: false, size: '80px',  sortable: true, style: 'text-align: right'},
            {field: 'Dt',       caption: 'Date',         hidden: false, size: '80px',  sortable: true, style: 'text-align: right'},
            {field: 'ARID',     caption: 'ARID',         hidden: true,  size: '150px', sortable: false },
            {field: 'AcctRule', caption: 'Account Rule', hidden: true,  size: '150px', sortable: true  },
            {field: 'Amount',   caption: 'Amount',       hidden: false, size: '100px', sortable: true, style: 'text-align: right', render: 'money'},
            {field: 'BID',      caption: 'BUD',          hidden: true,  size: '40px',  sortable: false },
            {field: 'TCID',     caption: 'TCID',         hidden: true,  size: '40px',  sortable: false },
            {field: 'PMTID',    caption: 'PMTID',        hidden: true,                 sortable: false },
            {field: 'PMTName',  caption: 'Payment Type', hidden: false, size: '100px', sortable: true, style: 'text-align: center' },
            {field: 'DocNo',    caption: 'Document No.', hidden: false, size: '100px', sortable: true, style: 'text-align: right'},
            {field: 'Payors',   caption: 'Payors',       hidden: false, size: '200px', sortable: true  },
            {field: 'FLAGS',    caption: 'FLAGS',        hidden: true,  size: '20px',  sortable: false  },
        ],
        onLoad: function(event) {
            event.done(function () {
                if (w2ui.depositListGrid.summary.length === 0) {
                    var x = getCurrentBusiness(),
                    BID=parseInt(x.value),
                    BUD = getBUDfromBID(BID);
                    var rec = {recid: 's-1', DID: 0, BID: BID, BUD: BUD, DEPID: 0, DEPName: "", DPMID: 0, DPMName: "", Dt: null, FLAGS: 0, Amount: 0.0, ClearedAmount: 0.0, LastModTime: null, LastModBy: 0, CreateTS: null, CreateBy: 0, w2ui:{summary: true}, };
                    w2ui.depositListGrid.add(rec);
                }
                calcTotalCheckedReceipts();
            });
        },
        onClick: function(event) {
            event.done(function () {
                if (event.column == 1) {
                    calcTotalCheckedReceipts();
                }
            });
        },
    });

    addDateNavToToolbar('depositList');


    //------------------------------------------------------------------------
    //  depositFormButtons - Save, Save And Add, Delete buttons
    //------------------------------------------------------------------------
    $().w2form({
        name: 'depositFormBtns',
        style: 'border: 0px; background-color: transparent;',
        url: '/v1/deposit',
        formURL: '/webclient/html/formdepositbtns.html',
        fields: [],
        actions: {
            save: saveDepositForm,
            saveadd: saveDepositFormAndAnother,
            delete: function() {
                var form = this;
                w2confirm(delete_confirm_options)
                .yes(function() {
                    // var tgrid = w2ui.depositForm;
                    var params = {cmd: 'delete', formname: form.name, DID: w2ui.depositForm.record.DID };
                    var dat = JSON.stringify(params);
                    form.url = '/v1/deposit/' + w2ui.depositForm.record.BID + '/' + w2ui.depositForm.record.DID;

                    $.post(form.url, dat, null, "json")
                    .done(function(data) {
                        if (data.status === "error") {
                            form.error(w2utils.lang(data.message));
                            return;
                        }
                        w2ui.toplayout.hide('right',true);
                        w2ui.depositGrid.remove(app.last.grid_sel_recid);
                        w2ui.depositGrid.render();
                    })
                    .fail(function(/*data*/){
                        form.error("Delete Account failed.");
                        return;
                    });
                })
                .no(function() {
                    return;
                });
            },
        },
    });

    //-------------------------------------------------------------------------------
    //  depositLayout - The layout to contain the depositForm and depositDetailGrid
    //-------------------------------------------------------------------------------
    $().w2layout({
        name: 'depositLayout',
        padding: 0,
        panels: [
            { type: 'top',     size: 290,   hidden: false, content: 'top',   resizable: true,  style: app.pstyle },
            { type: 'main',    size: '70%', hidden: false, content: 'main',  resizable: true,  style: app.pstyle },
            { type: 'bottom',  size: 50,    hidden: false, content: 'bottom',resizable: false, style: app.pstyle },
            { type: 'left',    size: '30%', hidden: true },
            { type: 'preview', size: 0,     hidden: true,  content: 'PREVIEW'  },
            { type: 'right',   size: 0,     hidden: true }
        ]
    });
};


//-----------------------------------------------------------------------------
// saveDepositForm - pull the checked Receipts, extend the return values
//      and save the form.
// @params
//-----------------------------------------------------------------------------
window.saveDepositForm = function () {
    var rcpts = getCheckedReceipts();
    var f = w2ui.depositForm;
    f.record.DPMID = f.record.DPMName.id;
    f.record.DEPID = f.record.DEPName.id;
    if (typeof f.record.DID == "string" || typeof f.record.DID == "undefined") {
        f.record.DID = 0;
    }
    if (typeof f.record.FLAGS == "string" || typeof f.record.FLAGS == "undefined") {
        f.record.FLAGS = 0;
    }
    if (typeof f.record.ClearedAmount == "string" || typeof f.record.ClearedAmount == "undefined") {
        f.record.ClearedAmount = 0.0;
    }
    f.save({Receipts: rcpts},function (data) {
        if (data.status == 'error') {
            console.log('ERROR: '+ data.message);
            return;
        }
        w2ui.toplayout.hide('right',true);
        app.form_is_dirty = false;// clean dirty flag of form
        app.last.grid_sel_recid  =-1;// clear the grid select recid
        w2ui.depositGrid.render();
    });
};

//-----------------------------------------------------------------------------
// saveDepositFormAndAnother - pull the checked Receipts, extend the return values
//      and save the form and add another initial object to depositForm.
// @params
//-----------------------------------------------------------------------------
window.saveDepositFormAndAnother = function () {
    var rcpts = getCheckedReceipts();
    var f = w2ui.depositForm,
        grid = w2ui.receiptsGrid,
        x = getCurrentBusiness(),
        BID=parseInt(x.value),
        BUD = getBUDfromBID(BID);

    f.record.DPMID = f.record.DPMName.id;
    f.record.DEPID = f.record.DEPName.id;
    if (typeof f.record.DID == "string" || typeof f.record.DID == "undefined") {
        f.record.DID = 0;
    }
    if (typeof f.record.FLAGS == "string" || typeof f.record.FLAGS == "undefined") {
        f.record.FLAGS = 0;
    }
    if (typeof f.record.ClearedAmount == "string" || typeof f.record.ClearedAmount == "undefined") {
        f.record.ClearedAmount = 0.0;
    }
    f.save({Receipts: rcpts},function (data) {
        if (data.status == 'error') {
            console.log('ERROR: '+ data.message);
            return;
        }
        app.form_is_dirty = false;// clean dirty flag of form
        app.last.grid_sel_recid  =-1;// clear the grid select recid
        w2ui.depositGrid.render();

        // add new initial record
        f.record = getDepositInitRecord(BID, BUD, f.record);
        f.header = "Edit Deposit (new)";
        f.url = "/v1/deposit/"+BID+"/0";
        f.refresh();

        /*
        NO NEED TO CLEAR THIS, I THINK!
        // as well as clear the records from the grid
        w2ui.depositListGrid.clear();
        */
    });
};

//-----------------------------------------------------------------------------
// calcTotalCheckedReceipts - go through all the depositListGrid items and
//      total all the checked receipts. Update the Amount column of the
//      summary row with the total.
// @params
//-----------------------------------------------------------------------------
window.calcTotalCheckedReceipts = function () {
    var t = 0.0;
    var grid = w2ui.depositListGrid;
    var checkcol=0;
    var amtcol=0;
    var flgcol=0;
    for (i = 0; i < grid.columns.length; i++) {
        if (grid.columns[i].field === "Check") {checkcol = i;}
        if (grid.columns[i].field === "Amount") {amtcol = i;}
        if (grid.columns[i].field === "FLAGS") {flgcol = i;}
    }

    for (var i = 0; i < grid.records.length; i++) {
        var x = grid.getCellValue(i,checkcol); // this is what is in the checkbox column
        if (typeof x == "boolean" ) {
            var y = grid.getCellValue(i,flgcol) & 0x4;
            if (x && y === 0) {
                t += grid.getCellValue(i,amtcol);
            }
        }
    }
    if (grid.records.length > 0) {
        grid.set('s-1', { Amount: t });
    }
};

//-----------------------------------------------------------------------------
// getCheckedReceipts - go through depositListGrid items and build a list
//      of the RCPTIDs of the select receipts
// @params
//
// @returns
//      a list of selected receipts
//-----------------------------------------------------------------------------
window.getCheckedReceipts = function () {
    var t = [];
    var grid = w2ui.depositListGrid;
    var i=0;
    var checkcol=0;
    var rcptidcol=0;
    //var flagscol=0;
    for (i = 0; i < grid.columns.length; i++) {
        if (grid.columns[i].field === "Check") {checkcol = i;}
        if (grid.columns[i].field === "RCPTID") {rcptidcol = i;}
        //if (grid.columns[i].field === "FLAGS") {flagscol = i;}
    }

    for (i = 0; i < grid.records.length; i++) {
        var x = grid.getCellValue(i,checkcol); // this is what is in the checkbox column
        if (typeof x == "boolean" ) {
            if (x) {
                t.push( grid.getCellValue(i,rcptidcol));
            }
        }
    }
    return t;
};

//-----------------------------------------------------------------------------
// createDepositForm - add the grid and form to the statement layout.  I'm not
//      sure why this is necessary. But if I put this grid and form directly
//      into the layout when it gets created, they do not work correctly.
// @params
//-----------------------------------------------------------------------------
window.createDepositForm = function () {
    w2ui.depositLayout.content('top',   w2ui.depositForm);
    w2ui.depositLayout.content('main',  w2ui.depositListGrid);
    w2ui.depositLayout.content('bottom',w2ui.depositFormBtns);
};

//-----------------------------------------------------------------------------
// setToDepositForm - set to the Deposit Form - puts the depositLayout in
//                    toplayout's right content area. Didn't use the general
//                    call in rutil.js because this form requires the layout
//                    and has multiple parts.
// @params
//   sform   = name of the form
//   url     = request URL for the form
//   [width] = optional, if specified it is the width of the form
//   doRequest =
//-----------------------------------------------------------------------------
window.setToDepositForm = function (slayout, sform, url, urlgrid, width, doRequest) {
    // if not url defined then return
    var url_len=url.length > 0;
    if (!url_len) {
        return false;
    }

    // if form not found then return
    var f = w2ui[sform];
    if (!f) {
        return false;
    }

    // if current grid not found then return
    var g = w2ui[app.active_grid];
    if (!g) {
        return false;
    }

    // if doRequest is defined then take false as default one
    if (!doRequest) {
        doRequest = false;
    }
    f.url = url;
    if (typeof f.tabs.name == "string") {
        f.tabs.click('tab1');
    }
    app.new_form_rec = !doRequest;
    app.form_is_dirty = false;

    var right_panel_content = w2ui.toplayout.get("right").content;
    var fc = w2ui[slayout]; // in this case, we're putting the layout into the content area
    w2ui.depositListGrid.url = urlgrid;
    var showForm = function() {
        // if the same content is there, then no need to render toplayout again
        if ( fc !== right_panel_content) {
            w2ui.toplayout.content('right', fc);
            w2ui.toplayout.sizeTo('right', width);
            w2ui.toplayout.render();
        } else {
            fc.refresh();
        }
        $().w2tag();
        w2ui.toplayout.show('right', true);
    };

    if (doRequest) {
        f.request(function(event) {
            if (event.status === "success") {
                showForm();
                return true;
            }
            else {
                showForm();
                f.message("Could not get form data from server...!!");
                return false;
            }
        });
    } else {
        var sel_recid = parseInt(g.last.sel_recid);
        if (sel_recid > -1) {
            g.unselect(g.last.sel_recid); // if new record is being added then unselect {{the selected record}} from the grid
        }
        showForm();
        return true;
    }
};

/*global
    getDepoInitRecord
*/
"use strict";
window.getDepoInitRecord = function (BID, BUD){
    return {
        recid: 0,
        DEPID: 0,
        BID: BID,
        BUD: BUD,
        LID: 0,
        Name: "",
        AccountNo: "",
    };
};

window.buildDepositoryElements = function() {

    //------------------------------------------------------------------------
    //          depository Grid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'depGrid',
        url: '/v1/dep',
        multiSelect: false,
        show: {
            toolbar        : true,
            footer         : true,
            toolbarAdd     : true,   // indicates if toolbar add new button is visible
            toolbarDelete  : false,   // indicates if toolbar delete button is visible
            toolbarSave    : false,   // indicates if toolbar save button is visible
            selectColumn   : false,
            expandColumn   : false,
            toolbarEdit    : false,
            toolbarSearch  : false,
            toolbarInput   : false,
            searchAll      : false,
            toolbarReload  : false,
            toolbarColumns : false,
        },
        columns: [
            {field: 'recid', hidden: true, caption: 'recid', size: '40px', sortable: true},
            {field: 'DEPID', hidden: true, caption: 'DEPID', size: '150px', sortable: true, style: 'text-align: center'},
            {field: 'BID', hidden: true, caption: 'BID', size: '150px', sortable: true, style: 'text-align: center'},
            {field: 'BUD', hidden: true, caption: 'BUD', size: '150px', sortable: true, style: 'text-align: center'},
            {field: 'LID', hidden: true, caption: 'LID', size: '150px', sortable: true, style: 'text-align: center'},
            {field: 'AccountNo', hidden: false, caption: 'Account Number', size: '150px', sortable: true, style: 'text-align: right'},
            {field: 'Name', hidden: false, caption: 'Name', size: '20%', sortable: true, style: 'text-align: left'},
            {field: 'LdgrName', hidden: false, caption: 'GL Acct Name', size: '20%', sortable: true, style: 'text-align: left'},
            {field: 'GLNumber', hidden: false, caption: 'GL Number', size: '150px', sortable: true, style: 'text-align: right'},
        ],
        onRefresh: function(event) {
            event.onComplete = function() {
                var sel_recid = parseInt(this.last.sel_recid);
                if (app.active_grid == this.name && sel_recid > -1) {
                    if (app.new_form_rec) {
                        this.selectNone();
                    }
                    else{
                        this.select(app.last.grid_sel_recid);
                    }
                }
            };
        },
        onClick: function(event) {
            event.onComplete = function () {
                var yes_args = [this, event.recid],
                    no_args = [this],
                    no_callBack = function(grid) {
                        grid.select(app.last.grid_sel_recid);
                        return false;
                    },
                    yes_callBack = function(grid, recid) {
                        app.last.grid_sel_recid = parseInt(recid);

                        // keep highlighting current row in any case
                        grid.select(app.last.grid_sel_recid);

                        // get selected element as multiSelect is false
                        var rec = grid.get(recid),
                            x = getCurrentBusiness(),
                            BID=parseInt(x.value),
                            BUD = getBUDfromBID(BID);

                        // get gl account list
                        getAccountsList(rec.BID)
                        .done(function(data){
                            if (data.status != 'success') {
                                w2ui.depositoryForm.message(data.message);
                            } else {
                                var gl_selected = {id: rec.LID, text: rec.GLNumber+" "+"(" + rec.LdgrName + ")"};
                                // get gl accounts for BUD
                                w2ui.depositoryForm.get('LID').options.items = app.gl_accounts[BUD];
                                w2ui.depositoryForm.get('LID').options.selected = gl_selected;
                            }
                            setToForm('depositoryForm', '/v1/dep/' + rec.BID + '/' + rec.DEPID, 400, true);
                        })
                        .fail(function(/*data*/){
                            console.log("Failed to get glAccountList");
                        });
                    };

                // warn user if form content has been changed
                form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
            };
        },
        onAdd: function (/*event*/) {
            var yes_args = [this],
                no_callBack = function() { return false; },
                yes_callBack = function(grid) {
                    // reset it
                    app.last.grid_sel_recid = -1;
                    grid.selectNone();

                    // Insert an empty record...
                    var x = getCurrentBusiness(),
                        BID=parseInt(x.value),
                        BUD = getBUDfromBID(BID),
                        f = w2ui.depositoryForm;

                    // get latest gl accounts first
                    getAccountsList(BID)
                    .done(function(data) {

                        if (data.status != 'success') {
                            f.message(data.message);
                            w2ui.toplayout.content('right', f);
                            w2ui.toplayout.show('right', true);
                            w2ui.toplayout.sizeTo('right', 700);
                            return;
                        } else {
                            var record = getDepoInitRecord(BID, BUD);

                            var gl_accounts_pre_selected = {id: 0, text: " -- Select GL Account -- "};
                            var gl_accounts_items = [gl_accounts_pre_selected];
                            // get gl account list for BUD from `gl_accounts` key of `app`
                            gl_accounts_items = gl_accounts_items.concat(app.gl_accounts[BUD]);

                            f.get('LID').options.items = gl_accounts_items;
                            f.get('LID').options.selected = gl_accounts_pre_selected;
                            f.record = record;
                            f.refresh();
                            setToForm('depositoryForm', '/v1/dep/' + BID + '/0', 400);
                        }
                    })
                    .fail( function() {
                        console.log('unable to get GLAccounts');
                        return;
                     });
                };  // yes callback

            // warn user if form content has been changed
            form_dirty_alert(yes_callBack, no_callBack, yes_args);
        },
    });

    //------------------------------------------------------------------------
    //          depository Form
    //------------------------------------------------------------------------
    $().w2form({
        name: 'depositoryForm',
        style: 'border: 0px; background-color: transparent;',
        header: 'Deposit Account Detail',
        url: '/v1/dep',
        formURL: '/webclient/html/formdepository.html',
        fields: [
            { field: 'recid', type: 'int', required: false, html: { page: 0, column: 0 } },
            { field: 'DEPID', type: 'int', required: false, html: { page: 0, column: 0 } },
            { field: 'BID', type: 'int', required: false, html: { page: 0, column: 0 } },
            { field: 'BUD', type: 'list', required: true, options: {items: app.businesses}, html: { page: 0, column: 0 } },
            { field: 'LID', type: 'list', required: true, options: { items: [], selected: {}, maxDropHeight: 200 }, html: { page: 0, column: 0 } },
            { field: 'Name', type: 'text', required: true, html: { page: 0, column: 0 } },
            { field: 'AccountNo', type: 'text', required: false, html: { page: 0, column: 0 } },
            { field: 'LastModTime', type: 'time', required: false, html: { page: 0, column: 0 } },
            { field: 'LastModBy', type: 'int', required: false, html: { page: 0, column: 0 } },
            { field: 'CreateTS', type: 'time', required: false, html: { page: 0, column: 0 } },
            { field: 'CreateBy', type: 'int', required: false, html: { page: 0, column: 0 } },
        ],
        toolbar: {
            items: [
                { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
                { id: 'bt3', type: 'spacer' },
                { id: 'btnClose', type: 'button', icon: 'fas fa-times' },
            ],
            onClick: function (event) {
                switch(event.target) {
                case 'btnClose':
                    var no_callBack = function() { return false; },
                        yes_callBack = function() {
                            w2ui.toplayout.hide('right',true);
                            w2ui.depGrid.render();
                        };
                    form_dirty_alert(yes_callBack, no_callBack);
                    break;
                }
            },
        },
        actions: {
            saveadd: function() {
                var f = this,
                    grid = w2ui.depGrid,
                    x = getCurrentBusiness(),
                    BID=parseInt(x.value),
                    BUD = getBUDfromBID(BID);

                // clean dirty flag of form
                app.form_is_dirty = false;
                // clear the grid select recid
                app.last.grid_sel_recid  =-1;

                // select none if you're going to add new record
                grid.selectNone();

                f.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }

                    // JUST RENDER THE GRID ONLY
                    grid.render();

                    var gl_accounts_pre_selected = {id: 0, text: " -- Select GL Account -- "};
                    var gl_accounts_items = [gl_accounts_pre_selected];
                    // get gl account list for BUD from `gl_accounts` key of `app`
                    gl_accounts_items = gl_accounts_items.concat(app.gl_accounts[BUD]);

                    f.get('LID').options.items = gl_accounts_items;
                    f.get('LID').options.selected = gl_accounts_pre_selected;

                    // add new empty record and just refresh the form, don't need to do CLEAR form
                    var record = getDepoInitRecord(BID, BUD);

                    f.record = record;
                    f.header = "Edit Depository Account (new)"; // have to provide header here, otherwise have to call refresh method twice to get this change in form
                    f.url = '/v1/dep/' + BID + '/0';
                    f.refresh();
                });
            },
            save: function (/*target, data*/) {
                var f = this,
                    tgrid = w2ui.depGrid;

                f.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }
                    w2ui.toplayout.hide('right',true);
                    tgrid.render();
                });
            },
            delete: function(/*target, data*/) {

                var form = this;

                w2confirm(delete_confirm_options)
                .yes(function() {

                    var tgrid = w2ui.depGrid;
                    var params = {cmd: 'delete', formname: form.name, ID: form.record.DEPID };
                    var dat = JSON.stringify(params);

                    // delete Depository request
                    $.post(form.url, dat, null, "json")
                    .done(function(data) {
                        if (data.status === "error") {
                            form.error(w2utils.lang(data.message));
                            return;
                        }
                        w2ui.toplayout.hide('right',true);
                        tgrid.remove(app.last.grid_sel_recid);
                        tgrid.render();
                    })
                    .fail(function(/*data*/){
                        form.error("Delete Depository Account failed.");
                        return;
                    });
                })
                .no(function() {
                    return;
                });
            },
        },
        onRefresh: function(event) {
            event.onComplete = function() {
                var f = this,
                    header = "Edit Depository Account ({0})";

                formRefreshCallBack(f, "DEPID", header);
            };
        },
        onChange: function(event) {
            event.onComplete = function() {
                // formRecDiffer: 1=current record, 2=original record, 3=diff object
                var diff = formRecDiffer(this.record, app.active_form_original, {});
                // if diff == {} then make dirty flag as false, else true
                if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                    app.form_is_dirty = false;
                } else {
                    app.form_is_dirty = true;
                }
            };
        },
        onSubmit: function(target, data) {
            delete data.postData.record.LastModTime;
            delete data.postData.record.LastModBy;
            delete data.postData.record.CreateTS;
            delete data.postData.record.CreateBy;
            // modify form data for server request
            getFormSubmitData(data.postData.record);
        },
    });
};

"use strict";
//-----------------------------------------------------------------------------
// formRecDiffer -  tells that form record has been changed
// **[copied from w2ui form's getChanges internal function]**
// @params
//   record = form's current record
//   original = form's initial record
//   result = returned object
// @return
//      Object with difference from `record` to `original`
//-----------------------------------------------------------------------------
window.formRecDiffer = function(record, original, result) {

    for (var i in record) {
        if (typeof record[i] == "object") {
            result[i] = formRecDiffer(record[i], original[i] || {}, {});
            if (!result[i] || $.isEmptyObject(result[i])) delete result[i];
        } else if ( record[i] !== null && record[i] != original[i] ) {
            /*** ================================================================
            || BY DEFAULT, W2UI SETS VALUE OF FIELD TO NULL IF NOTHING IS IN THERE
            || NOTE: be careful, for form record, <null> and <""> (blank string) both are same
            || it should not alert user that content has been changed !!!
            || so, for this, <undefined>, <NaN>, <null>, <""> all are same
            || NEED TO DO SOMETHING ABOUT THIS
            || HECK: it only makes sense when record[i] is not NULL (undefined, null, "", NaN)
            ================================================================ ***/
            result[i] = record[i];
        }
    }
    return result;
};

//-----------------------------------------------------------------------------
// getPersonDetailsByTCID -  returns the person details for given TCID
// @params
//   TCID = Transactant ID
// @return
//      Object with Transactant record
//-----------------------------------------------------------------------------
window.getPersonDetailsByTCID = function (BID, TCID) {


    // we need to use this structure to get person details from given TCID
    var params = {"cmd":"get","recid":0,"name":"transactantForm"},
        dat = JSON.stringify(params);

    return $.post("/v1/person/"+BID+"/"+TCID, dat, null, "json");
};

// form dirty alert confirmation dialog box options
var form_dirty_alert_options = {
    msg          : '<p>There are unsaved changes.</p><p>click Ignore Change to continue without saving your changes or click Continue Editing.</p>',
    title        : '',
    width        : 480,     // width of the dialog
    height       : 180,     // height of the dialog
    btn_yes      : {
        text     : 'Ignore Changes',   // text for yes button (or yes_text)
        class    : 'w2ui-btn w2ui-btn-red',      // class for yes button (or yes_class)
        style    : '',      // style for yes button (or yes_style)
        callBack : null     // callBack for yes button (or yes_callBack)
    },
    btn_no       : {
        text     : 'Continue Editing',    // text for no button (or no_text)
        class    : 'w2ui-btn',      // class for no button (or no_class)
        style    : '',      // style for no button (or no_style)
        callBack : null     // callBack for no button (or no_callBack)
    },
    callBack     : function(answer) {
        console.log("common callBack (Yes/No): ", answer);
    }     // common callBack
};

//-----------------------------------------------------------------------------
// form_dirty_alert - alert the user if form content has been changed and he leaves the form at five times as follows
// 1. When user change the business
// 2. When he clicks on the sidebar that load something else
// 3. When closing the form
// 4. When click on other record
// 5. When user closing the whole window
// NOTE: if form is dirty then only alert the user, otherwise always return true;
// @params
//   yes callback = what to do if user agree (Yes)
//   no callback = what to do if user disagree (No)
//   yes_args = yes callback arguments
//   no_args = no callback arguments
// @return: true or false
//-----------------------------------------------------------------------------
window.form_dirty_alert = function (yes_callBack, no_callBack, yes_args, no_args) {
    if (app.form_is_dirty) {
        w2confirm(form_dirty_alert_options)
        .yes(function() {
            if (typeof yes_callBack === "function") {
                if (Array.isArray(yes_args) && yes_args.length > 0) {
                    yes_callBack.apply(null, yes_args);
                } else{
                    yes_callBack();
                }
            }
        })
        .no(function() {
            if (typeof no_callBack === "function") {
                if (Array.isArray(no_args) && no_args.length > 0) {
                    no_callBack.apply(null, no_args);
                } else{
                    no_callBack();
                }
            }
        });
    } else {
        // if form is not dirty then simply execute yes callback which is default action
        if (typeof yes_callBack === "function") {
            // Reference: http://odetocode.com/blogs/scott/archive/2007/07/04/function-apply-and-function-call-in-javascript.aspx
            if (Array.isArray(yes_args) && yes_args.length > 0) {
                yes_callBack.apply(null, yes_args);
            } else{
                yes_callBack();
            }
        }
    }
};

// =================================================
// WINDOW BEFORE UNLOAD EVENT
// =================================================
// warn user if active form content has been changed
// for security reason you can't just popup your custom dialog
// see the thread: https://stackoverflow.com/questions/30712377/jquery-beforeunload-custom-pop-up-window-for-leaving-a-page
window.form_dirty_alert_window_unload = function (e) {
    if (app.form_is_dirty){
        if(!e) e = window.event;

        //e.cancelBubble is supported by IE - this will kill the bubbling process.
        e.cancelBubble = true;

        //e.stopPropagation works in Firefox.
        if (e.stopPropagation) {
            e.stopPropagation();
            e.preventDefault();
        }
        return "Changes in the form that you made may not be saved.";
    }
};

window.onbeforeunload=form_dirty_alert_window_unload;
// =================================================

/*global
    w2ui, app, $, w2uiDateControlString, addDateNavToToolbar, console, getCurrentBusiness, getBUDfromBID,
    popupRentalAgrPicker, rafinder, form_dirty_alert, setToForm, setDateControlsInToolbar, formRefreshCallBack,
    formRecDiffer, getFormSubmitData, w2confirm, w2utils, get2XReversalSymbolHTML, getGridReversalSymbolHTML,
    setDefaultFormFieldAsPreviousRecord, getBusinessExpenseRules, getExpenseInitRecord, expFormRASelect, renderExpReversalIcon
*/
"use strict";
window.getExpenseInitRecord = function (BID, BUD, previousFormRecord){
    var y = new Date();
    var defaultFormData = {
        recid: 0,
        EXPID: 0,
        ARID: 0,
        RID: 0,
        RAID: 0,
        BID: BID,
        BUD: BUD,
        Dt: w2uiDateControlString(y),
        Amount: 0,
        AcctRule: '',
        RName: '',
        Comment: '',
        LastModTime: y.toISOString(),
        LastModBy: 0,
        CreateTS: y.toISOString(),
        CreateBy: 0,
        FLAGS: 0,
        Mode: 0,
    };

    // if it called after 'save and add another' action there previous form record is passed as Object
    // else it is null
    if ( previousFormRecord ) {
        defaultFormData = setDefaultFormFieldAsPreviousRecord(
            [ 'RAID', 'Amount', 'Comment', 'RID', 'RName'], // Fields to Reset
            defaultFormData,
            previousFormRecord
        );
    }

    return defaultFormData;
};

//-----------------------------------------------------------------------------
// getBusinessExpenseRules - return the promise object of request to get latest
//                           expense rules for given BID
//                           It updates the "app.ExpenseRules" variable for requested BUD
// @params  - BID : Business ID (expected current one)
//          - BUD : Business Unit Designation
// @return  - promise object from $.get
//-----------------------------------------------------------------------------
window.getBusinessExpenseRules = function (BID, BUD) {
    // if not BUD in app.ExpenseRules then initialize it with blank list
    if (!(BUD in app.ExpenseRules)) {
        app.ExpenseRules[BUD] = [];
    }

    // return promise
    return $.get("/v1/uival/" + BID + "/app.ExpenseRules", null, null, "json").done(function(data) {
            // if it doesn't meet this condition, then save the data
            if (!('status' in data && data.status !== "success")) {
                app.ExpenseRules[BUD] = data[BUD];
            }
        });
};

window.renderExpReversalIcon = function (record /*, index, col_index*/) {
    if (typeof record === "undefined") {
        return;
    }
    if ( (record.FLAGS & app.asmFLAGS.ASMREVERSED) !== 0 ) { // if reversed then
        return '<i class="fas fa-exclamation-triangle" title="reversed" aria-hidden="true" style="color: #FFA500;"></i>';
    }
    return '';
};

window.buildExpenseElements = function () {
    //------------------------------------------------------------------------
    //          expenseGrid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'expenseGrid',
        url: '/v1/expense',
        multiSelect: false,
        show: {
            toolbar         : true,
            footer          : true,
            toolbarAdd      : true,   // indicates if toolbar add new button is visible
            toolbarDelete   : false,   // indicates if toolbar delete button is visible
            toolbarSave     : false,   // indicates if toolbar save button is visible
            selectColumn    : false,
            expandColumn    : false,
            toolbarEdit     : false,
            toolbarSearch   : false,
            toolbarInput    : true,
            searchAll       : false,
            toolbarReload   : true,
            toolbarColumns  : true,
        },
        columns: [
            {field: 'recid',    caption: 'recid',              size: '40px',  hidden: true,  sortable: true },
            {field: 'Reversed', caption: '',                   size: '10px',  hidden: false, sortable: true, style: 'text-align: center', render: renderExpReversalIcon},
            {field: 'EXPID',    caption: 'EXPID',              size: '60px',  hidden: false, sortable: true, style: 'text-align: right'},
            {field: 'ARID',     caption: 'ARID',                              hidden: true,  sortable: false },
            {field: 'Dt',       caption: 'Date',               size: '80px',  hidden: false, sortable: true, style: 'text-align: right'},
            {field: 'ARName',   caption: 'Account Rule',       size: '200px', hidden: false, sortable: true, style: 'text-align: left'},
            {field: 'Amount',   caption: 'Amount',             size: '100px', hidden: false, sortable: true, style: 'text-align: right', render: 'money'},
            {field: 'BID',      caption: 'BID',                size: '40px',  hidden: true,  sortable: false },
            {field: 'RAID',     caption: app.sRentalAgreement, size: '125px', hidden: false, sortable: true, style: 'text-align: right'},
            {field: 'RID',      caption: 'RID',                size: '40px',  hidden: true,  sortable: false },
            {field: 'RName',    caption: app.sRentable,        size: '150px', hidden: false, sortable: true, style: 'text-align: right'},
        ],
        onClick: function(event) {
            event.onComplete = function () {
                var yes_args = [this, event.recid],
                    no_args = [this],
                    no_callBack = function(grid) {
                        grid.select(app.last.grid_sel_recid);
                        return false;
                    },
                    yes_callBack = function(grid, recid) {
                        app.last.grid_sel_recid = parseInt(recid);

                        // keep highlighting current row in any case
                        grid.select(app.last.grid_sel_recid);


                        var f = w2ui.expenseForm;

                        // before setting to the form, get the list of AcctRules...
                        var BID = getCurrentBID(),
                            BUD = getBUDfromBID(BID);

                        getBusinessExpenseRules(BID, BUD)
                        .done( function(data) {
                            if ('status' in data && data.status !== 'success') {
                                f.message(data.message);
                            } else {
                                f.get('ARID').options.items = app.ExpenseRules[BUD];
                                f.refresh();
                                var rec = grid.get(recid);
                                var myurl = '/v1/expense/' + BID + '/' + rec.EXPID;
                                console.log( 'calling setToForm( '+f.name+', ' + myurl + ')');
                                setToForm(f.name, myurl, 400, true);
                            }
                        })
                        .fail( function() {
                            console.log('Error getting /v1/uival/' + BID + '/app.ExpenseRules');
                         });
                    };

                    // warn user if form content has been changed
                    form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
            };
        },
        onAdd: function (/*event*/) {
            var yes_args = [this],
                no_callBack = function() { return false; },
                yes_callBack = function(grid) {
                    var f = w2ui.expenseForm;

                    // reset it
                    app.last.grid_sel_recid = -1;
                    grid.selectNone();

                    var BID = getCurrentBID(),
                        BUD = getBUDfromBID(BID);

                    getBusinessExpenseRules(BID, BUD)
                    .done( function(data) {
                        if ('status' in data && data.status !== 'success') {
                            f.message(data.message);
                        } else {
                            app.ridRentablePicker.BID = BID; // needed by typedown

                            var record = getExpenseInitRecord(BID, BUD, null);
                            // f.fields[5].options.url = '/v1/rentablestd/' + app.ridRentablePicker.BID;
                            f.get("ARID").options.items = app.ExpenseRules[BUD];
                            f.record = record;
                            f.refresh();
                            setToForm('expenseForm', '/v1/expense/' + BID + '/0', 400);
                        }
                    })
                    .fail( function() {
                        console.log('Error getting /v1/uival/'+BID+'/app.ExpenseRules');
                     });
                };

                // warn user if form content has been changed
                form_dirty_alert(yes_callBack, no_callBack, yes_args);
        },
        onRequest: function(/*event*/) {
            w2ui.expenseGrid.postData = {searchDtStart: app.D1, searchDtStop: app.D2};
        },
        onRefresh: function(event) {
            event.onComplete = function() {
                if (app.active_grid == this.name) {
                    if (app.new_form_rec) {
                        this.selectNone();
                    }
                    else{
                        this.select(app.last.grid_sel_recid);
                    }
                }

                if (event.target == 'monthfwd') {  // we do these tasks after monthfwd is refreshed so we know that the 2 date controls exist
                    setDateControlsInToolbar('asms');
                    w2ui.expenseGrid.postData = {searchDtStart: app.D1, searchDtStop: app.D2};
                }
            };
        }
    });

    addDateNavToToolbar('expense');

    //---------------------------------------------------------------------------------
    //          expenseForm  -  assessment epoch - this is for recurring assessments
    //---------------------------------------------------------------------------------
    $().w2form({
        name: 'expenseForm',
        style: 'border: 0px; background-color: transparent;',
        header: app.sExpense + ' Detail',
        url: '/v1/expense',
        formURL: '/webclient/html/formexpense.html',
        fields: [
            { field: 'ARID',           type: 'list',   required: true, options: { items: [] }},
            { field: 'recid',          type: 'int',    required: false },
            { field: 'EXPID',          type: 'int',    required: false },
            { field: 'BID',            type: 'int',    required: true  },
            { field: 'BUD',            type: 'list',   required: true, options: {items: app.businesses}, html: { caption: "BUD", page: 0, column: 0 } },
            { field: 'PREXPID',        type: 'int',    required: false },
            { field: 'RName',          type: 'text',   required: false },
            { field: 'RID',            type: 'int',    required: false },
            { field: 'RAID',           type: 'int',    required: false },
            { field: 'Amount',         type: 'money',  required: true  },
            { field: 'Dt',             type: 'date',   required: true  },
            { field: 'Comment',        type: 'text',   required: false },
            { field: 'LastModTime',    type: 'hidden', required: false },
            { field: 'LastModBy',      type: 'hidden', required: false },
            { field: 'LastModByUser',  type: 'hidden', required: false },
            { field: 'CreateTS',       type: 'hidden', required: false },
            { field: 'CreateBy',       type: 'hidden', required: false },
            { field: 'CreateByUser',   type: 'hidden', required: false },
            { field: 'FLAGS',          type: 'w2int',  required: false },
        ],
        toolbar: {
            items: [
                { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
                { id: 'bt3',      type: 'spacer' },
                { id: 'btnClose', type: 'button', icon: 'fas fa-times' },
            ],
            onClick: function (event) {
                switch(event.target) {
                case 'btnClose':
                    var no_callBack = function() { return false; },
                        yes_callBack = function() {
                            w2ui.toplayout.hide('right',true);
                            w2ui.expenseGrid.render();
                        };
                    form_dirty_alert(yes_callBack, no_callBack);
                    break;
                }
            },
        },
        onValidate: function (event) {
            if (this.record.ARID.id === 0) {
                event.errors.push({
                    field: this.get('ARID'),
                    error: 'The Account Rule needs to be set'
                });
            }
            if (this.record.Amount < 0.01) {
                event.errors.push({
                    field: this.get('Amount'),
                    error: 'Amount must be at least $0.01'
                });
            }
        },
        actions: {
            close: function() {
                var no_callBack = function() { return false; },
                    yes_callBack = function() {
                        w2ui.toplayout.hide('right',true);
                        w2ui.expenseGrid.render();
                    };
                form_dirty_alert(yes_callBack, no_callBack);
            },
            saveadd: function() {
                var f = this,
                    grid = w2ui.expenseGrid,
                    x = getCurrentBusiness(),
                    BID=parseInt(x.value),
                    BUD = getBUDfromBID(BID);

                // clean dirty flag of form
                app.form_is_dirty = false;
                // clear the grid select recid
                app.last.grid_sel_recid  =-1;

                // unselect the record
                grid.selectNone();

                // first save the record
                f.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }
                    // render the grid only
                    grid.render();

                    var BID = getCurrentBID(),
                        BUD = getBUDfromBID(BID);

                    getBusinessExpenseRules(BID, BUD)
                    .done( function(data) {
                        if ('status' in data && data.status !== 'success') {
                            f.message(data.message);
                        } else {
                            app.ridRentablePicker.BID = BID; // needed by typedown

                            // f.fields[5].options.url = '/v1/rentablestd/' + app.ridRentablePicker.BID;
                            f.get("ARID").options.items = app.ExpenseRules[BUD];
                            f.record = getExpenseInitRecord(BID, BUD, f.record);
                            f.header = "Edit Expense (new)"; // have to provide header here, otherwise have to call refresh method twice to get this change in form
                            f.url  = "/v1/expense/" + BID + "/0";
                            f.refresh();
                        }
                    })
                    .fail( function() {
                        console.log('Error getting /v1/uival/'+BID+'/app.ExpenseRules');
                     }); //get assessment UI val done
                });
            },
            save: function () {
                var x = getCurrentBusiness(),
                    grid = w2ui.expenseGrid;

                grid.selectNone();
                w2ui.expenseForm.url = '/v1/expense/' + x.value + '/' + w2ui.expenseForm.record.EXPID;

                this.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }
                    w2ui.toplayout.hide('right',true);
                    grid.render();
                });
            },
            reverse: function() {
                var form = this;

                w2confirm(reverse_confirm_options)
                .yes(function() {
                    var tgrid = w2ui.expenseGrid;
                    var params = {cmd: 'delete', formname: form.name, ID: form.record.EXPID };
                    var dat = JSON.stringify(params);
                    // Reverse receipt request
                    $.post(form.url, dat, null, "json")
                    .done(function(data) {
                        if (data.status === "error") {
                            form.error(w2utils.lang(data.message));
                            return;
                        }
                        w2ui.toplayout.hide('right',true);
                        // reversed items should not be deleted!
                        tgrid.render();
                    })
                    .fail(function(/*data*/){
                        form.error("Reverse Expense failed.");
                        return;
                    });
                })
                .no(function() {
                    return;
                });
            },
        },
        onRefresh: function(event) {
            event.onComplete = function() {
                var f = this,
                    r = f.record,
                    header = "Edit Expense ({0})";

                formRefreshCallBack(f, "EXPID", header);

                // ===========================
                // SPECIAL CASE
                // ===========================

                if (r.EXPID === 0) { // if new record then do not worry about reversed thing
                    $(f.box).find("button[name=reverse]").addClass("hidden");
                    $(f.box).find("button[name=save]").removeClass("hidden");
                    $(f.box).find("button[name=saveadd]").removeClass("hidden");
                    $(f.box).find("button[name=close]").addClass("hidden");
                    $(f.box).find("#ExpFLAGReport").addClass("hidden");
                    $(f.box).find("#ExpenseInfo").addClass("hidden");

                    // ENABLE ALL INPUTS IF ALL OF THOSE HAVE BEEN DISABLED FOR REVERSED PREVIOUSLY
                    $(f.box).find('input,button').not('input[name=BUD]').prop("disabled", false);

                    return;
                } else {
                    $(f.box).find("#ExpFLAGReport").removeClass("hidden");
                    $(f.box).find("#ExpenseInfo").removeClass("hidden");
                }

                // Expense Info at the top of form in white box
                var info = '<p><i class="fas fa-sync-alt" style="margin-right: 5px;"></i> Repeating Expense Series Definition</p>'.format(r.EXPID);
                $(f.box).find("#ExpenseInfo").html(info);

                // FLAG reports
                var flag = r.FLAGS,
                    flagHTML = "";

                // check if it is reversed or not
                if ( (flag & app.asmFLAGS.ASMREVERSED) !== 0 ) { // if reversed then
                    flagHTML += "<p style='margin-bottom: 5px;'><strong>REVERSED</strong> ("+r.Comment+")</p>";
                    // reversed indication icon
                    flagHTML += get2XReversalSymbolHTML();
                    // if reversed then do not show reverse, save button
                    $(f.box).find("button[name=reverse]").addClass("hidden");
                    $(f.box).find("button[name=save]").addClass("hidden");
                    $(f.box).find("button[name=saveadd]").addClass("hidden");
                    // if reversed then we need to show close button at the bottom of form
                    $(f.box).find("button[name=close]").removeClass("hidden");

                    // *******************************************************************
                    // IF REVERSED THEN DISABLE ALL INPUTS, BUTTONS  EXCEPT close button
                    // *******************************************************************
                    $(f.box).find('input,button:not([name=close])').prop("disabled", true);

                } else {
                    // show reverse, save button, hide close button
                    $(f.box).find("button[name=reverse]").removeClass("hidden");
                    $(f.box).find("button[name=save]").removeClass("hidden");
                    $(f.box).find("button[name=saveadd]").removeClass("hidden");
                    $(f.box).find("button[name=close]").addClass("hidden");

                    // ****************************************
                    // IF not REVERSED THEN ENABLE ALL INPUTS
                    // ****************************************
                    $(f.box).find('input,button').not('input[name=BUD]').prop("disabled", false);
                }

                // finally append
                // $(f.box).find("#ExpFLAGReport").html(flagHTML);
                var z = document.getElementById("ExpFLAGReport");
                if (z !== null) {
                    if (r.EXPID > 0) {
                        flagHTML += "<p style='margin-bottom: 5px;'>Last Update: {0} by {1}</p>".format(r.LastModTime, r.LastModByUser);
                        flagHTML += "<p>Created: {0} by {1}</p>".format(r.CreateTS, r.CreateByUser);
                        z.innerHTML = flagHTML;
                    } else {
                        z.innerHTML = " ";
                    }
                }
            };
        },
        onChange: function(event) {
            event.onComplete = function() {
                var f = this,
                    r = f.record;

                // copy original record temporary and reset it back after refresh event
                var temp = $.extend(true, {}, app.active_form_original);
                // finally refresh the form
                f.refresh();
                // now reset app original form record
                app.active_form_original = $.extend(true, {}, temp);

                // formRecDiffer: 1=current record, 2=original record, 3=diff object
                var diff = formRecDiffer(r, app.active_form_original, {});
                // if diff == {} then make dirty flag as false, else true
                if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                    app.form_is_dirty = false;
                } else {
                    app.form_is_dirty = true;
                }
            };
        },
        onSubmit: function(target, data) {
            delete data.postData.record.LastModTime;
            delete data.postData.record.LastModBy;
            delete data.postData.record.CreateTS;
            delete data.postData.record.CreateBy;
            // modify form data for server request
            getFormSubmitData(data.postData.record);
            console.log(data.postData.record);
        },
    });

};

window.expOpenRASelect = function () {
    rafinder.cb = expFormRASelect;
    popupRentalAgrPicker();
};

window.expFormRASelect = function () {
    w2ui.expenseForm.record.RAID = w2ui.rentalAgrPicker.record.RAID;
    w2ui.expenseForm.record.RName = w2ui.rentalAgrPicker.record.RentableName.text;
    w2ui.expenseForm.record.RID = w2ui.rentalAgrPicker.record.RentableName.id;
    w2ui.expenseForm.refresh();
};

/*global
    $, w2obj, app, 
*/
"use strict";
window.defineDateFmts = function () {
    var month = (new Date()).getMonth() + 1;
    var year  = (new Date()).getFullYear();
    // // US Format
    $('input[type=us-datetime]').w2field('datetime');
    $('input[type=us-date]').w2field('date',  { format: 'm/d/yyy' });
    $('input[type=us-dateA]').w2field('date', { format: 'm/d/yyyy', start:  month + '/5/' + year, end: month + '/25/' + year });
    $('input[type=us-dateB]').w2field('date', { format: 'm/d/yyyy', blocked: [ month+'/12/2014',month+'/13/2014',month+'/14/' + year,]});
    $('input[type=us-date1]').w2field('date', { format: 'm/d/yyyy', end: $('input[type=us-date2]') });
    $('input[type=us-date2]').w2field('date', { format: 'm/d/yyyy', start: $('input[type=us-date1]') });
    $('input[type=us-time]').w2field('time',  { format: 'h12' });
    $('input[type=us-timeA]').w2field('time', { format: 'h12', start: '8:00 am', end: '4:30 pm' });

    // EU Common Format
    $('input[type=eu-date]').w2field('date',  { format: 'd.m.yyyy' });
    $('input[type=eu-dateA]').w2field('date', { format: 'd.m.yyyy', start:  '5.' + month + '.' + year, end: '25.' + month + '.' + year });
    $('input[type=eu-dateB]').w2field('date', { format: 'd.m.yyyy', blocked: ['12.' + month + '.' + year, '13.' + month + '.' + year, '14.' + month + '.' + year]});
    $('input[type=eu-date1]').w2field('date', { format: 'd.m.yyyy', end: $('input[type=eu-date2]') });
    $('input[type=eu-date2]').w2field('date', { format: 'd.m.yyyy', start: $('input[type=eu-date1]') });
    $('input[type=eu-time]').w2field('time',  { format: 'h24' });
    $('input[type=eu-timeA]').w2field('time', { format: 'h24', start: '8:00 am', end: '4:30 pm' });
};

// // GLOBAL AJAX SETUP
// $.ajaxSetup({
//     dataType: "json"
// });

// --------------------------------------------------------
// extend w2ui grid remove prototype
// --------------------------------------------------------
// when record removed, reset `app.grid_sel_recid`
w2obj.grid.prototype._remove = w2obj.grid.prototype.remove;
w2obj.grid.prototype.remove = function() {
    app.last.grid_sel_recid = -1;
    this._remove.apply(this, arguments);
};

// --------------------------------------------------------
// extend w2ui grid save prototype
// --------------------------------------------------------
w2obj.grid.prototype.save = function (callBack) {
    var obj = this;
    var changes = this.getChanges();
    var url = (typeof this.url != 'object' ? this.url : this.url.save);
    // event before
    var edata = this.trigger({ phase: 'before', target: this.name, type: 'save', changes: changes });
    if (edata.isCancelled === true) {
        if (url) {
            if (typeof callBack == 'function') callBack({ status: 'error', message: 'Request aborted.' });
        }
        return;
    }
    if (url) {
        this.request('save', { 'changes' : edata.changes }, null,
            function (data) {
                if (data.status !== 'error') {
                    // only merge changes, if save was successful
                    obj.mergeChanges();
                }
                // event after
                obj.trigger($.extend(edata, { phase: 'after' }));
                // call back
                if (typeof callBack == 'function') callBack(data);
            }
        );
    } else {
        this.mergeChanges();
        // event after
        this.trigger($.extend(edata, { phase: 'after' }));
    }
};


"use strict";
window.buildAppLayout = function(){
     //------------------------------------------------------------------------
    //          toplayout
    //------------------------------------------------------------------------
    w2ui.mainlayout.content('main', $().w2layout({
        name: 'toplayout',
        padding: 2,
        panels: [
            { type: 'top',     size: 200, style: app.pstyle2,  hidden: true, resizable: true, content: w2ui.newsLayout},
            { type: 'left',    size: app.sidebarWidth, style: app.pstyle2,   resizable: true, content: 'sidebar' },
            { type: 'main',               style: app.pstyle2   },
            { type: 'preview', size: 0,   style: app.bgyellow, hidden: true, resizable: true, content: 'preview' },
            { type: 'right',   size: 200, style: app.pstyle2,  hidden: true, resizable: true },
            { type: 'bottom',  size: 0,   style: app.pstyle2,  hidden: true, resizable: true, content: 'toplayout - bottom' }
        ],
        onHide: function(event) {
            event.onComplete = function() {
                if (event.target === "right" && event.type === "hide") {
                    // get the form from active_form value
                    var f = w2ui[app.active_form];
                    if (f) {
                        // if right panel is being hidden,
                        // then make blank everything related with active form

                        // b'coz rtForm, depositForm, rentalagrForm have been
                        // filled inside a layout, so we need to consider those
                        // separately
                        if (f === this.get("right").content ||
                            f.name == "rtForm" ||
                            f.name == "rentalagrForm" ||
                            f.name === "depositForm") {

                            app.active_form = "";
                            app.active_form_original = {};
                            app.form_is_dirty = false;
                        }
                    }
                }
            };
        },
    }));
    //------------------------------------------------------------------------
    //          NEWS LAYOUT
    //------------------------------------------------------------------------
    $().w2layout({
        name: 'newsLayout',
        padding: 0,
        panels: [
            { type: 'left', hidden: false, style: app.pstyleNB, size: 20 },
            { type: 'top', hidden: true },
            { type: 'main', size: '90%', resizable: true, hidden: false, style: app.pstyleNB, content: 'Hi.  I should load w2ui.newsLayout' },
            { type: 'preview', hidden: true },
            { type: 'bottom', hidden: true },
            { type: 'right', hidden: true }
        ]
    });
};

"use strict";
/*global
    renderLedgerStateIcon,
*/
var adminLedger = {
    mode: 0,
};
window.buildLedgerElements = function (){
    //------------------------------------------------------------------------
    //          ledger grid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'ledgersGrid',
        url: '/v1/ledgers',
        multiSelect: false,
        show: {
            header: false,
            toolbar: true,
            footer: true,
            toolbarReload   : true,
            toolbarColumns  : false,
            toolbarSearch   : false,
            toolbarAdd      : false,
            toolbarDelete   : false,
            toolbarInput    : false,
            searchAll       : false,
            toolbarSave     : false,
            toolbarEdit     : false,
            searches        : false,
            lineNumbers     : false,
            selectColumn    : false,
            expandColumn    : false,
        },
        columns: [
            {field: 'recid',     caption: "recid",         size: '35px',  sortable: true, hidden: true},
            {field: 'LID',       caption: "LID",           size: '55px',  sortable: true, hidden: false},
            {field: 'RAID',      caption: "RAID",          size: '55px',  sortable: true, hidden: false},
            {field: 'RID',       caption: "RID",           size: '55px',  sortable: true, hidden: false},
            {field: 'GLNumber',  caption: "GLNumber",      size: '85px',  sortable: true, hidden: false},
            {field: 'Name',      caption: "Name",          size: '225px', sortable: true, hidden: false},
            {field: 'Active',    caption: "Active",        size: '50px',  sortable: true, hidden: false},
            // {field: 'AllowPost', caption: "Allow<br>Post", size: '50px',  sortable: true, hidden: false},
            {field: 'Balance',   caption: "Balance",       size: '100px', sortable: true, hidden: false, render: 'money'},
            {field: 'LMDate',    caption: "LM Date",       size: '170px', sortable: true, hidden: false},
            {field: 'LMState',   caption: "LM<br>State",   size: '75px',  sortable: true, hidden: false, render: renderLedgerStateIcon},
            {field: 'LMAmount',  caption: "LM Amount",     size: '100px', sortable: true, hidden: false, render: 'money'},
        ],
        onRequest: function(/*event*/) {
            adminLedger.mode = document.getElementById('adminLedgerMode').options.selectedIndex;
            w2ui.ledgersGrid.postData = {
                mode : adminLedger.mode,
                searchDtStart: app.D1,
                searchDtStop: app.D2,
                client: app.client
            };
        },
        onLoad: function(event) {
            event.onComplete = function() {
                console.log('onLoad: ' + event);
                document.getElementById('adminLedgerMode').value = adminLedger.mode;
                document.getElementById("adminLedgerMode").options.selectedIndex = adminLedger.mode;
            };
        },
    });
    addDateNavToToolbar('ledgers');
    var items = [
            { type: 'html',  id: 'mode',
                html: function (/*item*/) {
                    var html =
                        '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i class="far fa-building"></i> &nbsp;Mode:' +
                        '<select id="adminLedgerMode" onchange="changeLedgerMode();">'+
                        '<option value="0">Initial Ledger Markers</option>'+
                        '<option value="1">GL Account Ledger Markers</option>'+
                        '<option value="2">RAID Ledger Markers</option>'+
                        '<option value="3">RID Ledger Markers</option>'+
                        '</select>&nbsp;&nbsp;&nbsp;';
                    return html;
                }
            },
    ];
    w2ui.ledgersGrid.toolbar.add( items );
};

window.renderLedgerStateIcon = function (record /*, index, col_index*/) {
    if (typeof record === "undefined") {
        return;
    }
    var s = '';
    switch (record.LMState) {
    	case "initial":
        s = '<i class="fas fa-home" style="color: #0088DD;"></i> &nbsp;';
    	break;
    	case "closed":
    	s = '<i class="fas fa-lock" style="color: #0088DD;"></i> &nbsp;';
    	break;
    	case "locked":
    	s = '<i class="fas fa-ban" style="color: #0088DD;"></i> &nbsp;';
    	break;
    }
    return s + record.LMState;
};


window.changeLedgerMode = function(){
    // console.log('hello: ' + event);
    adminLedger.mode = document.getElementById('adminLedgerMode').options.selectedIndex;
    w2ui.ledgersGrid.postData = {
        mode : adminLedger.mode,
        searchDtStart: app.D1,
        searchDtStop: app.D2,
        client: app.client
    };
    w2ui.ledgersGrid.reload();
};
"use strict";

/*global
    $, console, app, w2ui, w2popup, setInterval, getCookieValue, triggerReceiptsGrid,
    deleteCookie, userProfileToUI, handleBlankScreen, ensureSession, startSessionChecker,
    getUserInfo, startNewSession, popupLoginDialogBox
*/

var loginRoURL = "/webclient/html/formlogin.html";
var loginRcURL = "/webclient/html/formrcptlogin.html";

var loginSessionChecker = {};

var loginPopupOptions = {
    body: '<div id="loginPopupForm" style="width: 100%; height: 100%;"></div>',
    style: 'padding: 4px 0px 0px 0px; overflow: auto;',
    width: 425,
    height: 525,
    showMax: true,
    modal: true,
    onOpen: function (event) {
        event.onComplete = function () {
            $('#w2ui-popup #loginPopupForm').w2render('passwordform');
        };
    },
};

window.userProfileToUI = function() {
    var name = app.name;
    if (name.length === 0 || app.uid === 0) { name = "?";}
    $("#user_menu_container").find("#username").text(name);
    $("#user_menu_container").find("img").attr("src", app.imageurl);

    // *******************
    // ONLY FOR ROV CLIENT
    // -------------------
    if (window.location.href.endsWith("/rhome/")) {
        setTimeout(function() {
            $('#node_receipts').trigger('click');
        }, 500); // wait for some time meanwhile left sidebar render done!
    }
};

window.buildLoginForm = function() {
    var loginTmplURL = loginRoURL;
    if (app.client == "receipts") {
        loginTmplURL = loginRcURL;
    }
    $().w2form({
        name: 'passwordform',
        formURL: loginTmplURL,
        style: 'border: 0px; background-color: transparent;',
        fields: [{field: 'user', type: 'text',     required: false, html: {caption: 'User Name' /*, attr: 'readonly'*/} },
                 {field: 'pass', type: 'password', required: false, html: {caption: 'Password'} },
                ],
        actions: {
            login: function (/*event*/) {
                var f = this;
                console.log('User Name = ' + w2ui.passwordform.record.user);
                app.username = w2ui.passwordform.record.user;

                // request login only username, password entered
                if (!(app.username && w2ui.passwordform.record.pass)) {
                    console.log("Both Username and Password must be supplied");
                        $(f.box).find("#LoginMessage").find(".errors").empty();
                        var message = "Both Username and Password must be supplied";
                        $(f.box).find("#LoginMessage").find(".errors").append("<p>" + message + "</p>");
                        $(f.box).find("#LoginMessage").removeClass("hidden");
                        // w2ui.passwordform.error(w2utils.lang(data.message));
                    return;
                }

                var params = {user: app.username, pass: w2ui.passwordform.record.pass };
                var dat = JSON.stringify(params);
                $.post('/v1/authn/', dat, null, "json")
                .done(function(data) {
                    if (data.status === "error") {
                        $(f.box).find("#LoginMessage").find(".errors").empty();
                        var message = "Unrecognized Username or Password";
                        $(f.box).find("#LoginMessage").find(".errors").append("<p>" + message + "</p>");
                        $(f.box).find("#LoginMessage").removeClass("hidden");
                        // w2ui.passwordform.error(w2utils.lang(data.message));
                    }
                    else if (data.status === "success") {
                        app.uid = data.uid;
                        app.name = data.Name;
                        app.imageurl = data.ImageURL;
                        $(f.box).find("#LoginMessage").addClass("hidden");
                        w2popup.close();
                        w2ui.passwordform.record.pass = ""; // after closing dialog, remove password information.
                        userProfileToUI();

                        // remove blank screen if login successfully
                        handleBlankScreen(true);
                    } else {
                        console.log("Login service returned unexpected status: " + data.status);
                    }
                    return;
                })
                .fail(function(/*data*/){
                    w2ui.passwordform.error("Login failed");
                    return;
                });
            },
            cancel: function (/*event*/) {
                // w2popup.close();
                return;
            }
        },
        onRefresh: function(event) {
            var f = this;
            event.onComplete = function() {

                // handle enter key press event
                $(f.box).keypress(function(keypressEvent) {
                    if (keypressEvent.which === 13) {
                        // need to give time so that w2ui form have data in it's record object
                        setTimeout(function() {
                            $(f.box).find("button[name=login]").click();
                        }, 100);
                    }
                });

                // TODO: handle forgot password link
                $(f.box).find("forgot_pass_link").click(function() {
                    console.log("forgot password link clicked!");
                });
            };
        }
    });
};

//---------------------------------------------------------------------------------
// startNewSession - encapsulates the steps needed to launch a new login session
//                 and start up a session checker to have the user log in again
//                 if the session expires
//
// @params  <none>
// @returns <none>
//---------------------------------------------------------------------------------
window.startNewSession = function () {
    ensureSession(); // get the user logged in
    startSessionChecker(); // have the user log in if the session expires
};

//---------------------------------------------------------------------------------
// getUserInfo - get the user profile information
//
// @params  <none>
// @returns <none>
//---------------------------------------------------------------------------------
window.getUserInfo = function () {
    $.get('/v1/userprofile/')
    .done(function(data, textStatus, jqXHR) {
        if (data.status == "success") {
            app.uid = data.uid;
            app.username = data.username;
            app.name = data.Name;
            app.imageurl = data.ImageURL;
            userProfileToUI();
        }
    })
    .fail( function() {
        console.log('Error getting /v1/userprofile');
    });
};
//---------------------------------------------------------------------------------
// launchSession - if a valid sessionid exists, use it and get user profile info
//                 if not, log in.
//
// @params  <none>
// @returns <none>
//---------------------------------------------------------------------------------
window.launchSession = function () {
    var x = getCookieValue("air");
    // console.log('launchSession: getCookieValue(air) = '+x);
    if (x !== null && x.length > 0) {
        getUserInfo();
        handleBlankScreen(true);
    }
    startNewSession();
};


//---------------------------------------------------------------------------------
// startSessionChecker - validate the session every 5 seconds
//
// @params  <none>
// @returns <none>
//---------------------------------------------------------------------------------
window.startSessionChecker = function () {
    loginSessionChecker = setInterval(
    function() {
        ensureSession();
    }, 5000); // watch out for session expiring
};

//---------------------------------------------------------------------------------
// handleBlankScreen - hide the content of screen if user is not logged in as in
//                     black blank screen with login popup otherwise it will be
//                     hidden
// @params  - isLoggedIn
// @returns <none>
//---------------------------------------------------------------------------------
window.handleBlankScreen = function (isLoggedIn) {
    if (isLoggedIn) {
        $("#blank_screen").hide();
    } else {
        $("#blank_screen").show();
        popupLoginDialogBox(); // if it's not logged in then show popup
    }
};

window.popupLoginDialogBox = function () {
    $().w2popup('open', loginPopupOptions);
    var f = w2ui.passwordform;
    if (f) {
        $(f.box).find("#LoginMessage").find(".errors").empty();
        var message = "Your session hass expired. Please login again.";
        $(f.box).find("#LoginMessage").find(".errors").append("<p>" + message + "</p>");
        $(f.box).find("#LoginMessage").removeClass("hidden");
    }
};

//---------------------------------------------------------------------------------
// ensureSession - check to see if we have our session cookie.  If not, we need to
//             authenticate.
//
// @params  <none>
// @returns <none>
//---------------------------------------------------------------------------------
window.ensureSession = function () {
    if (w2popup.status == "open") {return;} // just return now if we're trying to log in

    var c = getCookieValue("air");          // Do we have an "air" cookie?
    if (c === null || c.length < 20) {   // if not...
        deleteCookie("air");
        handleBlankScreen(false);
        return;
    }

    handleBlankScreen(true);        // make sure we can see the interface
    if (app.name.length === 0) {    // if we don't have user info
        getUserInfo();              // then get it
    }
};

//---------------------------------------------------------------------------------
// logoff - sign out of the current session
//
// @params  <none>
// @returns <none>
//---------------------------------------------------------------------------------
window.logoff = function () {
    app.uid = 0;
    app.name = "";
    app.username = "";
    app.imageurl = "";
    $.get('/v1/logoff/')
    .done(function(data, textStatus, jqXHR) {
        if (jqXHR.status == 200) {
            console.log('logoff success, app.uid set to 0.');
            ensureSession();
        } else {
            console.log( '**** YIPES! ****  status on logoff = ' + textStatus);
        }
        deleteCookie("air");  // no matter what, delete the cookie after this call completes
    })
    .fail( function() {
        console.log('Error with /v1/logoff');
        deleteCookie("air");  // no matter what, delete the cookie after this call completes
    });
    handleBlankScreen(false);
};


//---------------------------------------------------------------------------------
// resetPW - reset the user's password and send it to the user's inbox
//
// @params  <none>
// @returns <none>
//---------------------------------------------------------------------------------
window.resetPW = function () {
    var f = w2ui.passwordform;
    var username = f.record.user;
    var params = {username: username };
    var dat = JSON.stringify(params);
    var message = "";
    $.post('/v1/resetpw/', dat, null, "json")
    .done(function(data) {
        if (data.status === "error") {
            $(f.box).find("#LoginMessage").find(".errors").empty();
            message = "Error changing password";
            $(f.box).find("#LoginMessage").find(".errors").append("<p>" + message + "</p>");
            $(f.box).find("#LoginMessage").removeClass("hidden");
            // w2ui.passwordform.error(w2utils.lang(data.message));
            return;
        }
        else if (data.status === "success") {
            $(f.box).find("#LoginMessage").find(".errors").empty();
            message = "An updated password has been emailed to you.";
            $(f.box).find("#LoginMessage").find(".errors").append("<p>" + message + "</p>");
            $(f.box).find("#LoginMessage").removeClass("hidden");
        }
        return;
    })
    .fail(function(/*data*/){
        w2ui.passwordform.error("Reset password failed");
        return;
    });
};
"use strict";
//------------------------------------------------------------------------
//          notesPopUp
//------------------------------------------------------------------------
window.notesPopUp = function () {
    w2popup.open({
        width   : 580,
        height  : 350,
        title   : 'Notes',
        body    : '<div class="w2ui-centered" style="line-height: 1.8">'+
                  '     This is work in progress, not the actual interface.<br><br>'+
                  '     Add Note: <textarea name="comments" type="text" style="width: 385px; height: 80px"></textarea><br>'+
                   '</div>',
        buttons : '<button class="w2ui-btn" onclick="w2popup.close()">Ok</button>'+
                  '<button class="w2ui-btn" onclick="w2popup.close()">Cancel</button>'
    });
};

/*global
    getPmtInitRecord, updatePmtTypeList
*/
"use strict";

//-----------------------------------------------------------------------------
// getPmtInitRecord - get initial record for pmtForm
// @params  BID   - the BID for the business of interest
//          BUD   - the BUD for the business of interest
// @return  the initial record for pmtForm
//-----------------------------------------------------------------------------
window.getPmtInitRecord = function (BID, BUD){
    return {
        recid: 0,
        PMTID: 0,
        BID: BID,
        BUD: BUD,
        Name: '',
        Description: '',
    };
};

//-----------------------------------------------------------------------------
// getPaymentType - searches BUD's Payment Types for PMTID.  If found the
//                  then payment type object is returned, else an empty object is returned.
// @params  BUD   - the BUD for the business of interest
//          PMTID - the payment type id for which we want the name
// @return  the Payment Type (or empty object if not found)
//-----------------------------------------------------------------------------
window.getPaymentType = function (BUD, reqPMTID) {
    var pmt = {};
    if (typeof BUD === "undefined") {
        return pmt;
    }
    app.pmtTypes[BUD].forEach(function(item) {
        if (item.PMTID == reqPMTID) {
            pmt = { id: item.PMTID, text: item.Name };
            return pmt;
        }
    });
    return pmt;
};

//-----------------------------------------------------------------------------
// updatePmtTypeList - get the latest payment types from server with requested
//                     BID and updates app.pmtTypes variable for given BUD
// @params  BID   - the BID for the business of interest
//          BUD   - the BUD for the business of interest
//-----------------------------------------------------------------------------
window.updatePmtTypeList = function (BID, BUD) {
    var payload = {"cmd":"get","selected":[],"limit":100,"offset":0};

    $.ajax({
        type: "POST",
        url: "/v1/pmts/" + BID,
        data: JSON.stringify(payload),
        contentType: "application/json",
        dataType: "json",
        success: function(data) {
            var tempList = [];
            data.records.forEach(function(item) {
                tempList.push({PMTID: item.PMTID, Name: item.Name});
            });
            app.pmtTypes[BUD] = tempList;
        }
    });
};

window.buildPaymentTypeElements = function () {
//------------------------------------------------------------------------
//          payment types Grid
//------------------------------------------------------------------------
$().w2grid({
    name: 'pmtsGrid',
    url: '/v1/pmts',
    multiSelect: false,
    show: {
        toolbar        : true,
        footer         : true,
        toolbarAdd     : true,   // indicates if toolbar add new button is visible
        toolbarDelete  : false,   // indicates if toolbar delete button is visible
        toolbarSave    : false,   // indicates if toolbar save button is visible
        selectColumn    : false,
        expandColumn    : false,
        toolbarEdit     : false,
        toolbarSearch   : false,
        toolbarInput    : false,
        searchAll       : false,
        toolbarReload   : false,
        toolbarColumns  : false,
    },
    columns: [
        {field: 'recid',       hidden: true,  caption: 'recid',       size: '40px',  sortable: true},
        {field: 'PMTID',       hidden: true,  caption: 'PMTID',       size: '150px', sortable: true, style: 'text-align: center'},
        {field: 'BID',         hidden: true,  caption: 'BID',         size: '150px', sortable: true, style: 'text-align: center'},
        {field: 'Name',        hidden: false, caption: 'Name',        size: '150px', sortable: true, style: 'text-align: left'},
        {field: 'Description', hidden: false, caption: 'Description', size: '60%',   sortable: true, style: 'text-align: left'},
    ],
    onLoad: function(event) {
        if (event.xhr.status == 200) {
            if (typeof data == "undefined") {
                return;
            }

            // update payments list for a business
            var x = getCurrentBusiness(),
                BID=parseInt(x.value),
                BUD = getBUDfromBID(BID),
                pmtTypesList = [],
                data = JSON.parse(event.xhr.responseText);

            // prepare list of payment and push it to app.pmtTypes[BUD]
            data.records.forEach(function(pmtRec){
                pmtTypesList.push({PMTID: pmtRec.PMTID, Name: pmtRec.Name});
            });
            app.pmtTypes[BUD] = pmtTypesList;
        }
    },
    onRefresh: function(event) {
        event.onComplete = function() {
            if (app.active_grid == this.name) {
                if (app.new_form_rec) {
                    this.selectNone();
                }
                else{
                    this.select(app.last.grid_sel_recid);
                }
            }
        };
    },
    onClick: function(event) {
        event.onComplete = function() {
            var yes_args = [this, event.recid],
                no_args = [this],
                no_callBack = function(grid) {
                    // we need to get selected previous one selected record, in case of no answer
                    // in form dirty confirmation dialog
                    grid.select(app.last.grid_sel_recid);
                    return false;
                },
                yes_callBack = function(grid, recid) {
                    app.last.grid_sel_recid = parseInt(recid);

                    // keep highlighting current row in any case
                    grid.select(app.last.grid_sel_recid);

                    // get record
                    var rec = grid.get(recid);

                    // popup the dialog form
                    setToForm('pmtForm', '/v1/pmts/' + rec.BID + '/' + rec.PMTID, 400, true);
                };

            // form alert is content has been changed
            form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
        };
    },
    onAdd: function (/*event*/) {
        var yes_args = [this],
            no_callBack = function() { return false; },
            yes_callBack = function(grid) {
                // reset it
                app.last.grid_sel_recid = -1;
                grid.selectNone();

                var x = getCurrentBusiness(),
                    BID=parseInt(x.value),
                    BUD = getBUDfromBID(BID),
                    record = getPmtInitRecord(BID, BUD);
                w2ui.pmtForm.record = record;
                // need to call refresh once before, already refreshin in setToForm
                w2ui.pmtForm.refresh();
                setToForm('pmtForm', '/v1/pmts/' + BID + '/0', 400);
            };

        // warn user if form content has been changed
        form_dirty_alert(yes_callBack, no_callBack, yes_args);
    },
});

    //------------------------------------------------------------------------
    //          payment types form
    //------------------------------------------------------------------------
    $().w2form({
        name: 'pmtForm',
        header: 'Payment Type Detail',
        url: '/v1/pmts',
        style: 'border: 0px; background-color: transparent;display: block;',
        formURL: '/webclient/html/formpmt.html',
        fields: [
            { field: 'recid', type: 'int', required: false, html: { caption: 'recid', page: 0, column: 0 } },
            { field: 'BID', type: 'int', required: false, html: { caption: 'BID', page: 0, column: 0 }, hidden: true },
            { field: 'BUD', type: 'list', options: { items: app.businesses }, required: true, html: { caption: 'BUD', page: 0, column: 0 } },
            { field: 'PMTID', type: 'int', required: false, html: { caption: 'PMTID', page: 0, column: 0 }, hidden: true },
            { field: 'Name', type: 'text', required: true, html: { caption: 'Name', page: 0, column: 0 }, sortable: true },
            { field: 'Description', type: 'text', required: false, html: { caption: 'Description', page: 0, column: 0 }, sortable: true },
            { field: 'LastModTime', type: 'time', required: false, html: { caption: 'LastModTime', page: 0, column: 0 } },
            { field: 'LastModBy', type: 'int', required: false, html: { caption: 'LastModBy', page: 0, column: 0 } },
        ],
        toolbar: {
            items: [
                { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
                { id: 'bt3', type: 'spacer' },
                { id: 'btnClose', type: 'button', icon: 'fas fa-times' },
            ],
            onClick: function(event) {
                switch(event.target) {
                    case 'btnClose':
                        var no_callBack = function() { return false; },
                            yes_callBack = function() {
                                w2ui.toplayout.hide('right',true);
                                w2ui.pmtsGrid.render();
                            };
                        form_dirty_alert(yes_callBack, no_callBack);
                        break;
                }
            }
        },
        onError: function(event) {
            console.log(event);
        },
        actions: {
            saveadd: function() {
                var f = this,
                    grid = w2ui.pmtsGrid,
                    x = getCurrentBusiness(),
                    BID=parseInt(x.value),
                    BUD=getBUDfromBID(BID);

                // clean dirty flag of form
                app.form_is_dirty = false;
                // clear the grid select recid
                app.last.grid_sel_recid  =-1;

                // select none if you're going to add new record
                grid.selectNone();

                f.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }

                    // JUST RENDER THE GRID ONLY
                    grid.render();

                    // update the payment list for this BUD
                    updatePmtTypeList(BID, BUD);

                    // add new empty record and just refresh the form, don't need to do CLEAR form
                    //var y = new Date();
                    var record = getPmtInitRecord(BID, BUD);
                    f.record = record;
                    f.header = "Edit Payment Type (new)"; // have to provide header here, otherwise have to call refresh method twice to get this change in form
                    f.url = '/v1/pmts/' + BID+'/0';
                    f.refresh();
                });
            },
            save: function(/*target, data*/) {
                var f = this,
                    tgrid = w2ui.pmtsGrid,
                    x = getCurrentBusiness(),
                    BID=parseInt(x.value),
                    BUD = getBUDfromBID(BID);

                f.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }

                    // update the payment list for this BUD
                    updatePmtTypeList(BID, BUD);

                    w2ui.toplayout.hide('right',true);
                    tgrid.render();
                });
            },
            delete: function() {

                var form = this,
                    x = getCurrentBusiness(),
                    BID=parseInt(x.value),
                    BUD = getBUDfromBID(BID);

                w2confirm(delete_confirm_options)
                .yes(function() {
                    var tgrid = w2ui.pmtsGrid;
                    var params = {cmd: 'delete', formname: form.name, ID: form.record.PMTID };
                    var dat = JSON.stringify(params);

                    // delete Depository request
                    $.post(form.url, dat, null, "json")
                    .done(function(data) {
                        if (data.status === "error") {
                            form.error(w2utils.lang(data.message));
                            return;
                        }

                        // update the payment list for this BUD
                        updatePmtTypeList(BID, BUD);

                        w2ui.toplayout.hide('right',true);
                        tgrid.remove(app.last.grid_sel_recid);
                        tgrid.render();
                    })
                    .fail(function(/*data*/){
                        form.error("Delete Payment failed.");
                        return;
                    });
                })
                .no(function() {
                    return;
                });
            },
        },
        onRefresh: function(event) {
            event.onComplete = function() {
                var f = this,
                    header = "Edit Payment Type ({0})";

                formRefreshCallBack(f, "PMTID", header);
            };
        },
        onChange: function(event) {
            event.onComplete = function() {
                // formRecDiffer: 1=current record, 2=original record, 3=diff object
                var diff = formRecDiffer(this.record, app.active_form_original, {});
                // if diff == {} then make dirty flag as false, else true
                if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                    app.form_is_dirty = false;
                } else {
                    app.form_is_dirty = true;
                }
            };
        },
        onSubmit: function(target, data) {
            delete data.postData.record.LastModTime;
            delete data.postData.record.LastModBy;
            delete data.postData.record.CreateTS;
            delete data.postData.record.CreateBy;
            // modify form data for server request
            getFormSubmitData(data.postData.record);
        }
    });

};

/* global
    RACompConfig, HideSliderContent, appendNewSlider, ShowSliderContentW2UIComp, displayFormFieldsError,
    loadTargetSection, requiredFieldsFulFilled, InitRAFlowAjax, getRecIDFromTMPASMID, getFeeIndex,
    SaveCompDataAJAX, GetRAFlowCompLocalData, displayActiveComponentError, displayRAPetsGridError, dispalyRAPeopleGridError,
    lockOnGrid, GetApprovalsAJAX, UpdateRAFlowLocalData, displayErrorDot, initBizErrors,
    dispalyRARentablesGridError, dispalyRAVehiclesGridError, dispalyRAParentChildGridError, dispalyRATiePeopleGridError,
    GetCurrentFlowID, ReassignPeopleGridRecords, AssignPetsGridRecords, AssignVehiclesGridRecords, AssignRentableGridRecords,
    GetGridToolbarAddButtonID, HideRAFlowLoader, toggleNonFieldsErrorDisplay, displayErrorSummary, submitActionForm, displayGreenCircle,
    modifyFieldErrorMessage,ChangeRAFlowVersionToolbar, displayRADatesFormError, RAFlowAJAX, cleanFormError, loadRAActionTemplate,
    reloadActionForm, GetRefNoByRAIDFromGrid
*/

"use strict";

// FUNCTION FOR ELEMENT TO GIVE FLASH EFFECT
window.ElementFlash = function(el) {
    $(el).addClass("flash");
    setTimeout(function() {
        $(el).removeClass("flash");
    }, 500);
};

//-----------------------------------------------------------------------------
// RAFlowAJAX - A command ajax caller for all raflow related APIs
//              It will show loader before any request starts and
//              hides the loader when request is served
//-----------------------------------------------------------------------------
window.RAFlowAJAX = function(URL, METHOD, REQDATA, updateLocalData) {

    var DATA = null;
    if (METHOD === "POST") {
        DATA = JSON.stringify(REQDATA);
    }

    return $.ajax({
        url: URL,
        method: METHOD,
        contentType: "application/json",
        dataType: "json",
        data: DATA,
        beforeSend: function() {
            // show the loader
            HideRAFlowLoader(false);
        },
        success: function (data) {
            if (data.status !== "error") {
                if (updateLocalData) {
                    UpdateRAFlowLocalData(data);
                }
            } else {
                alert(data.message);
                console.error(data.message);
            }
        },
        error: function (data) {
            console.error(data);
        },
        complete: function() {
            // hide the loader. GIVE UI SOME TIME TO RENDER
            setTimeout(function() {
                HideRAFlowLoader(true);
            }, 500);
        }
    });
};

//-----------------------------------------------------------------------------
// GetRefNoByRAIDFromGrid returns UserRefNo By RAID from raflowsGrid RECORDS
//-----------------------------------------------------------------------------
window.GetRefNoByRAIDFromGrid = function(RAID) {
    var RefNo = "";
    w2ui.raflowsGrid.records.forEach(function(gridRec) {
        if (gridRec.RAID == RAID) {
            RefNo = gridRec.UserRefNo;
            return;
        }
    });
    return RefNo;
};

//-----------------------------------------------------------------------------
// GetRAIDByRefNoFromGrid returns RAID By UserRefNo from raflowsGrid RECORDS
//-----------------------------------------------------------------------------
window.GetRAIDByRefNoFromGrid = function(RefNo) {
    var RAID = -1;
    w2ui.raflowsGrid.records.forEach(function(gridRec) {
        if (gridRec.UserRefNo == RefNo) {
            RAID = gridRec.RAID;
            return;
        }
    });
    return RAID;
};

//-----------------------------------------------------------------------------
// GetCurrentFlowID returns current flow ID
// which user looking at the flow currently
//-----------------------------------------------------------------------------
window.GetCurrentFlowID = function() {
    if (Object.keys(app.raflow.Flow).length != 0) { // IF NOT BLANK THEN
        return app.raflow.Flow.FlowID;
    }
    return 0;
};

//-----------------------------------------------------------------------------
// NEXT BUTTON CLICK EVENT HANDLER
//-----------------------------------------------------------------------------
$(document).on('click', '#ra-form #next', function () {
    // get the current component (to be previous one)
    var active_comp = $(".ra-form-component:visible");

    // get the target component (to be active one)
    var target_comp = active_comp.next(".ra-form-component");

    // make sure that next component available so we can navigate onto it
    if (target_comp.length === 0) {
        return false;
    }

    // load target section
    loadTargetSection(target_comp.attr("id"), active_comp.attr("id"));
});

//-----------------------------------------------------------------------------
// PREVIOUS BUTTON CLICK EVENT HANDLER
//-----------------------------------------------------------------------------
$(document).on('click', '#ra-form #previous', function () {
    // get the current component (to be previous one)
    var active_comp = $(".ra-form-component:visible");

    // get the target component (to be active one)
    var target_comp = active_comp.prev(".ra-form-component");

    // make sure that previous component available so we can navigate onto it
    if (target_comp.length === 0) {
        return false;
    }

    // load target section
    loadTargetSection(target_comp.attr("id"), active_comp.attr("id"));
});

//-----------------------------------------------------------------------------
// Get Approvals BUTTON CLICK EVENT HANDLER
//-----------------------------------------------------------------------------
$(document).on('click', '#ra-form #save-ra-flow-btn', function () {
    GetApprovalsAJAX().done(function (data) {

        if(data.status !== "success"){
            return;
        }

        app.raflow.validationErrors = {
            dates: data.record.ValidationCheck.errors.dates.total > 0 || data.record.ValidationCheck.nonFieldsErrors.dates.length > 0,
            people: data.record.ValidationCheck.errors.people.total > 0 || data.record.ValidationCheck.nonFieldsErrors.people.length > 0,
            pets: data.record.ValidationCheck.errors.pets.total > 0 || data.record.ValidationCheck.nonFieldsErrors.pets.length > 0,
            vehicles: data.record.ValidationCheck.errors.vehicles.total > 0 || data.record.ValidationCheck.nonFieldsErrors.vehicles.length > 0,
            rentables: data.record.ValidationCheck.errors.rentables.total > 0 || data.record.ValidationCheck.nonFieldsErrors.rentables.length > 0,
            parentchild: data.record.ValidationCheck.errors.parentchild.total > 0 || data.record.ValidationCheck.nonFieldsErrors.parentchild.length > 0,
            tie: data.record.ValidationCheck.errors.tie.people.total > 0 || data.record.ValidationCheck.nonFieldsErrors.tie.length > 0
        };

        displayErrorDot();

        displayActiveComponentError();

        // Display RAActionForm
        if(data.record.ValidationCheck.total === 0){

            if("raActionLayout" in w2ui){
                w2ui.raActionLayout.get('main').content = "";
            }

            loadRAActionTemplate();
            setTimeout(function() {
                reloadActionForm();
            },200);
        }

    });
});

// initBizErrors To initialize bizError local copy for active flow
window.initBizErrors = function(){
    app.raflow.validationErrors = {
        dates: false,
        people: false,
        pets: false,
        vehicles: false,
        rentables: false,
        parentchild: false,
        tie: false
    };
};

// displayErrorDot it show red dot on each section of section contain biz logic error
window.displayErrorDot = function(){
    for (var comp in app.raFlowPartTypes) {
        if (app.raflow.validationErrors[comp]) {
            $("#progressbar #steps-list li[data-target='#" + comp + "'] .error").addClass("error-true");
        } else {
            $("#progressbar #steps-list li[data-target='#" + comp + "'] .error").removeClass("error-true");
        }
    }
};

//-----------------------------------------------------------------------------
// Get Approvals API AJAX CALL
//-----------------------------------------------------------------------------
window.GetApprovalsAJAX = function(){

    var BID = getCurrentBID();
    var FlowID = GetCurrentFlowID();

    var url = "/v1/validate-raflow/" + BID.toString() + "/" + FlowID.toString() + "/";
    var data = {
        "cmd": "get",
        "FlowID": FlowID
    };

    return RAFlowAJAX(url, "POST", data, true);
};

//-----------------------------------------------------------------------------
// FORM WIZARD STEP LINK CLICK EVENT HANDLER
//-----------------------------------------------------------------------------
$(document).on('click', '#ra-form #progressbar #steps-list a', function () {
    var active_comp = $(".ra-form-component:visible");

    // load target form
    var target = $(this).closest("li").attr("data-target");
    target = target.split('#').join("");

    loadTargetSection(target, active_comp.attr("id"));

    // because of 'a' tag, return false
    return false;
});

//-----------------------------------------------------------------------------
// lockOnGrid - Lock grid if checkbox is unchecked(false).
//              Unlock grid if checkbox is checked(true).
//              Lock grid when there is no record in the grid.
//
// @params
//   gridName   = name of the grid
//-----------------------------------------------------------------------------
window.lockOnGrid = function (gridName) {
    var isChecked = $("#" + gridName + "_checkbox")[0].checked;
    var recordsLength = w2ui[gridName].records.length;

    if (!isChecked && recordsLength === 0){
        w2ui[gridName].lock();
    }else{
        w2ui[gridName].unlock();
    }

    if( recordsLength > 0 ){
        $("#" + gridName + "_checkbox")[0].disabled = true;
        $("#" + gridName + "_checkbox")[0].checked = true;
    }
};

//-----------------------------------------------------------------------------
// GetRAFlowCompLocalData - get the flow component data stored locally in app.raflow
//
// @params
//   key    = flow component key
//   FlowID = for which FlowID's component
//-----------------------------------------------------------------------------
window.GetRAFlowCompLocalData = function (compKey) {

    var flowJSON = app.raflow.Flow;
    if (flowJSON.Data) {
        return flowJSON.Data[compKey];
    }

    return null;
};

//-----------------------------------------------------------------------------
// SetRAFlowCompLocalData - set the flow component data locally in app.raflow
//
// @params
//   key    = flow component key
//   data   = data to set in the component
//-----------------------------------------------------------------------------
window.SetRAFlowCompLocalData = function (compKey, data) {

    var flowJSON = app.raflow.Flow;
    if (flowJSON.Data) {
        flowJSON.Data[compKey] = data;
    }
};

//-----------------------------------------------------------------------------
// SaveCompDataAJAX - save component modified data on the server
//
// @params
//   compData   = modified latest component data
//   compID     = component key id
//-----------------------------------------------------------------------------
window.SaveCompDataAJAX = function (compData, compID) {

    // IF RAID VERSION THEN DON"T DO ANYTHING
    if (app.raflow.version === "raid") {
        return;
    }

    var BID = getCurrentBID();
    var FlowID = GetCurrentFlowID();

    var url = "/v1/flow/" + BID.toString() + "/" + FlowID.toString() + "/";
    var data = {
        "cmd": "save",
        "FlowType": app.raflow.name,
        "FlowID": FlowID,
        "FlowPartKey": compID,
        "BID": BID,
        "Data": compData
    };

    return RAFlowAJAX(url, "POST", data, true);
};

//-----------------------------------------------------------------------------
// InitRAFlowAjax - will initiate new rental agreement flow and returns ajax
//                  promise
//-----------------------------------------------------------------------------
window.InitRAFlowAjax = function () {
    var BID = getCurrentBID();

    var url = "/v1/flow/" + BID.toString() + "/0/";
    var data = {
        "cmd": "init",
        "FlowType": app.raflow.name
    };

    return RAFlowAJAX(url, "POST", data, true)
    .done(function(data) {
        if (data.status != "error") {
            // SINCE, WE'VE CREATED A BRAND NEW FLOW
            // RAFLOW VERSION MUST BE "REFNO"
            app.raflow.version = "refno";
        }
    });
};

//-----------------------------------------------------------------------------
// GetRAFlowDataAjax - get the ajax data from the server and returns ajax promise
//
// @params
//   RefNo      = User Ref no of the raflow
//   RAID       = Rental Agreement
//   version    = which version of raflow
//-----------------------------------------------------------------------------
window.GetRAFlowDataAjax = function(UserRefNo, RAID, version) {
    var BID = getCurrentBID();
    var FlowID = GetCurrentFlowID();

    var url = "/v1/flow/" + BID.toString() + "/" + FlowID.toString() + "/";
    var data = {
        "cmd":          "get",
        "UserRefNo":    UserRefNo,
        "RAID":         RAID,
        "Version":      version,
        "FlowType":     app.raflow.name
    };

    return RAFlowAJAX(url, "POST", data, true)
    .done(function(data) {
        if (data.status !== "error") {
            app.raflow.version = version;
        }
    });
};

// HideRAFlowLoader loader to show the progress while fetching data from the server
// which also disabled the controls in toolbar
window.HideRAFlowLoader = function(hide) {
    app.raflow.loading = !hide;
    if (hide) {
        if (w2ui.newraLayout) {
            $(w2ui.newraLayout.get("main").toolbar.box).find("button").prop('disabled', false);
        }
        $("#raflow-container .blocker").hide();
        $("#raactionform .blocker").hide();
    } else {
        if (w2ui.newraLayout) {
            $(w2ui.newraLayout.get("main").toolbar.box).find("button").prop('disabled', true);
        }
        $("#raflow-container .blocker").css("display", "flex");
        $("#raactionform .blocker").css("display", "flex");
        $("#raflow-container .blocker").show();
        $("#raactionform .blocker").show();
    }
};

// UpdateRAFlowLocalData updates the local data from the API response
window.UpdateRAFlowLocalData = function(data, reloadRequired){
    // catch RAID before app.raflow.Flow get updated
    var oldRAID = app.raflow.Flow.ID,
        newRAID = data.record.Flow.ID;

    app.raflow.Flow = data.record.Flow;

    // Update local copy of validation check
    app.raflow.validationCheck = data.record.ValidationCheck;

    // Update local copy of FlowFilledData
    app.raflow.FlowFilledData = data.record.DataFulfilled;

    // if RAID is not same the reload the grid listing
    if (reloadRequired && oldRAID && newRAID && newRAID !== oldRAID) {
        w2ui.raflowsGrid.reload();
    } else {
        // ALSO UPDATE THIS RAFLOW DATA(RAID/USERREFNO) IN THE MAIN GRID
        w2ui.raflowsGrid.records.forEach(function(gridRec) {
            if (gridRec.UserRefNo === app.raflow.Flow.UserRefNo || gridRec.RAID === app.raflow.Flow.ID) {
                if (app.raflow.Flow.UserRefNo) { // IF AVAILABLE THEN ONLY SET
                    gridRec.UserRefNo = app.raflow.Flow.UserRefNo;
                }
                if (app.raflow.Flow.ID) { // IF AVAILABLE THEN ONLY SET
                    gridRec.RAID = app.raflow.Flow.ID;
                }

                // ONCE THE RECORD UPDATE THEN ONLY REFRESH AND BREAK
                w2ui.raflowsGrid.refresh();
                return;
            }
        });
    }

    // UPDATE TOOLBAR
    if(!jQuery.isEmptyObject(app.raflow.Flow)) {
        // get info from local copy and refresh toolbar
        var VERSION = app.raflow.version,
            RAID    = app.raflow.Flow.ID,
            REFNO   = (RAID > 0) ? GetRefNoByRAIDFromGrid(RAID) : app.raflow.Flow.UserRefNo,
            FLAGS   = app.raflow.Flow.Data.meta.RAFLAGS;
        ChangeRAFlowVersionToolbar(VERSION,RAID,REFNO,FLAGS);
    }

    setTimeout(function() {
        // Enable/Disable green check
        displayGreenCircle();

        // Update error summary
        displayActiveComponentError();
    }, 500);
};

// -----------------------------------------------------
// displayGreenCircle
// -----------------------------------------------------
window.displayGreenCircle = function(){

    // Enable/Disable green check for the each section
    var active_comp = $(".ra-form-component:visible");
    var active_comp_id = active_comp.attr("id");

    for (var comp in app.raFlowPartTypes) {
        // if required fields are fulfilled then mark this slide as done

        // Apply green mark when comp is not active and when it fulfilled the requirements
        if (app.raflow.FlowFilledData[comp] && active_comp_id !== comp) {
            $("#progressbar #steps-list li[data-target='#" + comp + "']").addClass("done");
        } else {
            $("#progressbar #steps-list li[data-target='#" + comp + "']").removeClass("done");
        }
    }
};

// load form according to target
window.loadTargetSection = function (target, previousActiveCompID) {

    if (!target) {
        alert("no target provided to load target screen in the raflow");
        return false;
    }

    if (previousActiveCompID && previousActiveCompID !== target) {
        switch (previousActiveCompID) {
            case "dates":
                w2ui.RADatesForm.actions.reset();
                break;
            case "people":
                w2ui.RAPeopleGrid.clear();
                w2ui.RAPeopleSearchForm.actions.reset();
                break;
            case "pets":
                w2ui.RAPetsGrid.clear();
                w2ui.RAPetForm.actions.reset();
                break;
            case "vehicles":
                w2ui.RAVehiclesGrid.clear();
                w2ui.RAVehicleForm.actions.reset();
                break;
            case "rentables":
                w2ui.RARentablesGrid.clear();
                w2ui.RARentableFeesGrid.clear();
                w2ui.RARentableFeeForm.actions.reset();
                break;
            case "parentchild":
                w2ui.RAParentChildGrid.clear();
                break;
            case "tie":
                w2ui.RATiePeopleGrid.clear();
                break;
            case "final":
                w2ui.RAFinalRentablesFeesGrid.clear();
                w2ui.RAFinalPetsFeesGrid.clear();
                w2ui.RAFinalVehiclesFeesGrid.clear();
                break;
            default:
                alert("invalid active comp: " + previousActiveCompID);
                return;
        }

        // hide active component
        $("#progressbar #steps-list li[data-target='#" + previousActiveCompID + "']").removeClass("active");
        $(".ra-form-component#" + previousActiveCompID).hide();
    }

    // show target component
    $("#progressbar #steps-list li[data-target='#" + target + "']").removeClass("done").addClass("active");
    $(".ra-form-component#" + target).show();

    // display target comp fields summary
    displayErrorSummary(target);

    // display green circle based on datafulfilled flag
    displayGreenCircle();

    // hide previous navigation button if the target is in first section
    if ($(".ra-form-component#" + target).is($(".ra-form-component").first())) {
        $("#ra-form footer button#previous").prop("disabled", true);
    } else {
        $("#ra-form footer button#previous").prop("disabled", false);
    }

    // hide next navigation button if the target is in last section
    if ($(".ra-form-component#" + target).is($(".ra-form-component").last())) {
        $("#ra-form footer button#next").prop("disabled", true);
    } else {
        $("#ra-form footer button#next").prop("disabled", false);
    }

    // load the content in the component using loader function
    var targetLoader = RACompConfig[target].loader;
    if (targetLoader.length > 0) {
        window[targetLoader]();
    } else {
        console.error("unknown target from nav li: ", target);
        return false;
    }
};

//-----------------------------------------------------------------------------
// ShowSliderContentW2UIComp - renders the w2ui component into slider-content
//                             and apply the given width to it
//
// @params
//   w2uiComp = w2ui component
//   width    = width to apply to slider content div
//   sliderID = slider ID (as in stack fashion)
//-----------------------------------------------------------------------------
window.ShowSliderContentW2UIComp = function(w2uiComp, width, sliderID) {
    if (!sliderID) {
        sliderID = 1;
    }

    $("#raflow-container .slider[data-slider-id="+sliderID+"]").show();
    $("#raflow-container .slider[data-slider-id="+sliderID+"] .slider-content").width(width);
    $("#raflow-container .slider[data-slider-id="+sliderID+"] .slider-content").w2render(w2uiComp);
};

//-----------------------------------------------------------------------------
// HideAllSliderContent - hides all slider and empty the content inside
//                        slider-content div
//-----------------------------------------------------------------------------
window.HideAllSliderContent = function() {
    $("#raflow-container .slider").hide();
    $("#raflow-container .slider .slider-content").width(0);
    $("#raflow-container .slider .slider-content").empty();
};

//-----------------------------------------------------------------------------
// HideSliderContent - hide the slider and empty the content inside
//                     slider-content div
//
// @params
//      sliderID = slider ID (as in stack fashion)
//-----------------------------------------------------------------------------
window.HideSliderContent = function(sliderID) {
    if (!sliderID) {
        sliderID = 1;
    }

    $("#raflow-container .slider[data-slider-id="+sliderID+"]").hide();
    $("#raflow-container .slider[data-slider-id="+sliderID+"] .slider-content").width(0);
    $("#raflow-container .slider[data-slider-id="+sliderID+"] .slider-content").empty();
};

//-----------------------------------------------------------------------------
// appendNewSlider - append new right slider in the DOM dynamically
//-----------------------------------------------------------------------------
window.appendNewSlider = function(sliderID) {
    // if sliderID exists then don't append
    if ($("#raflow-container").find("div[data-slider-id="+ sliderID +"]").length > 0) {
        return;
    }

    var slidersLength = $("#raflow-container").find(".slider").length;
    var recentAddedSlider = $("#raflow-container")
        .find("div[data-slider-id="+ slidersLength +"]");

    var newSlider = recentAddedSlider.clone();
    newSlider.attr("data-slider-id", slidersLength + 1);
    recentAddedSlider.after(newSlider);
    newSlider.css("z-index", parseInt(recentAddedSlider.css("z-index")) + 10);
    newSlider.find(".slider-content").empty().width(0);
};

//-----------------------------------------------------------------------------
// displayActiveComponentError - it displays/highlight error for active component
//-----------------------------------------------------------------------------
window.displayActiveComponentError = function () {
    // get the current component (to be previous one)
    var active_comp = $(".ra-form-component:visible");

    // get active component id
    var active_comp_id = active_comp.attr("id");

    switch (active_comp_id) {
        case "dates":
            displayRADatesFormError();
            break;
        case "people":
            ReassignPeopleGridRecords();
            break;
        case "pets":
            AssignPetsGridRecords();
            break;
        case "vehicles":
            AssignVehiclesGridRecords();
            break;
        case "rentables":
            AssignRentableGridRecords();
            break;
        case "parentchild":
            w2ui.RAParentChildGrid.refresh();
            dispalyRAParentChildGridError();
            break;
        case "tie":
            w2ui.RATiePeopleGrid.refresh();
            dispalyRATiePeopleGridError();
            break;
        case "final":
            break;
        default:
            alert("invalid active comp: " + active_comp_id);
            return;
    }

    displayErrorSummary(active_comp_id);
};

// getRecIDFromTMPASMID It returns recid of grid record which matches TMPASMID
window.getRecIDFromTMPASMID = function(grid, TMPASMID){
    var recid;
    for (var i = 0; i < grid.records.length; i++) {
        if (grid.records[i].TMPASMID === TMPASMID) {
            recid = grid.records[i].recid;
        }
    }
    return recid;
};

// displayFormFieldsError It display form fields error  for record
window.displayFormFieldsError = function(index, records, formName){

    cleanFormError();

    // Iterate through fields with errors
    for(var key in records[index].errors){
        var field = $("[name=" + formName + "] input#" + key);
        var error = records[index].errors[key].join(", ");

        // Customize error for list input fields or if any other fields require
        var modifiedError = modifyFieldErrorMessage(key);
        if(modifiedError !== ""){
            error = modifiedError;
        }

        field.css("border-color", "red");
        field.after("<small class='error'>" + error + "</small>");
    }
};

// ---------------------------------------------------------------------
// modifyFieldErrorMessage - It modifies error message for key field
// ---------------------------------------------------------------------
window.modifyFieldErrorMessage = function(key){
    var error = "";
    switch (key){
        case "SourceSLSID":
            error = "please select a source";
            break;
        case "ARID":
            error = "please select an account rule";
            break;
        default:
            error = "";
    }
    return error;
};

// getFeeIndex it return an index of fee which have TMPASMID
window.getFeeIndex = function (TMPASMID, fees) {

    var index = -1;

    for(var i = 0; i < fees.length; i++){
        // If TMPASMID doesn't match iterate for next element
        if(fees[i].TMPASMID === TMPASMID){
            index = i;
            break;
        }
    }

    return index;
};

//-----------------------------------------------------------------------
// EnableDisableRAFlowVersionInputs
//      enable/disable the inputs of form based on
//      the current version of raflow.
//      If "raid" then it'll disable else enable the inputs.
//
// @params
//   form       = w2ui form component
//-----------------------------------------------------------------------
window.EnableDisableRAFlowVersionInputs = function(form) {
    if (app.raflow.version === "raid") { // DISABLE ALL INPUTS & BUTTONS
        $(form.box).find("input,textarea").prop("disabled", true);
        $(form.box).find("button[class=w2ui-btn]").hide();
        $(form.box).find("div[class=w2ui-buttons]").hide();
   } else if (app.raflow.version === "refno") { // ENABLE ALL INPUTS & BUTTONS
        $(form.box).find("input,textarea").not("input[name=BUD]").prop("disabled", false);
        $(form.box).find("button[class=w2ui-btn]").show();
        $(form.box).find("div[class=w2ui-buttons]").show();
   }
};

//-----------------------------------------------------------------------
// EnableDisableRAFlowVersionGrid
//      lock/unlock the entire grid base on the current version of raflow.
//      If "raid" then it'll disable else enable the inputs.
//
// @params
//   grid       = w2ui grid component
//-----------------------------------------------------------------------
window.EnableDisableRAFlowVersionGrid = function(grid) {
    if (app.raflow.version === "raid") { // DISABLE ALL INPUTS & BUTTONS
        grid.lock();
   } else if (app.raflow.version === "refno") { // ENABLE ALL INPUTS & BUTTONS
        grid.unlock();
   }
};

// GetGridToolbarAddButtonID to get the DOM ID of add button in grid by gridName
window.GetGridToolbarAddButtonID = function(gridName) {
    return "tb_" + gridName +"_toolbar_item_w2ui-add";
};

// ShowHideGridToolbarAddButton shows/hides add button based on raflow version
window.ShowHideGridToolbarAddButton = function(gridName) {
    var addBtnID = GetGridToolbarAddButtonID(gridName);
    if (app.raflow.version === "raid") {
        $("#"+addBtnID).hide();
    } else if (app.raflow.version === "refno") {
        $("#"+addBtnID).show();
    }
};

//-----------------------------------------------------------------------------
// DeleteRAFlowAJAX - will request to remove ref.no version raflow
//-----------------------------------------------------------------------------
window.DeleteRAFlowAJAX = function (UserRefNo) {
    if (!UserRefNo) {
        alert("no such flow exists to delete");
        return;
    }

    var BID = getCurrentBID();
    var FlowID = GetCurrentFlowID();

    var url = "/v1/flow/" + BID.toString() + "/" + FlowID.toString() + "/";
    var data= {
        "cmd": "delete",
        "UserRefNo": UserRefNo
    };

    return RAFlowAJAX(url, "POST", data, false);
};

//----------------------------------------------------------------------------------
// It exapand/collapse non-field error summary section
//----------------------------------------------------------------------------------
$(document).on("click", "i#non-field-expandable-errors", function(event) {
    var target = event.target;

    var content = $("#non-fields-error-content");
    if (content[0].style.display === "block") {
        content[0].style.display = "none";
        $(target).removeClass("fa-caret-up").addClass("fa-caret-down");
    } else {
        content[0].style.display = "block";
        $(target).removeClass("fa-caret-down").addClass("fa-caret-up");
    }
});

//-----------------------------------------------------------------------------
// displayErrorSummary - It display error summary for active section.
//-----------------------------------------------------------------------------
window.displayErrorSummary = function (comp) {

    var error_summary_sel = "#error-summary";
    var non_field_error_dd_sel = "#error-info #non-field-expandable-errors";
    var non_field_error_content_sel = "#non-fields-error-content";


    if(app.raflow.validationErrors[comp]){
        // Display error summary
        $(error_summary_sel).css('display', 'block');

        var form_errors_count;
        if(comp !== "tie"){
            form_errors_count = app.raflow.validationCheck.errors[comp].total;
        }else{
            form_errors_count = app.raflow.validationCheck.errors[comp].people.total;
        }
        var non_fields_errors_count = app.raflow.validationCheck.nonFieldsErrors[comp].length;

        // Update error count for form error and non fields error
        $("#field-errors-count").html(form_errors_count);
        $("#non-field-errors-count").html(non_fields_errors_count);

        // If there are any non fields errors than display dropdown icon. Via it can expand non-fields-error summary
        if(non_fields_errors_count > 0){
            $(non_field_error_dd_sel).css('display', 'inline');

            var errorString = "";
            for(var i = 0; i < app.raflow.validationCheck.nonFieldsErrors[comp].length; i++){
                console.debug(app.raflow.validationCheck.nonFieldsErrors[comp][i]);
                errorString += "<li>" + app.raflow.validationCheck.nonFieldsErrors[comp][i] + "</li>";
            }

            // non fields error content
            $(non_field_error_content_sel).css('display', 'block');
            $(non_field_error_content_sel).empty();
            $(non_field_error_content_sel).append("<ul>" + errorString + "</ul>");
        }else{
            $(non_field_error_dd_sel).css('display', 'none');
            $(non_field_error_content_sel).css('display', 'none');
            $(non_field_error_content_sel).empty();
        }

    }
    else{
        // Hide error summary
        $(error_summary_sel).css('display', 'none');
    }
};

// cleanFormError It remove error small tag of current opened form if it have any
window.cleanFormError = function () {
    // Clean error
    $(".w2ui-form-box small.error").remove();
};

/* global
    RACompConfig, SliderContentDivLength
*/
"use strict";

// right side slider content div length
window.SliderContentDivLength = 400;

// RACompConfig for each section
window.RACompConfig = {
    "dates": {
        loader: "loadRADatesForm",
        w2uiComp: "RADatesForm",
        sliderWidth: 0
    },
    "people": {
        loader: "loadRAPeopleGrid",
        w2uiComp: "RAPeopleGrid",
        sliderWidth: 600
    },
    "pets": {
        loader: "loadRAPetsGrid",
        w2uiComp: "RAPetsGrid",
        sliderWidth: 850
    },
    "vehicles": {
        loader: "loadRAVehiclesGrid",
        w2uiComp: "RAVehiclesGrid",
        sliderWidth: 850
    },
    "rentables": {
        loader: "loadRARentablesGrid",
        w2uiComp: "RARentablesGrid",
        sliderWidth: 850
    },
    "parentchild": {
        loader: "loadRAPeopleChildSection",
        w2uiComp: "RAParentChildGrid",
        sliderWidth: 0
    },
    "tie": {
        loader: "loadRATieSection",
        w2uiComp: "",
        sliderWidth: 0
    },
    "final": {
        loader: "loadFinalSection",
        w2uiComp: "",
        sliderWidth: 0
    }
};

/*
common things for fees strcture!
*/

/* global
    w2utils, SetFormRecordFromData, GetFeeFormInitRecord,
    GetPetFeeLocalData, GetVehicleFeeLocalData, GetRentableFeeLocalData,
    SetDataFromFormRecord, SetPetFeeLocalData, SetVehicleFeeLocalData,
    SetRentableFeeLocalData, HideSliderContent, GetRentableLocalData,
    GetFeeAccountRules, EnableDisableRAFlowVersionInputs
*/

"use strict";

// -------------------------------------------------------------------------------
// GetFeeFormInitRecord - returns a new object record for fee form
// -------------------------------------------------------------------------------
window.GetFeeFormInitRecord = function () {

    // for start and stop date
    var t = new Date(),
        nyd = new Date(new Date().setFullYear(new Date().getFullYear() + 1));

    // return new object
    return {
        recid:              0,
        TMPASMID:           0, // UNIQUE TEMPORARY ID
        ASMID:              0, // 0 MEANS NO ASSESSMENT
        ARID:               0,
        ARName:             "",
        ContractAmount:     0.0,
        RentCycle:          0,
        RentCycleText:      "",
        ProrationCycle:     0,
        ProrationCycleText: "",
        Start:              w2uiDateControlString(t),
        Stop:               w2uiDateControlString(nyd),
        AtSigningPreTax:    0.0,
        SalesTax:           0.0,
        // SalesTaxAmt:        0.0, // FUTURE RELEASE
        TransOccTax:        0.0,
        // TransOccAmt:        0.0, // FUTURE RELEASE,
        Comment:            ""
    };
};

// -------------------------------------------------------------------------------
// GetFeeFormFields - returns a clone of field definition list
//                     required by any fees form
// -------------------------------------------------------------------------------
window.GetFeeFormFields = function() {
    var fields = [
        {name: 'recid',                 type: 'int',    required: false,    html: {page: 0, column: 0}},
        {name: 'TMPASMID',              type: 'int',    required: true,     html: {page: 0, column: 0}},
        {name: 'ASMID',                 type: 'int',    required: true,     html: {page: 0, column: 0}},
        {name: 'ARID',                  type: 'list',   required: true,     html: {page: 0, column: 0}, options: {items: [], selected: {}}},
        {name: 'ARName',                type: 'text',   required: true,     html: {page: 0, column: 0}},
        {name: 'ContractAmount',        type: 'money',  required: true,     html: {page: 0, column: 0}},
        {name: 'RentCycle',             type: 'int',    required: true,     html: {page: 0, column: 0}},
        {name: 'RentCycleText',         type: 'list',   required: false,    html: {page: 0, column: 0}, options: {items: app.cycleFreq}},
        {name: 'ProrationCycle',        type: 'int',    required: true,     html: {page: 0, column: 0}},
        {name: 'ProrationCycleText',    type: 'list',   required: false,    html: {page: 0, column: 0}, options: {items: app.cycleFreq}},
        {name: 'Start',                 type: 'date',   required: true,     html: {page: 0, column: 0}},
        {name: 'Stop',                  type: 'date',   required: true,     html: {page: 0, column: 0}},
        {name: 'AtSigningPreTax',       type: 'money',  required: true,     html: {page: 0, column: 0}},
        {name: 'SalesTax',              type: 'money',  required: true,     html: {page: 0, column: 0}},
        // {name: 'SalesTaxAmt',           type: 'money',  required: true,     html: {page: 0, column: 0}}, // FUTURE RELEASE
        {name: 'TransOccTax',           type: 'money',  required: true,     html: {page: 0, column: 0}},
        // {name: 'TransOccAmt',           type: 'money',  required: true,     html: {page: 0, column: 0}}, // FUTURE RELEASE
        {name: 'Comment',               type: 'text',   required: false,    html: {page: 0, column: 0}}
    ];

    // RETURN the clone
    return $.extend(true, [], fields);
};

// -------------------------------------------------------------------------------
// GetFeeGridColumns - returns a clone of column definition list
//                     required by any fees grid
// -------------------------------------------------------------------------------
window.GetFeeGridColumns = function(feesGrid) {

    var haveErrorCol;
    switch (feesGrid){
        case 'RAPetFeesGrid':
            haveErrorCol = {
                field: 'haveError',
                size: '30px',
                hidden: false,
                render: function (record) {
                    var haveError = false;
                    if (app.raflow.validationErrors.pets) {
                        var pets = app.raflow.validationCheck.errors.pets.errors;
                        for (var i = 0; i < pets.length; i++) {
                            for(var j = 0; j < pets[i].fees.errors.length; j++){
                                if(pets[i].fees.errors[j].TMPASMID === record.TMPASMID){
                                    haveError = true;
                                    break;
                                }
                            }
                        }
                    }
                    if (haveError) {
                        return '<i class="fas fa-exclamation-triangle" title="error"></i>';
                    } else {
                        return "";
                    }
                }
            };
            break;
        case 'RAVehicleFeesGrid':
            haveErrorCol = {
                field: 'haveError',
                size: '30px',
                hidden: false,
                render: function (record) {
                    var haveError = false;
                    if (app.raflow.validationErrors.vehicles) {
                        var vehicles = app.raflow.validationCheck.errors.vehicles.errors;
                        for (var i = 0; i < vehicles.length; i++) {
                            for(var j = 0; j < vehicles[i].fees.errors.length; j++){
                                if(vehicles[i].fees.errors[j].TMPASMID === record.TMPASMID){
                                    haveError = true;
                                    break;
                                }
                            }
                        }
                    }
                    if (haveError) {
                        return '<i class="fas fa-exclamation-triangle" title="error"></i>';
                    } else {
                        return "";
                    }
                }
            };
            break;
        case 'RARentableFeesGrid':
            haveErrorCol = {
                field: 'haveError',
                size: '30px',
                hidden: false,
                render: function (record) {
                    var haveError = false;
                    if (app.raflow.validationErrors.rentables) {
                        var rentables = app.raflow.validationCheck.errors.rentables.errors;
                        for (var i = 0; i < rentables.length; i++) {
                            for(var j = 0; j < rentables[i].fees.errors.length; j++){
                                if(rentables[i].fees.errors[j].TMPASMID === record.TMPASMID){
                                    haveError = true;
                                    break;
                                }
                            }
                        }
                    }
                    if (haveError) {
                        return '<i class="fas fa-exclamation-triangle" title="error"></i>';
                    } else {
                        return "";
                    }
                }
            };
            break;
    }

    var columns = [
        {
            field: 'recid',
            caption: 'recid',
            hidden: true
        },
        {
            field: 'TMPASMID',
            caption: 'TMPASMID',
            hidden: true
        },
        {
            field: 'ARID',
            caption: 'ARID',
            hidden: true
        },
        {
            field: 'ASMID',
            caption: 'ASMID',
            hidden: true
        },
        {
            field: 'ARName',
            caption: 'Account Rule',
            size: '100%'
        },
        {
            field: 'ContractAmount',
            caption: 'Contract<br>Amount',
            size: '80px',
            render: 'money'
        },
        {
            field: 'RentCycleText',
            caption: 'Rent<br>Cycle',
            size: '80px',
            render: function (record/*, index, col_index*/) {
                var text = '';
                if (record) {
                    app.cycleFreq.forEach(function(itemText, itemIndex) {
                        if (record.RentCycle == itemIndex) {
                            text = itemText;
                            return false;
                        }
                    });
                }
                return text;
            },
        },
        {
            field: 'RentCycle',
            caption: 'Rent Cycle Index',
            hidden: true
        },
        {
            field: 'ProrationCycleText',
            caption: 'Proration<br>Cycle',
            size: '80px',
            render: function (record/*, index, col_index*/) {
                var text = '';
                if (record) {
                    app.cycleFreq.forEach(function(itemText, itemIndex) {
                        if (record.ProrationCycle == itemIndex) {
                            text = itemText;
                            return false;
                        }
                    });
                }
                return text;
            },
        },
        {
            field: 'ProrationCycle',
            caption: 'Proration Cycle Index',
            hidden: true
        },
        {
            field: 'Start',
            caption: 'Start Date',
            hidden: true
        },
        {
            field: 'Stop',
            caption: 'Stop Date',
            hidden: true
        },
        {
            field: 'FeePeriod',
            caption: 'Fee Period',
            size: '80px',
            render: function(record) {
                var html = "";
                if (record) {
                    if (record.RentCycle === 0) {
                        return record.Start; // only show 1 date for non-recur
                    }
                    if (record.Start && record.Stop) {
                        html = record.Start + " - <br>" + record.Stop;
                    }
                }
                return html;
            }
        },
        {
            field: 'AtSigningPreTax',
            caption: 'At Signing<br>(pre-tax)',
            size: '80px',
            render: 'money'
        },
        {
            field: 'SalesTax',
            caption: 'Sales Tax',
            size: '80px',
            render: 'money'
        },
        /*{ // FUTURE RELEASE
            field: 'SalesTaxAmt',
            caption: 'Sales Tax Amt',
            size: '80px',
            render: 'money'
        },*/
        {
            field: 'TransOccTax',
            caption: 'Trans Occ Tax',
            size: '80px',
            render: 'money'
        },/*,
        { // FUTURE RELEASE
            field: 'TransOccAmt',
            caption: 'Trans Occ Amt',
            size: '80px',
            render: 'money'
        },*/
        {
            field: 'Comment',
            caption: 'Comment',
            hidden: true
        },
        {
            field: 'RowTotal',
            caption: 'Grand Total',
            size: '80px',
            style: 'text-align: right',
            render: function(record) {
                var html = "";
                var total = 0.0;
                if (record) {
                    if (record.AtSigningPreTax) {
                        total += record.AtSigningPreTax;
                    }
                    if (record.SalesTax) {
                        total += record.SalesTax;
                    }
                    if (record.TransOccTax) {
                        total += record.TransOccTax;
                    }

                    // make it bold
                    html = "<strong>" + w2utils.formatters.money(total) + "</strong>";
                }
                return html;
            }
        }
    ];

    // PREPEND ERROR COLUMN
    columns.unshift(haveErrorCol);

    // RETURN the clone
    return $.extend(true, [], columns);
};

// -------------------------------------------------------------------------------
// GetFeeFormToolbar - toolbar configured object for all fee form
// -------------------------------------------------------------------------------
window.GetFeeFormToolbar = function() {
    return {
        items: [
            { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
            { id: 'bt3', type: 'spacer' },
            { id: 'btnClose', type: 'button', icon: 'fas fa-times'}
        ],
        onClick: function (event) {
            switch (event.target){
                case 'btnClose':
                    HideSliderContent(2);
                    break;
            }
        }
    };
};

// -------------------------------------------------------------------------------
// FeeFormOnRefreshHandler - handle the action on fee form refresh event
// -------------------------------------------------------------------------------
window.FeeFormOnRefreshHandler = function(feeForm) {

    // -- ARID -- //
    var ARIDSel = {};
    feeForm.get("ARID").options.items.forEach(function(item) {
        if (item.id == feeForm.record.ARID) {
            ARIDSel = {id: item.id, text: item.text};
            return true;
        }
    });
    feeForm.get("ARID").options.selected = ARIDSel;

    // -- RENT CYCLE -- //
    var selectedRentCycle = app.cycleFreq[feeForm.record.RentCycle];
    var RentCycleTextSel = { id: selectedRentCycle, text: selectedRentCycle };
    feeForm.get("RentCycleText").options.selected = RentCycleTextSel;
    feeForm.record.RentCycleText = RentCycleTextSel;

    // -- PRORATION CYCLE -- //
    if (feeForm.record.RentCycle === 0) { // IF ZERO THEN RESET
        feeForm.record.ProrationCycle = 0;
    }
    var selectedProrationCycle = app.cycleFreq[feeForm.record.ProrationCycle];
    var ProrationCycleTextSel = { id: selectedProrationCycle, text: selectedProrationCycle };
    feeForm.get("ProrationCycleText").options.selected = ProrationCycleTextSel;
    feeForm.record.ProrationCycleText = ProrationCycleTextSel;

    setTimeout(function() {

        // FREEZE THE INPUTS IF VERSION IS RAID
        EnableDisableRAFlowVersionInputs(feeForm);

        // ONLY APPLICABLE WHEN FLOW IS IN EDIT MODE
        if (app.raflow.version === "refno") {

            // -- START & STOP DATES -- //
            // if RentCycle is 0=nonrecur then disable Stop date field
            // and value should be same as Start
            if (feeForm.record.RentCycle === 0) {
                $(feeForm.box).find("input[name=Stop]").prop("disabled", true);
                $(feeForm.box).find("input[name=Stop]").w2field().set(feeForm.record.Start);
                feeForm.record.Stop = feeForm.record.Start;
            } else {
                $(feeForm.box).find("input[name=Stop]").prop("disabled", false);
            }

            // HIDE DELETE BUTTON IF RECORD IS NEW
            if (feeForm.record.TMPASMID === 0) {
                $(feeForm.box).find("div[class=w2ui-buttons] button[name=delete]").hide();
            } else {
                $(feeForm.box).find("div[class=w2ui-buttons] button[name=delete]").show();
            }
        }

    }, 200);
};

// -------------------------------------------------------------------------------
// FeeFormOnChangeHandler - handle the action on fee form change event
// -------------------------------------------------------------------------------
window.FeeFormOnChangeHandler = function(feeForm, field, newValue) {
    // if RAID version then don't do anything
    if (app.raflow.version == "raid") {
        return;
    }

    switch(field) {
    case "RentCycleText":
        if (newValue) {
            app.cycleFreq.forEach(function(itemText, itemIndex) {
                if (newValue.text == itemText) {
                    feeForm.record.RentCycle = itemIndex;
                    return false;
                }
            });
            feeForm.refresh();
            feeForm.refresh();
        }
        break;
    case "ProrationCycleText":
        if (newValue) {
            app.cycleFreq.forEach(function(itemText, itemIndex) {
                if (newValue.text == itemText) {
                    feeForm.record.ProrationCycle = itemIndex;
                    return false;
                }
            });
            feeForm.refresh();
            feeForm.refresh();
        }
        break;
    case "ARID":
        if (newValue) {
            var BID = getCurrentBID();

            // find account rules based on selected new value
            var arItem = {};
            app.raflow.arList[BID].forEach(function(item) {
                if (newValue.id == item.ARID) {
                    arItem = item;
                    return false;
                }
            });

            // update form record based on selected account rules item
            feeForm.record.ContractAmount = arItem.DefaultAmount;
            feeForm.record.ARName = newValue.text;

            // check for non-recurring cycle flag
            if (arItem.FLAGS&0x40 != 0) { // then it is set to non-recur flag
                // It indicates that rule follow non recur charge
                // feeForm.record.RentCycleText = app.cycleFreq[0];
                feeForm.record.RentCycle = 0;
                feeForm.record.ProrationCycle = 0;
            } else {
                var RID = app.raflow.last.RID,
                    localRData = GetRentableLocalData(RID);

                feeForm.record.RentCycle = localRData.RentCycle;
                feeForm.record.ProrationCycle = localRData.ProrationCycle;
            }

            // select rentcycle as well
            var selectedRentCycle = app.cycleFreq[feeForm.record.RentCycle];
            var rentCycleW2UISel = { id: selectedRentCycle, text: selectedRentCycle };
            feeForm.get("RentCycleText").options.selected = rentCycleW2UISel;
            feeForm.record.RentCycleText = rentCycleW2UISel;

            // select prorationcycle as well
            var selectedProrationCycle = app.cycleFreq[feeForm.record.ProrationCycle];
            var prorationCycleW2UISel = { id: selectedProrationCycle, text: selectedProrationCycle };
            feeForm.get("ProrationCycleText").options.selected = prorationCycleW2UISel;
            feeForm.record.ProrationCycleText = prorationCycleW2UISel;

            feeForm.refresh();

            // When RentCycle is Norecur then disable the RentCycle list field.
            var isDisabled = feeForm.record.RentCycleText.text === app.cycleFreq[0];
            $(feeForm.box).find("#RentCycleText").prop("disabled", isDisabled);
            $(feeForm.box).find("#ProrationCycleText").prop("disabled", isDisabled);

            feeForm.refresh();
        }
        break;
    }
};

// -------------------------------------------------------------------------------
// SetFeeFormRecordFromFeeData - sets form record from given data
//
// It sets data from local raflow only for fields which are defined in form
// definition
// -------------------------------------------------------------------------------
window.SetFeeFormRecordFromFeeData = function(TMPID, TMPASMID, flowPart) {
    var form,
        data = {}; // for referenced typed variable --  undefined will not work

    switch(flowPart) {
        case "pets":
            form = w2ui.RAPetFeeForm;
            if (TMPASMID === 0) {
                data = GetFeeFormInitRecord();
            } else {
                data = GetPetFeeLocalData(TMPID, TMPASMID);
            }
            SetFormRecordFromData(form, data);
            break;
        case "vehicles":
            form = w2ui.RAVehicleFeeForm;
            if (TMPASMID === 0) {
                data = GetFeeFormInitRecord();
            } else {
                data = GetVehicleFeeLocalData(TMPID, TMPASMID);
            }
            SetFormRecordFromData(form, data);
            break;
        case "rentables":
            form = w2ui.RARentableFeeForm;
            if (TMPASMID === 0) {
                data = GetFeeFormInitRecord();
            } else {
                data = GetRentableFeeLocalData(TMPID, TMPASMID);
            }
            SetFormRecordFromData(form, data);
            break;
        default:
            return false;
    }
};

// -------------------------------------------------------------------------------
// SetFeeDataFromFeeFormRecord - sets form record from given data
//
// It sets data from local raflow only for fields which are defined in form
// definition
// -------------------------------------------------------------------------------
window.SetFeeDataFromFeeFormRecord = function(TMPID, TMPASMID, flowPart) {
    var form,
        data = {};

    switch(flowPart) {
        case "pets":
            form = w2ui.RAPetFeeForm;
            if (TMPASMID !== 0) {
                data = GetPetFeeLocalData(TMPID, TMPASMID);
            }

            // set modified data from form record
            data = SetDataFromFormRecord(TMPASMID, form, data);

            // set data locally
            SetPetFeeLocalData(TMPID, TMPASMID, data);

            break;
        case "vehicles":
            form = w2ui.RAVehicleFeeForm;
            if (TMPASMID !== 0) {
                data = GetVehicleFeeLocalData(TMPID, TMPASMID);
            }

            // set modified data from form record
            data = SetDataFromFormRecord(TMPASMID, form, data);

            // set data locally
            SetVehicleFeeLocalData(TMPID, TMPASMID, data);

            break;
        case "rentables":
            form = w2ui.RARentableFeeForm;
            if (TMPASMID !== 0) {
                data = GetRentableFeeLocalData(TMPID, TMPASMID);
            }

            // set modified data from form record
            data = SetDataFromFormRecord(TMPASMID, form, data);

            // set data locally
            SetRentableFeeLocalData(TMPID, TMPASMID, data);

            break;
        default:
            return false;
    }
};

// -------------------------------------------------------------------------------
// GetAllARForFeeForm - pull down all account rules with amount, flags info
// -------------------------------------------------------------------------------
window.GetAllARForFeeForm = function(BID) {
    var data = {"type": "ALL"};
    return $.ajax({
        url: '/v1/arslist/' + BID.toString() + "/",
        method: "POST",
        data: JSON.stringify(data),
        contentType: "application/json",
        dataType: "json"
    })
    .done(function(data) {
        if (data.status !== "error") {
            app.raflow.arList[BID] = data.records || [];
        }
    });
};

// -----------------------------------------------------------------------------
// GetFeeAccountRulesW2UIListItems - returns w2ui item list from received
//                                   filtered account rules based on flow part
// -----------------------------------------------------------------------------
window.GetFeeAccountRulesW2UIListItems = function(BID, flowPart) {
    var w2uiListItems = [{id: 0, text: " -- select account rule -- " }];

    // get filtered account rules
    var filteredList = GetFeeAccountRules(BID, flowPart);

    // prepare w2ui item for AR list and push
    filteredList.forEach(function(arItem) {
        w2uiListItems.push({id: arItem.ARID, text: arItem.Name});
    });

    return w2uiListItems;
};

// -----------------------------------------------------------------------------
// GetFeeAccountRules - returns filtered account rules list based on flow part
// -----------------------------------------------------------------------------
window.GetFeeAccountRules = function(BID, flowPart) {
    var filteredRules = [];

    // /^*^/ =================================================================
    // NOTE: at the moment, just return list of account rules stored for BID.
    //       Don't filter out based on section.
    // =======================================================================

    filteredRules = app.raflow.arList[BID];

    // ================================================================= /^*^/

    // switch(flowPart) {
    //     case "pets":
    //     filteredRules = app.raflow.arList[BID].filter(function(ARObject) {
    //         return ( (ARObject.FLAGS&(1<<app.arFLAGS.PETIDReq)) !== 0 );
    //     });
    //         break;
    //     case "vehicles":
    //         filteredRules = app.raflow.arList[BID].filter(function(ARObject) {
    //             return ( (ARObject.FLAGS&(1<<app.arFLAGS.VIDReq)) !== 0 );
    //         });
    //         break;
    //     case "rentables":
    //         // push only those item which are only set to RentASM flag and
    //         // not to pet/vehicles AR
    //
    //         // get AutoPopulateToNewRA or IsRentASM marked rules
    //         var allowedRules = app.raflow.arList[BID].filter(function(ARObject) {
    //             return (
    //                 ( (ARObject.FLAGS&(1<<app.arFLAGS.AutoPopulateToNewRA)) !== 0 ) ||
    //                 ( (ARObject.FLAGS&(1<<app.arFLAGS.IsRentASM)) !== 0 )
    //             );
    //         });
    //
    //         // it should not be pet/vehicle AR
    //         filteredRules = allowedRules.filter(function(ARObject) {
    //             return ( (ARObject.FLAGS&(3<<7)) === 0 );
    //         });
    //         break;
    // }

    return filteredRules;
};

// -----------------------------------------------------------------------------
// RenderFeesGridSummary - renders fees grid summary from given list of fees
// -----------------------------------------------------------------------------
window.RenderFeesGridSummary = function(grid, fees) {

    // summary record in fees grid
    var summaryRec = {
        recid:              0,
        ARName:             "Grand Total",
        // ContractAmount:     0.0,
        AtSigningPreTax:    0.0,
        SalesTax:           0.0,
        // SalesTaxAmt:        0.0,
        TransOccTax:        0.0,
        // TransOccAmt:        0.0,
    };

    // summing up all amounts from fees
    fees.forEach(function(feeItem) {
        summaryRec.AtSigningPreTax += feeItem.AtSigningPreTax;
        summaryRec.SalesTax += feeItem.SalesTax;
        // summaryRec.SalesTaxAmt += feeItem.SalesTaxAmt;
        summaryRec.TransOccTax += feeItem.TransOccTax;
        // summaryRec.TransOccAmt += feeItem.TransOccAmt;
        summaryRec.RowTotal += feeItem.RowTotal;
    });

    // set style of entire summary row
    summaryRec.w2ui = {style: "font-weight: bold"};

    // set the summary rec in summary array of grid
    grid.summary = [summaryRec];

    // refresh the grid
    grid.refresh();
};

/* global
    GetFeeGridColumns, GetRAFlowCompLocalData,
    BuildRAFinalRentablesFeesGrid,
    BuildRAFinalPetsFeesGrid,
    BuildRAFinalVehiclesFeesGrid,
    AssignRAFinalRentablesFeesGridRecords,
    AssignRAFinalPetsFeesGridRecords,
    AssignRAFinalVehiclesFeesGridRecords,
    RenderFeesGridSummary, GetVehicleIdentity,
*/


"use strict";

// -----------------------------------------------------------------------------
// BuildRAFinalRentablesFeesGrid
//      initialize the fees grid for all rentables only in final screen summary
// -----------------------------------------------------------------------------
window.BuildRAFinalRentablesFeesGrid = function() {

    // if exists then return
    if (w2ui.hasOwnProperty("RAFinalRentablesFeesGrid")) {
        return true;
    }

    // first get grid columns for fees
    var cols = GetFeeGridColumns();

    // prepend RID, RentableName column in columns
    var prependCols = [
        {
            field: "RID",
            caption: "RID",
            hidden: true
        },
        {
            field: "Rentable",
            caption: "Rentable",
            size: "100px"
        }
    ];
    var gridCols = prependCols.concat(cols);

    // initialize rentable fees grid for final section
    $().w2grid({
        name: "RAFinalRentablesFeesGrid",
        header: "<strong>Rentable Fees</strong>",
        show: {
            toolbar:    false,
            header:     true,
            footer:     false,
        },
        multiSelect: false,
        style: 'display: block; background-color: transparent;',
        columns: gridCols,
        onSelect: function (event) {
            event.preventDefault(); // Prevent selection of row
        }
    });
};

// -----------------------------------------------------------------------------
// BuildRAFinalPetsFeesGrid
//      initialize the fees grid for all pets only in final screen summary
// -----------------------------------------------------------------------------
window.BuildRAFinalPetsFeesGrid = function() {

    // if exists then return
    if (w2ui.hasOwnProperty("BuildRAFinalPetsFeesGrid")) {
        return true;
    }

    // first get grid columns for fees
    var cols = GetFeeGridColumns();

    // prepend TMPPETID, PetName column in columns
    var prependCols = [
        {
            field: "TMPPETID",
            caption: "TMPPETID",
            hidden: true
        },
        {
            field: "Pet",
            caption: "Pet",
            size: "100px"
        }
    ];
    var gridCols = prependCols.concat(cols);

    // initialize pet fees grid for final section
    $().w2grid({
        name: "RAFinalPetsFeesGrid",
        header: "<strong>Pets Fees</strong>",
        show: {
            toolbar:    false,
            header:     true,
            footer:     false
        },
        multiSelect: false,
        style: 'display: block;',
        columns: gridCols,
        onSelect: function (event) {
            event.preventDefault(); // Prevent selection of row
        }
    });
};

// -----------------------------------------------------------------------------
// BuildRAFinalVehiclesFeesGrid
//      initialize the fees grid for all vehicles only in final screen summary
// -----------------------------------------------------------------------------
window.BuildRAFinalVehiclesFeesGrid = function() {

    // if exists then return
    if (w2ui.hasOwnProperty("RAFinalVehiclesFeesGrid")) {
        return true;
    }

    // first get grid columns for fees
    var cols = GetFeeGridColumns();

    // prepend TMPVID, VehicleName column in columns
    var prependCols = [
        {
            field: "TMPVID",
            caption: "TMPVID",
            hidden: true
        },
        {
            field: "Vehicle",
            caption: "Vehicle",
            size: "100px"
        }
    ];
    var gridCols = prependCols.concat(cols);

    // initialize vehicles fees grid for final section
    $().w2grid({
        name: "RAFinalVehiclesFeesGrid",
        header: "<strong>Vehicles Fees</strong>",
        show: {
            toolbar:    false,
            header:     true,
            footer:     false
        },
        multiSelect: false,
        style: 'display: block;',
        columns: gridCols,
        onSelect: function (event) {
            event.preventDefault(); // Prevent selection of row
        }
    });
};

// -----------------------------------------------------------------------------
// loadFinalSection
//      to load summary of fees grid in final section
//      maybe more content will be there
// -----------------------------------------------------------------------------
window.loadFinalSection = function() {

    // if components are not loaded then load
    BuildRAFinalRentablesFeesGrid();
    BuildRAFinalPetsFeesGrid();
    BuildRAFinalVehiclesFeesGrid();

    // load all fees grid in div
    $('#ra-form #final .container #rentable-fees').w2render(w2ui.RAFinalRentablesFeesGrid);
    $('#ra-form #final .container #pet-fees').w2render(w2ui.RAFinalPetsFeesGrid);
    $('#ra-form #final .container #vehicle-fees').w2render(w2ui.RAFinalVehiclesFeesGrid);

    setTimeout(function() {
        AssignRAFinalRentablesFeesGridRecords();
        AssignRAFinalPetsFeesGridRecords();
        AssignRAFinalVehiclesFeesGridRecords();
    }, 500);
};

// -----------------------------------------------------------------------------
// AssignRAFinalRentablesFeesGridRecords
//      render the grid records from local data of rentables section
// -----------------------------------------------------------------------------
window.AssignRAFinalRentablesFeesGridRecords = function() {
    var grid = w2ui.RAFinalRentablesFeesGrid;

    // clear the grid
    grid.clear();

    // get rentables local data
    var compData = GetRAFlowCompLocalData("rentables") || [];

    // loop over all rentable and collect fees
    compData.forEach(function(rentable) {

        // loop over fees collection and append in grid records
        rentable.Fees.forEach(function(feeItem) {
            // take a clone of local fee record
            var rentableFee = $.extend(true, {}, feeItem);
            rentableFee.Rentable = rentable.RentableName;
            rentableFee.RID = rentable.RID;
            grid.records.push(rentableFee);
        });

    });

    // render fees amount summary
    RenderFeesGridSummary(grid, grid.records);

    // assign record in grid
    reassignGridRecids(grid.name);
};

// -----------------------------------------------------------------------------
// AssignRAFinalPetsFeesGridRecords
//      render the grid records from local data of pets section
// -----------------------------------------------------------------------------
window.AssignRAFinalPetsFeesGridRecords = function() {
    var grid = w2ui.RAFinalPetsFeesGrid;

    // clear the grid
    grid.clear();

    // get pets local data
    var compData = GetRAFlowCompLocalData("pets") || [];

    // loop over all pets and collect fees
    compData.forEach(function(pet) {

        // loop over fees collection and append in grid records
        pet.Fees.forEach(function(feeItem) {
            // take a clone of local fee record
            var petFee = $.extend(true, {}, feeItem);
            petFee.Pet = pet.Name;
            petFee.TMPPETID = pet.TMPPETID;
            grid.records.push(petFee);
        });

    });

    // render fees amount summary
    RenderFeesGridSummary(grid, grid.records);

    // assign record in grid
    reassignGridRecids(grid.name);
};

// -----------------------------------------------------------------------------
// AssignRAFinalVehiclesFeesGridRecords
//      render the grid records from local data of vehicles section
// -----------------------------------------------------------------------------
window.AssignRAFinalVehiclesFeesGridRecords = function() {
    var grid = w2ui.RAFinalVehiclesFeesGrid;

    // clear the grid
    grid.clear();

    // get vehicles local data
    var compData = GetRAFlowCompLocalData("vehicles") || [];

    // loop over all vehicles and collect fees
    compData.forEach(function(vehicle) {

        // loop over fees collection and append in grid records
        vehicle.Fees.forEach(function(feeItem) {
            // take a clone of local fee record
            var vehicleFee = $.extend(true, {}, feeItem);

            vehicleFee.Vehicle = GetVehicleIdentity(vehicle);
            vehicleFee.TMPVID = vehicle.TMPVID;
            grid.records.push(vehicleFee);
        });

    });

    // render fees amount summary
    RenderFeesGridSummary(grid, grid.records);

    // assign record in grid
    reassignGridRecids(grid.name);
};

/* global
    GetRAFlowCompLocalData, EnableDisableRAFlowVersionInputs, SaveCompDataAJAX,
    HideAllSliderContent, SetlocalDataFromRADatesFormRecord,
    SetRADatesFormRecordFromLocalData, SetRAFlowCompLocalData,
    SetFormRecordFromData, SetDataFromFormRecord, SaveDatesCompData, displayRADatesFormError,
    ElementFlash, cleanFormError, dtFormatISOToW2ui, UpdateCloseInfo,
*/

"use strict";

// REFLECT START DATES CLICK HANDLER
$(document).on("click", "button#reflect_start_dates", function(e) {
    var form = w2ui.RADatesForm;

    // REFLECT AGREEMENT START IN RENT, POSSESSION DATES
    form.record.RentStart = form.record.PossessionStart = form.record.AgreementStart;

    // REFRESH THE FORM
    form.refresh();

    // FLASH THE ELEMENT
    var rs = $(form.box).find("input[name=RentStart]"),
        ps = $(form.box).find("input[name=PossessionStart]");
    ElementFlash(rs);
    ElementFlash(ps);
});

// REFLECT STOP DATES CLICK HANDLER
$(document).on("click", "button#reflect_stop_dates", function(e) {
    var form = w2ui.RADatesForm;

    // REFLECT AGREEMENT STOP IN RENT, POSSESSION DATES
    form.record.RentStop = form.record.PossessionStop = form.record.AgreementStop;

    // REFRESH THE FORM
    form.refresh();

    // FLASH THE ELEMENT
    var rs = $(form.box).find("input[name=RentStop]"),
        ps = $(form.box).find("input[name=PossessionStop]");
    ElementFlash(rs);
    ElementFlash(ps);
});

// -------------------------------------------------------------------------------
// Rental Agreement - Info Dates form
// -------------------------------------------------------------------------------
window.loadRADatesForm = function () {

    // if form is loaded then return
    if (!("RADatesForm" in w2ui)) {
        // dates form
        $().w2form({
            name: 'RADatesForm',
            header: 'Dates',
            style: 'border: none; display: block;',
            focus: -1,
            formURL: '/webclient/html/raflow/formra-dates.html',
            fields: [
                {name: 'AgreementStart',    type: 'date',   required: true, html: {caption: "Term Start"}},
                {name: 'AgreementStop',     type: 'date',   required: true, html: {caption: "Term Stop"}},
                {name: 'RentStart',         type: 'date',   required: true, html: {caption: "Rent Start"}},
                {name: 'RentStop',          type: 'date',   required: true, html: {caption: "Rent Stop"}},
                {name: 'PossessionStart',   type: 'date',   required: true, html: {caption: "Possession Start"}},
                {name: 'PossessionStop',    type: 'date',   required: true, html: {caption: "Possession Stop"}},
                {name: 'CSAgent',           type: 'int',    required: true, html: {caption: "CS Agent"}}
            ],
            actions: {
                reset: function () {
                    w2ui.RADatesForm.clear();
                },
                save: function() {
                    var form = w2ui.RADatesForm;

                    // clean dirty flag of form
                    app.form_is_dirty = false;

                    // validate form record
                    var errors = form.validate();
                    if (errors.length > 0) {
                        console.error("error in form validation on save action");
                        console.error(errors);
                        return;
                    }

                    // update the modified data
                    SetlocalDataFromRADatesFormRecord();

                    // save data on server side
                    SaveDatesCompData()
                    .done(function(data) {
                        if (data.status !== "success") {
                            form.message(data.message);
                        } else {
                            form.refresh();
                        }
                    });
                }
            },
            onRefresh: function (event) {
                var form = this;

                var x = getCurrentBusiness();
                var BID=parseInt(x.value);
                UpdateCloseInfo(BID); // start this now, we want the data to be as updated as possible.

                event.onComplete = function() {
                    var t = new Date(),
                    nyd = new Date(new Date().setFullYear(new Date().getFullYear() + 1));

                    // set default values with start=current day, stop=next year day, if record is blank
                   form.record.AgreementStart =form.record.AgreementStart || w2uiDateControlString(t);
                   form.record.AgreementStop =form.record.AgreementStop || w2uiDateControlString(nyd);
                   form.record.RentStart =form.record.RentStart || w2uiDateControlString(t);
                   form.record.RentStop =form.record.RentStop || w2uiDateControlString(nyd);
                   form.record.PossessionStart =form.record.PossessionStart || w2uiDateControlString(t);
                   form.record.PossessionStop =form.record.PossessionStop || w2uiDateControlString(nyd);

                   //----------------------------
                   // show the close date...
                   //----------------------------
                   var x = getCurrentBusiness();
                   var BID=parseInt(x.value);
                   var BUD = getBUDfromBID(BID);
                   var dt = new Date(app.CloseInfo[BUD].LastClose);
                   var s = "N/A";
                   if ( dt.getFullYear() > 2000) {
                       s = dtFormatISOToW2ui(dt);
                   } else {
                       s = "no periods have been closed";
                   }
                   var ui = document.getElementById("rafClosePeriod");
                   if (ui != null) {
                       ui.innerHTML = s;
                   }

                   // FREEZE THE INPUTS IF VERSION IS RAID
                   EnableDisableRAFlowVersionInputs(form);
                };
            }
        });
    }

    // now render the form in specifiec targeted division
    $('#ra-form #dates .form-container').w2render(w2ui.RADatesForm);
    HideAllSliderContent();

    // load the existing data in dates component
    setTimeout(function () {
        SetRADatesFormRecordFromLocalData();
        displayRADatesFormError();
    }, 0);
};

// displayRADatesFormError If form field have error than it highlight with red border and
window.displayRADatesFormError = function(){

    // if pet section doesn't have error than return
    if(!app.raflow.validationErrors.dates){
        return;
    }

    // get list of pets
    var dates = app.raflow.validationCheck.errors.dates;

    cleanFormError();

    // Iterate through fields with errors
    for(var key in dates.errors){
        var field = $("[name=RADatesForm] input#" + key);
        var error = dates.errors[key].join(", ");
        field.css("border-color", "red");
        field.after("<small class='error'>" + error + "</small>");
    }
};

// -------------------------------------------------------------
// SetlocalDataFromRADatesFormRecord
// ==================================
// will update the data from the record
// it will only update the field defined in fields list in
// form definition
// -------------------------------------------------------------
window.SetlocalDataFromRADatesFormRecord = function() {
    var form            = w2ui.RADatesForm;

    // get local data
    var localDatesData = GetRAFlowCompLocalData("dates");

    // set data from form
    // keep ID is 1 to set only records in defined fields
    var datesData = SetDataFromFormRecord(1, form, localDatesData);

    // set this modified data back
    SetRAFlowCompLocalData("dates", datesData);
};

// -------------------------------------------------------------
// SetRADatesFormRecordFromLocalData
// ================================
// will set the data in the form record
// from local vehicle data
// -------------------------------------------------------------
window.SetRADatesFormRecordFromLocalData = function() {
    var form = w2ui.RADatesForm;

    // get local data
    var localDatesData = GetRAFlowCompLocalData("dates");

    // set form record from data
    SetFormRecordFromData(form, localDatesData);

    // refresh the form after setting the record
    form.refresh();
    form.refresh();
};

//------------------------------------------------------------------------------
// SaveDatesCompData - saves the data on server side
//------------------------------------------------------------------------------
window.SaveDatesCompData = function() {
    var compData = GetRAFlowCompLocalData("dates");
    return SaveCompDataAJAX(compData, "dates");
};

/* global
    SaveCompDataAJAX, GetRAFlowCompLocalData, getRecIDFromCRID, dispalyRAParentChildGridError,
    getChildRentableLocalData, SetChildRentableLocalData, saveParentChildCompData,
    EnableDisableRAFlowVersionGrid, SaveParentChildCompData
*/

"use strict";

//-----------------------------------------------------------------------
// loadRAPeopleChildSection -
//-----------------------------------------------------------------------
window.loadRAPeopleChildSection = function () {

    if (!("RAParentChildGrid" in w2ui)) {

        // rentables grid
        $().w2grid({
            name: 'RAParentChildGrid',
            header: 'Parent Child Rentables Relation',
            show: {
                toolbar:    false,
                footer:     true,
            },
            multiSelect: false,
            style: 'border: none; display: block;',
            columns: [
                {
                    field: 'recid',
                    hidden: true
                },
                {
                    field: 'BID',
                    hidden: true
                },
                {
                    field: 'CRID',
                    hidden: true
                },
                {
                    field: 'PRID',
                    hidden: true
                },
                {
                    field: 'haveError',
                    size: '30px',
                    hidden: false,
                    render: function (record) {
                        var haveError = false;
                        if (app.raflow.validationErrors.parentchild) {
                            var parentchild = app.raflow.validationCheck.errors.parentchild.errors;
                            for (var i = 0; i < parentchild.length; i++) {
                                if (parentchild[i].PRID === record.PRID && parentchild[i].CRID === record.CRID && parentchild[i].total > 0) {
                                    haveError = true;
                                    break;
                                }
                            }
                        }
                        if (haveError) {
                            return '<i class="fas fa-exclamation-triangle" title="error"></i>';
                        } else {
                            return "";
                        }
                    }
                },
                {
                    field: 'ChildRentableName',
                    caption: 'Rentable',
                    size: '40%',
                },
                {
                    field: 'ParentRentableName',
                    caption: 'Assign To',
                    size: '60%',
                    editable: {
                        type: 'select',
                        items: [],
                    },
                    render: function (record/*, index, col_index*/) {
                        var html = '';

                        if (record) {
                            var items = app.raflow.parentRentableW2UIItems;
                            for (var s in items) {
                                if (items[s].id == record.ParentRentableName) html = items[s].text;
                            }
                        }
                        return html;
                    }
                },
            ],
            onRefresh: function(event) {
                var grid = this;
                event.onComplete = function() {
                    EnableDisableRAFlowVersionGrid(grid);
                };
            },
            onChange: function(event) {
                var grid = this;
                event.onComplete = function() {
                    // parent rentable name column index
                    var PRNCI = grid.getColumn("ParentRentableName", true);
                    if (PRNCI === event.column) {
                        var record = grid.get(event.recid);
                        var localData = getChildRentableLocalData(record.CRID);

                        // set PRID locally as well
                        localData.PRID = record.PRID = parseInt(event.value_new);
                        record.ParentRentableName = parseInt(event.value_new);

                        // set modified data in grid and locally
                        grid.set(event.recid, record);
                        SetChildRentableLocalData(record.CRID, localData);

                        // SAVE DATA ON SERVER SIDE
                        SaveParentChildCompData()
                        .done(function(data) {
                            if (data.status === 'success') {
                                // save grid changes
                                grid.save();
                            } else {
                                grid.message(data.message);
                            }
                        })
                        .fail(function(data) {
                            console.log("failure " + data);
                        });
                    }
                };
            }
        });
    }

    // prepare parent and child rentable list based on rentables section data
    var rentableCompData = GetRAFlowCompLocalData("rentables") || [],
        compData = GetRAFlowCompLocalData("parentchild") || [],
        recidCounter = 1, // always starts with 1
        BID = getCurrentBID(),
        gridRecords = [];

    // always render data from latest modified rentable comp data
    rentableCompData.forEach(function(rentableItem) {
        var RID = rentableItem.RID,
            RentableName = rentableItem.RentableName;

        // 1 means this is child rentable
        if ( (rentableItem.RTFLAGS & (1 << app.rtFLAGS.IsChildRentable) ) != 0) {
            var PRID = 0;
            var cRentable = getChildRentableLocalData(RID);

            // parent Rentable ID found then for initial load in grid
            if (cRentable.PRID) {
                // if it's found in parent rentable list then keep as it is
                // else assign 0 if not found
                app.raflow.parentRentableW2UIItems.forEach(function(parentRItem) {
                    if (parentRItem.id == cRentable.PRID) {
                        PRID = cRentable.PRID;
                        return false;
                    }
                });
            }

            // prepare record struct for grid records list
            var rec = {
                recid:                  recidCounter,
                BID:                    BID,
                CRID:                   RID,
                PRID:                   PRID,
                ChildRentableName:      RentableName,
                ParentRentableName:     PRID, // grid's render will take care
            };
            recidCounter++;
            gridRecords.push(rec);
        }
    });

    // if there is only one parent rentable then pre-select it for all child rentable
    // otherwise built drop down menu
    if (app.raflow.parentRentableW2UIItems.length == 0) {
        gridRecords.forEach(function(rec) {
            rec.PRID = 0;
            rec.ParentRentableName = 0;
        });
    } else if (app.raflow.parentRentableW2UIItems.length == 1) {
        // re-assign PRID
        gridRecords.forEach(function(rec) {
            rec.PRID = app.raflow.parentRentableW2UIItems[0].id;
            rec.ParentRentableName = app.raflow.parentRentableW2UIItems[0].id;
        });
    }

    // now load grid in division
    $('#ra-form #parentchild .grid-container').w2render(w2ui.RAParentChildGrid);

    // load the existing data in rentables component
    setTimeout(function () {
        var grid = w2ui.RAParentChildGrid;

        // first clear the grid
        grid.clear();

        // assign calculated grid records and refresh it
        grid.records = gridRecords;
        grid.refresh();

        // assign item prepared earlier for parent rentable list
        grid.getColumn("ParentRentableName").editable.items = app.raflow.parentRentableW2UIItems;
        grid.getColumn("ParentRentableName").render();

        // display row with light red background if it have error
        dispalyRAParentChildGridError();

        // save the data if it's been modified
        saveParentChildCompData();

    }, 500);
};


//-----------------------------------------------------------------------------
// saveParentChildCompData - if there are any difference between server data
//                           and local data at this step then save the
//                           modified data on the server via API
//-----------------------------------------------------------------------------
window.saveParentChildCompData = function() {
    var compData = GetRAFlowCompLocalData("parentchild") || [],
        dataToSaveFlag = false,
        gridRecords = w2ui.RAParentChildGrid.records || [];

    // first check the length
    if (gridRecords.length !== compData.length) {
        dataToSaveFlag = true;
    } else {
        var ridExists = false;
        // scan for each record from grid with compData, if RID not found then hit the API to save data
        gridRecords.forEach(function(gridRec) {
            compData.forEach(function(dataItem) {
                if (gridRec.CRID === dataItem.CRID && gridRec.PRID === dataItem.PRID) {
                    ridExists = true;
                    return false;
                }
            });
            if (!ridExists) { // if not found then it means we have mismatch in data
                dataToSaveFlag = true;
                return false;
            }
        });
    }

    // if have to save the data then update the local copy
    if (dataToSaveFlag) {
        var BID = getCurrentBID(),
            modCompData = [];

        gridRecords.forEach(function(rec) {
            modCompData.push({BID: BID, CRID: rec.CRID, PRID: rec.PRID});
        });

        // set this to it's position
        app.raflow.Flow.parentchild = modCompData;

        // now hit the server API to save
        SaveCompDataAJAX(modCompData, "parentchild");
    }
};

//-----------------------------------------------------------------------------
// getChildRentableLocalData -  returns the clone of child rentable data
//                              for requested RID by matching CRID
//-----------------------------------------------------------------------------
window.getChildRentableLocalData = function(RID, returnIndex) {
    var cloneData = {};
    var foundIndex = -1;
    var compData = GetRAFlowCompLocalData("parentchild");
    compData.forEach(function(item, index) {
        if (item.CRID == RID) {
            if (returnIndex) {
                foundIndex = index;
            } else {
                cloneData = $.extend(true, {}, item);
            }
            return false;
        }
    });
    if (returnIndex) {
        return foundIndex;
    }
    return cloneData;
};

//-----------------------------------------------------------------------------
// SetChildRentableLocalData - set the modified rentable data locally
//                              for requested RID by matching CRID
//-----------------------------------------------------------------------------
window.SetChildRentableLocalData = function(RID, data) {
    var compData = GetRAFlowCompLocalData("parentchild");
    var dataIndex = -1;
    compData.forEach(function(item, index) {
        if (item.CRID == RID) {
            dataIndex = index;
            return false;
        }
    });
    if (dataIndex > -1) {
        compData[dataIndex] = data;
    } else {
        compData.push(data);
    }
};

// dispalyRARentablesGridError
// It highlights grid's row if it have error
window.dispalyRAParentChildGridError = function (){
    // load grid errors if any
    var g = w2ui.RAParentChildGrid;
    var record, i;
    for (i = 0; i < g.records.length; i++) {
        // get record from grid to apply css
        record = g.get(g.records[i].recid);

        if (!("w2ui" in record)) {
            record.w2ui = {}; // init w2ui if not present
        }
        if (!("class" in record.w2ui)) {
            record.w2ui.class = ""; // init class string
        }
        if (!("style" in record.w2ui)) {
            record.w2ui.style = {}; // init style object
        }
    }

    if (app.raflow.validationErrors.parentchild) {
        var parentchild = app.raflow.validationCheck.errors.parentchild.errors;
        for (i = 0; i < parentchild.length; i++) {
            if (parentchild[i].total > 0) {
                var recid = getRecIDFromCRID(g, parentchild[i].CRID);
                g.get(recid).w2ui.style = "background-color: #EEB4B4";
                g.refreshRow(recid);
            }
        }
    }
};

// getRecIDFromRID It returns recid of grid record which matches TMPTCID
window.getRecIDFromCRID = function(grid, CRID){
    var recid;
    for (var i = 0; i < grid.records.length; i++) {
        if (grid.records[i].CRID === CRID) {
            recid = grid.records[i].recid;
        }
    }
    return recid;
};

//------------------------------------------------------------------------------
// SaveParentChildCompData - saves the data on server side
//------------------------------------------------------------------------------
window.SaveParentChildCompData = function() {
    var compData = GetRAFlowCompLocalData("parentchild");
    return SaveCompDataAJAX(compData, "parentchild");
};

/* global
    RACompConfig, reassignGridRecids, RAFlowAJAX,
    getFullName, getTCIDName,
    HideSliderContent, ShowSliderContentW2UIComp,
    SaveCompDataAJAX, GetRAFlowCompLocalData,
    openNewTransactantForm, acceptTransactant, loadRAPeopleSearchForm,
    setRATransactantFormHeader, showHideRATransactantFormFields,
    setNotRequiredFields, getRAPeopleGridRecord, ReassignPeopleGridRecords,
    manageBGInfoFormFields, addDummyBackgroundInfo, SavePeopleCompDataAJAX, getPeopleLocalData, setPeopleLocalData,
    getPeopleLocalDataByTCID, setTransactantDefaultRole,
    getStringListData, getSLStringList, updateRATransactantFormCheckboxes, UpdateRAFlowLocalData,
    managePeopleW2UIItems, DeleteRAFlowPersonAJAX, SaveRAFlowPersonAJAX, onCheckboxesChange, getRecIDFromTMPTCID, dispalyRAPeopleGridError,
    displayRAPeopleSearchFormError, getPeopleIndex, displayFormFieldsError,
    GetCurrentFlowID, EnableDisableRAFlowVersionInputs, ShowHideGridToolbarAddButton,
    HideAllSliderContent, displayRAPeopleSearchFormTabErrorDot
*/

"use strict";

/*
* Note: Reuse method from transactant.js: getStringListData, getSLStringList, updateRATransactantFormCheckboxes
* */

// -------------------------------------------------------------------------------
// Rental Agreement - People form, People Grid, Background information form
// -------------------------------------------------------------------------------
window.loadRAPeopleGrid = function () {

    // if form is loaded then return
    if (!("RAPeopleGrid" in w2ui)) {

        // ------------------------------------
        // PEOPLE SEARCH FORM
        // ------------------------------------
        $().w2form({
            name: 'RAPeopleSearchForm',
            header: 'People',
            style: 'display: block; border: none;',
            formURL: '/webclient/html/raflow/formra-peoplesearch.html',
            focus: -1,
            fields: [
                {name: 'Transactant',   type: 'enum',       required: true,     html: {caption: "Transactant"},
                    options: {
                        url: '/v1/transactantstd/' + getCurrentBID().toString(),
                        max: 1,
                        renderItem: function (item) {

                            // Enable Accept button
                            $(w2ui.RAPeopleSearchForm.box).find("button[name=accept]").prop("disabled", false);

                            var s = getTCIDName(item);
                            w2ui.RAPeopleSearchForm.record.TCID = item.TCID;
                            w2ui.RAPeopleSearchForm.record.FirstName = item.FirstName;
                            w2ui.RAPeopleSearchForm.record.LastName = item.LastName;
                            w2ui.RAPeopleSearchForm.record.MiddleName = item.MiddleName;
                            w2ui.RAPeopleSearchForm.record.CompanyName = item.CompanyName;
                            w2ui.RAPeopleSearchForm.record.IsCompany = item.IsCompany;
                            return s;
                        },
                        renderDrop: function (item) {
                            return getTCIDName(item);
                        },
                        compare: function (item, search) {
                            var s = getTCIDName(item);
                            s = s.toLowerCase();
                            var srch = search.toLowerCase();
                            var match = (s.indexOf(srch) >= 0);
                            return match;
                        },
                        onRemove: function(event) {
                            event.onComplete = function() {
                                w2ui.RAPeopleSearchForm.actions.reset();
                            };
                        }
                    }
                },
                {name: 'BID',           type: 'int',        required: true,     html: {caption: "BID"}},
                {name: 'TCID',          type: 'int',        required: true,     html: {caption: "TCID"}},
                {name: 'FirstName',     type: 'text',       required: false,    html: {caption: "FirstName"}},
                {name: 'LastName',      type: 'text',       required: false,    html: {caption: "LastName"}},
                {name: 'MiddleName',    type: 'text',       required: false,    html: {caption: "MiddleName"}},
                {name: 'CompanyName',   type: 'text',       required: false,    html: {caption: "CompanyName"}},
                {name: 'IsCompany',     type: 'checkbox',   required: true,     html: {caption: "IsCompany"}}
            ],
            actions: {
                reset: function () {
                    w2ui.RAPeopleSearchForm.clear();
                    $(w2ui.RAPeopleSearchForm.box).find("button[name=accept]").prop("disabled", true);
                }
            },
            onRefresh: function (event) {
                var form = this;
                event.onComplete = function () {
                    var BID = getCurrentBID(),
                        BUD = getBUDfromBID(BID);

                    form.record.BID = BID;

                    // FREEZE THE INPUTS IF VERSION IS RAID
                    EnableDisableRAFlowVersionInputs(form);
                };
            }
        });

        // transanctants/people list in grid
        $().w2grid({
            name: 'RAPeopleGrid',
            header: 'Background information',
            show: {
                toolbar: true,
                toolbarSearch: false,
                toolbarAdd: true,
                toolbarReload: false,
                toolbarInput: false,
                toolbarColumns: false,
                footer: true
            },
            style: 'border-color: silver; border-style: solid; border-width: 1px 0 0 0; display: block;',
            multiSelect: false,
            columns: [
                {
                    field: 'recid',
                    hidden: true
                },
                {
                    field: 'TMPTCID',
                    hidden: true
                },
                {
                    field: 'TCID',
                    hidden: true
                },
                {
                    field: 'haveError',
                    size: '30px',
                    hidden: false,
                    render: function (record) {
                        var haveError = false;
                        if (app.raflow.validationErrors.people) {
                            var people = app.raflow.validationCheck.errors.people.errors;
                            for (var i = 0; i < people.length; i++) {
                                if (people[i].TMPTCID === record.TMPTCID && people[i].total > 0) {
                                    haveError = true;
                                    break;
                                }
                            }
                        }
                        if (haveError) {
                            return '<i class="fas fa-exclamation-triangle" title="error"></i>';
                        } else {
                            return "";
                        }
                    }
                },
                {
                    field: 'FullName',
                    caption: 'Name',
                    size: '100%',
                    style: 'text-align: left;',
                    render: function (record) {
                        if (record.IsCompany) {
                            return record.CompanyName;
                        } else {
                            return getFullName(record);
                        }
                    }
                },
                {
                    field: 'IsRenter',
                    // caption: 'Renter',
                    // size: '100px',
                    hidden: true,
                    // render: function (record) {
                    //     if (record.IsRenter) {
                    //         return '<i class="fas fa-check" title="renter"></i>';
                    //     } else {
                    //         return '<i class="fas fa-times" title="renter"></i>';
                    //     }
                    // }
                },
                {
                    field: 'IsOccupant',
                    // caption: 'Occupant',
                    // size: '100px',
                    hidden: true,
                    // render: function (record) {
                    //     if (record.IsOccupant) {
                    //         return '<i class="fas fa-check" title="occupant"></i>';
                    //     } else {
                    //         return '<i class="fas fa-times" title="occupant"></i>';
                    //     }
                    // }
                },
                {
                    field: 'IsGuarantor',
                    // caption: 'Guarantor',
                    // size: '100px',
                    hidden: true,
                    // render: function (record) {
                    //     if (record.IsGuarantor) {
                    //         return '<i class="fas fa-check" title="guarantor"></i>';
                    //     } else {
                    //         return '<i class="fas fa-times" title="guarantor"></i>';
                    //     }
                    // }
                }
            ],
            onRefresh: function(event) {
                var grid = this;
                event.onComplete = function() {
                    ShowHideGridToolbarAddButton(grid.name);
                };
            },
            onClick: function (event) {
                event.onComplete = function () {
                    var yes_args = [this, event.recid],
                        no_args = [this],
                        no_callBack = function (grid) {
                            grid.select(app.last.grid_sel_recid);
                            return false;
                        },
                        yes_callBack = function (grid, recid) {
                            var form = w2ui.RATransactantForm,
                                BID = getCurrentBID(),
                                BUD = getBUDfromBID(BID);

                            app.last.grid_sel_recid = parseInt(recid);

                            // keep highlighting current row in any case
                            grid.select(app.last.grid_sel_recid);

                            var raBGInfoGridRecord = grid.get(event.recid); // record from the w2ui grid

                            // get stringListData for list fields
                            getStringListData(BID, BUD).done(function (data) {
                                // show slider content in w2ui comp
                                ShowSliderContentW2UIComp(form, RACompConfig.people.sliderWidth);

                                // show/hide list of fields based on role
                                manageBGInfoFormFields(raBGInfoGridRecord);

                                form.record = getPeopleLocalData(raBGInfoGridRecord.TMPTCID);
                                form.record.recid = raBGInfoGridRecord.recid;
                                form.record.BID = BID;
                                form.record.BUD = BUD;

                                // Set the form title
                                setRATransactantFormHeader(form.record);

                                form.refresh(); // need to refresh for form changes

                                displayRAPeopleSearchFormError();

                                displayRAPeopleSearchFormTabErrorDot();
                            }).fail(function (data) {
                                form.message(data.message);
                            });
                        };

                    // warn user if form content has been changed
                    form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
                };
            },
            onAdd: function () {
                openNewTransactantForm();
            }
        });

        // ------------------------------------
        // BACKGROUND INFORMATION DETAILED FORM
        // ------------------------------------
        $().w2form({
            name: 'RATransactantForm',
            header: 'Background Information',
            style: 'border: none; background-color: transparent; display: block;',
            // This is using the transactant template same as used by
            // "Transactants" sidebar node
            formURL: '/webclient/html/formtc.html',
            toolbar: {
                items: [
                    {id: 'bt3', type: 'spacer'},
                    // {id: 'addInfo', type: 'button', icon: 'fas fa-plus-circle'}, // TODO: Remove this in production. This button is for development purpose
                    {id: 'btnClose', type: 'button', icon: 'fas fa-times'}
                ],
                onClick: function (event) {
                    switch (event.target) {
                        case 'btnClose':
                            HideSliderContent();
                            // unselect all selected record
                            w2ui.RAPeopleGrid.selectNone();
                            break;
                        case 'addInfo':
                            addDummyBackgroundInfo();
                            break;
                    }
                }
            },
            fields: app.transactantFields,
            tabs: app.transactantTabs,
            actions: {
                save: function () {
                    var form = this,
                        TMPTCID = form.record.TMPTCID;

                    var errors = form.validate();
                    if (errors.length > 0) return;

                    var peopleData = getFormSubmitData(form.record, true);

                    // If transanctant role isn't selected than display error.
                    if (!(peopleData.IsRenter || peopleData.IsOccupant || peopleData.IsGuarantor)) {
                        form.message("Please select transanctant role.");
                        return;
                    }

                    // Convert integer to bool checkboxes fields
                    updateRATransactantFormCheckboxes(peopleData);

                    setPeopleLocalData(TMPTCID, peopleData);

                    // clean dirty flag of form
                    app.form_is_dirty = false;

                    // save this records in json Data
                    SavePeopleCompDataAJAX()
                    .done(function (data) {
                        if (data.status === 'success') {

                            form.clear();

                            // update RAPeopleGrid
                            ReassignPeopleGridRecords();

                            // close the form
                            HideSliderContent();
                        } else {
                            form.message(data.message);
                        }
                    })
                    .fail(function (data) {
                        console.error("failure " + data);
                    });
                },
                delete: function () {
                    var form = this;
                    var TMPTCID = form.record.TMPTCID;

                    DeleteRAFlowPersonAJAX(TMPTCID)
                    .done(function(data) {
                        if (data.status === 'success') {
                            // clear the form
                            form.clear();

                            // close the form
                            HideSliderContent();

                            // unselect all selected record
                            w2ui.RAPeopleGrid.selectNone();

                            // update RAPeopleGrid
                            ReassignPeopleGridRecords();
                        } else {
                            form.message(data.message);
                        }
                    })
                    .fail(function (data) {
                        console.error("failure " + data);
                    });
                },
                reset: function () {
                    w2ui.RATransactantForm.clear();
                }
            },
            onChange: function (event) {
                event.onComplete = function () {

                    switch(event.target){
                        case "Evicted":
                        case "Convicted":
                        case "Bankruptcy":
                            onCheckboxesChange(this);
                            break;
                    }

                    manageBGInfoFormFields(this.record);

                    // formRecDiffer: 1=current record, 2=original record, 3=diff object
                    var diff = formRecDiffer(this.record, app.active_form_original, {});
                    // if diff == {} then make dirty flag as false, else true
                    if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                        app.form_is_dirty = false;
                    } else {
                        app.form_is_dirty = true;
                    }
                };
            },
            onRefresh: function (event) {
                event.onComplete = function () {

                    // Hide Save and Add Button
                    $("button[name=saveadd]").addClass("hidden");

                    var form = this,
                        BID = getCurrentBID(),
                        BUD = getBUDfromBID(BID);

                    // Set list field value
                    form.get('SourceSLSID').options.items = getSLStringList(BID, "HowFound");
                    form.get('CurrentReasonForMoving').options.items = getSLStringList(BID, "WhyLeaving");
                    form.get('PriorReasonForMoving').options.items = getSLStringList(BID, "WhyLeaving");
                    form.get('Industry').options.items = getSLStringList(BID, "Industries");

                    // hide delete button if it is NewRecord
                    var isNewRecord = (w2ui.RAPeopleGrid.get(form.record.recid, true) === null);
                    if (isNewRecord) {
                        $(form.box).find("button[name=delete]").addClass("hidden");
                    } else {
                        $(form.box).find("button[name=delete]").removeClass("hidden");
                    }

                    // FREEZE THE INPUTS IF VERSION IS RAID
                    EnableDisableRAFlowVersionInputs(form);

                    onCheckboxesChange(form);

                    // Display error dot for the tabs
                    displayRAPeopleSearchFormTabErrorDot();
                };
            },
            onValidate: function (event) {
                if (!this.record.IsCompany && this.record.FirstName === '') {
                    event.errors.push({
                        field: this.get('FirstName'),
                        error: 'FirstName required when "Person or Company" field is set to Person'
                    });
                }
                if (!this.record.IsCompany && this.record.LastName === '') {
                    event.errors.push({
                        field: this.get('LastName'),
                        error: 'LastName required when "Person or Company" field is set to Person'
                    });
                }
                if (this.record.IsCompany && this.record.CompanyName === '') {
                    event.errors.push({
                        field: this.get('CompanyName'),
                        error: 'Company Name required when "Person or Company" field is set to Company'
                    });
                }
            }
        });
    }

    // load form in div
    $('#ra-form #people .grid-container').w2render(w2ui.RAPeopleGrid);
    $('#ra-form #people .form-container').w2render(w2ui.RAPeopleSearchForm);
    HideAllSliderContent();

    // load existing info in PeopleForm and PeopleGrid
    setTimeout(function () {
        // Operation on RAPeopleGrid
        ReassignPeopleGridRecords();
    }, 500);
};

// setRATransactantFormHeader
// It set RATransactantForm header title
window.setRATransactantFormHeader = function (record) {
    if (record.IsCompany > 0) {
        w2ui.RATransactantForm.header = 'Background Information - <strong>' + record.CompanyName + '</strong>';
    } else {
        w2ui.RATransactantForm.header = 'Background Information - <strong>' + record.FirstName + ' ' + record.MiddleName + ' ' + record.LastName + '</strong>';
    }
};

// dispalyRAPeopleGridError
// It highlights grid's row if it have error
window.dispalyRAPeopleGridError = function (){
    // load grid errors if any
    var g = w2ui.RAPeopleGrid;
    var record, i;
    for (i = 0; i < g.records.length; i++) {
        // get record from grid to apply css
        record = g.get(g.records[i].recid);

        if (!("w2ui" in record)) {
            record.w2ui = {}; // init w2ui if not present
        }
        if (!("class" in record.w2ui)) {
            record.w2ui.class = ""; // init class string
        }
        if (!("style" in record.w2ui)) {
            record.w2ui.style = {}; // init style object
        }
    }

    // If biz error than highlight grid row
    if (app.raflow.validationErrors.people) {
        var people = app.raflow.validationCheck.errors.people.errors;
        for (i = 0; i < people.length; i++) {
            if (people[i].total > 0) {
                var recid = getRecIDFromTMPTCID(g, people[i].TMPTCID);
                g.get(recid).w2ui.style = "background-color: #EEB4B4";
                g.refreshRow(recid);
            }
        }
    }
};


// showHideRATransactantFormFields
// hide fields if transanctant is only user
window.showHideRATransactantFormFields = function (listOfHiddenFields, hidden) {
    if (hidden) {
        $("#cureentInfolabel").hide();
        $("#priorInfolabel").hide();
    } else {
        $("#cureentInfolabel").show();
        $("#priorInfolabel").show();
    }
    for (var fieldIndex = 0; fieldIndex < listOfHiddenFields.length; fieldIndex++) {
        w2ui.RATransactantForm.get(listOfHiddenFields[fieldIndex]).hidden = hidden;
    }
};

// setNotRequiredFields
// define fields are not required if transanctant is only user
window.setNotRequiredFields = function (listOfNotRequiredFields, required) {
    for (var fieldIndex = 0; fieldIndex < listOfNotRequiredFields.length; fieldIndex++) {
        w2ui.RATransactantForm.get(listOfNotRequiredFields[fieldIndex]).required = required;
    }
};

// remove person with associated pets, vehicles from json data via Ajax
window.DeleteRAFlowPersonAJAX = function (TMPTCID) {
    var BID = getCurrentBID();
    var FlowID = GetCurrentFlowID();

    var url = "/v1/raflow-person/" + BID.toString() + "/" + FlowID.toString() + "/";
    var data = {
        "cmd": "delete",
        "TMPTCID": TMPTCID,
        "FlowID": FlowID
    };

    return RAFlowAJAX(url, "POST", data, true);
};

// save Transanctant in raflow
window.SaveRAFlowPersonAJAX = function (TCID) {
    var BID = getCurrentBID();
    var FlowID = GetCurrentFlowID();

    var url = "/v1/raflow-person/" + BID.toString() + "/" + FlowID.toString() + "/";
    var data = {
        "cmd": "save",
        "TCID": TCID,
        "FlowID": FlowID
    };

    return RAFlowAJAX(url, "POST", data, true);
};

// getRAPeopleGridRecord
// get record from the list which match with TCID
window.getRAPeopleGridRecord = function (records, TCID) {
    var raBGInfoGridrecord;
    for (var recordIndex = 0; recordIndex < records.length; recordIndex++) {
        if (records[recordIndex].TCID === TCID) {
            raBGInfoGridrecord = records[recordIndex];
            break;
        }
    }
    return raBGInfoGridrecord;
};

//--------------------------------------------------------------------
// ReassignPeopleGridRecords
//--------------------------------------------------------------------
window.ReassignPeopleGridRecords = function () {
    var compData = GetRAFlowCompLocalData("people");
    var grid = w2ui.RAPeopleGrid;

    if (compData) {
        grid.records = compData;
        reassignGridRecids(grid.name);

        // Operation on RAPeopleSearchForm
        w2ui.RAPeopleSearchForm.refresh();

        // manage people w2ui items list
        managePeopleW2UIItems();

    } else {
        // Operation on RAPeopleSearchForm
        w2ui.RAPeopleSearchForm.actions.reset();

        // Operation on RAPeopleGrid
        grid.clear();
    }

    dispalyRAPeopleGridError();
};

//-----------------------------------------------------------------------------
// openNewTransactantForm - popup new transactant form
//-----------------------------------------------------------------------------
window.openNewTransactantForm = function () {
    var BID = getCurrentBID(),
        BUD = getBUDfromBID(BID),
        form = w2ui.RATransactantForm;

    form.header = 'Background Information';
    form.record = getTransactantInitRecord(BID, BUD);
    setTransactantDefaultRole(form.record);

    // get stringListData for list fields
    getStringListData(BID, BUD).fail(function (data) {
        form.message(data.message);
    });

    ShowSliderContentW2UIComp(form, RACompConfig.people.sliderWidth);

    form.refresh(); // need to refresh for header changes
};

//-----------------------------------------------------------------------------
// acceptTransactant - add transactant to the list of payor/user/guarantor
//
// @params
//   item = an object assumed to have a FirstName, MiddleName, LastName,
//          IsCompany, and Employer.
// @return - the name to render
//-----------------------------------------------------------------------------
window.acceptTransactant = function () {

    var compData = GetRAFlowCompLocalData("people") || [];

    var peopleForm = w2ui.RAPeopleSearchForm;

    var transactantRec = $.extend(true, {}, peopleForm.record);
    delete transactantRec.Transactant;
    var TCID = transactantRec.TCID;

    var tcidIndex = getPeopleLocalDataByTCID(TCID, true);

    // if not found then push it in the data
    if (tcidIndex < 0) {

        // save transanctant information in raflow json
        SaveRAFlowPersonAJAX(TCID)
        .done(function (data) {

            if (data.status === 'success') {

                // load item in the RAPeopleGrid grid
                ReassignPeopleGridRecords();

                // clear the form
                w2ui.RAPeopleSearchForm.actions.reset();

            } else {
                console.error(data.message);
            }
        })
        .fail(function (data) {
            console.error(data);
        });
    } else {
        var recid = compData[tcidIndex].recid;

        // Show selected row for existing transanctant record
        w2ui.RAPeopleGrid.select(recid);

        // clear the form
        w2ui.RAPeopleSearchForm.actions.reset();
    }

};

// manageBGInfoFormFields
window.manageBGInfoFormFields = function (record) {
    // Hide these all fields when transanctant is only user.
    var listOfHiddenFields = ["CurrentAddress", "CurrentLandLordName",
        "CurrentLandLordPhoneNo", "CurrentLengthOfResidency", "CurrentReasonForMoving",
        "PriorAddress", "PriorLandLordName", "PriorLandLordPhoneNo",
        "PriorLengthOfResidency", "PriorReasonForMoving"];

    // Display/Required field based on transanctant type
    var haveToHide = record.IsOccupant && !record.IsRenter && !record.IsGuarantor; // true: hide fields, false: show fields
    // hide/show fields
    showHideRATransactantFormFields(listOfHiddenFields, haveToHide);
};

window.addDummyBackgroundInfo = function () {
    var form = w2ui.RATransactantForm;
    var record = form.record;
    record.FirstName = Math.random().toString(32).slice(2);
    record.MiddleName = Math.random().toString(32).slice(2);
    record.LastName = Math.random().toString(32).slice(2);
    record.DateofBirth = "8/30/1990";
    record.DriversLicense = Math.random().toString(32).slice(2);
    record.CellPhone = Math.random().toString(32).slice(2);
    record.PrimaryEmail = Math.random().toString(32).slice(2) + "@yopmail.com";
    record.CurrentAddress = Math.random().toString(32).slice(2);
    record.CurrentLandLordName = Math.random().toString(32).slice(2);
    record.CurrentLandLordPhoneNo = Math.random().toString(32).slice(2);
    record.CurrentLengthOfResidency = 56;
    record.CurrentReasonForMoving = Math.random().toString(32).slice(2);
    record.PriorAddress = Math.random().toString(32).slice(2);
    record.PriorLandLordName = Math.random().toString(32).slice(2);
    record.PriorLandLordPhoneNo = Math.random().toString(32).slice(2);
    record.PriorLengthOfResidency = "3 years";
    record.PriorReasonForMoving = Math.random().toString(32).slice(2);
    record.CompanyName = Math.random().toString(32).slice(2);
    record.WorkPhone = Math.random().toString(32).slice(2);
    record.Address = Math.random().toString(32).slice(2);
    record.Position = Math.random().toString(32).slice(2);
    record.GrossIncome = Math.random() * 100;
    record.EmergencyContactName = Math.random().toString(32).slice(2);
    record.EmergencyContactPhone = Math.random().toString(32).slice(2);
    record.EmergencyContactAddress = Math.random().toString(32).slice(2);
    form.refresh();
};

//------------------------------------------------------------------------------
// SavePeopleCompDataAJAX - saves the data on server side
//------------------------------------------------------------------------------
window.SavePeopleCompDataAJAX = function() {
	var compData = GetRAFlowCompLocalData("people");
	return SaveCompDataAJAX(compData, "people");
};

//-----------------------------------------------------------------------------
// getPeopleLocalDataByTCID - returns the clone of people data
//                            for requested TCID
//-----------------------------------------------------------------------------
window.getPeopleLocalDataByTCID = function(TCID, returnIndex) {
    var cloneData = {};
    var foundIndex = -1;
    var compData = GetRAFlowCompLocalData("people") || [];
    compData.forEach(function(item, index) {
        if (item.TCID === TCID) {
            if (returnIndex) {
                foundIndex = index;
            } else {
                cloneData = $.extend(true, {}, item);
            }
            return false;
        }
    });
    if (returnIndex) {
        return foundIndex;
    }
    return cloneData;
};

//-----------------------------------------------------------------------------
// getPeopleLocalData - returns the clone of people data for requested TMPTCID
//-----------------------------------------------------------------------------
window.getPeopleLocalData = function(TMPTCID, returnIndex) {
	var cloneData = {};
	var foundIndex = -1;
	var compData = GetRAFlowCompLocalData("people") || [];
	compData.forEach(function(item, index) {
		if (item.TMPTCID === TMPTCID) {
			if (returnIndex) {
				foundIndex = index;
			} else {
				cloneData = $.extend(true, {}, item);
			}
			return false;
		}
	});
	if (returnIndex) {
		return foundIndex;
	}
	return cloneData;
};

//-----------------------------------------------------------------------------
// setPeopleLocalData - save the data for requested a TMPTCID in local data
//-----------------------------------------------------------------------------
window.setPeopleLocalData = function(TMPTCID, peopleData) {
	var compData = GetRAFlowCompLocalData("people") || [];
	var dataIndex = -1;
	compData.forEach(function(item, index) {
		if (item.TMPTCID === TMPTCID) {
			dataIndex = index;
			return false;
		}
	});
	if (dataIndex > -1) {
		compData[dataIndex] = peopleData;
	} else {
		compData.push(peopleData);
	}
};

//-----------------------------------------------------------------------------
// setTransactantDefaultRole - Assign default role for new transanctant.
//-----------------------------------------------------------------------------
window.setTransactantDefaultRole = function (transactantRec) {
	var compData = GetRAFlowCompLocalData("people") || [];
	// If first record in the grid than transanctant will be renter by default
	if (compData.length === 0) {
		transactantRec.IsRenter = true;
	}

	// Each transactant must be occupant by default. It can be change via BGInfo detail form
	transactantRec.IsOccupant = true;
};

//-------------------------------------------------------------------------------
// managePeopleW2UIItems - maintain people w2ui items list
//                       - it will keep TMPTCID as in id of w2ui list item object
//-------------------------------------------------------------------------------
window.managePeopleW2UIItems = function() {

    // reset it first
    app.raflow.peopleW2UIItems = [];

    // inner function to push item in "app.raflow.peopleW2UIItems"
    var pushItem = function(peopleItem, atIndex) {
        var found = false;
        app.raflow.peopleW2UIItems.forEach(function(item) {
            if (item.id === peopleItem.id) {
                found = true;
                return false;
            }
        });

        // if not found the push item in app.raflow.peopleW2UIItems
        if (!found) {
            // deleting 0 item, then insert peopleItem
            app.raflow.peopleW2UIItems.splice(atIndex, 0, peopleItem);
        }
    };

    // get comp data
    var peopleCompData = GetRAFlowCompLocalData("people") || [];

    // first build the list of rentables and sort it out in asc order of TMPTCID
    peopleCompData.forEach(function(peopleItem) {
        var TMPTCID = peopleItem.TMPTCID,
            Name = "";

        // get name
        if (peopleItem.IsCompany) {
            Name = peopleItem.CompanyName;
        } else {
            Name = getFullName(peopleItem);
        }

        // w2ui list item for people list
        var item = {id: TMPTCID, text: Name};
        pushItem(item, app.raflow.peopleW2UIItems.length);
    });

    // sort it out in asc order of TMPTCID value
    app.raflow.peopleW2UIItems.sort(function(a, b) {
        return a.id - b.id;
    });

    // if there is only one parent rentable then pre-select it for all child rentable
    // otherwise built drop down menu
    if (app.raflow.peopleW2UIItems.length != 1) {
        var item = {id: 0, text: " -- select person -- "};
        pushItem(item, 0);
    } else {
        app.raflow.peopleW2UIItems.forEach(function(item, index) {
            if (item.id === 0) {
                app.raflow.peopleW2UIItems.splice(index, 1);
            }
        });
    }
};

// getRecIDFromTMPTCID It returns recid of grid record which matches TMPTCID
window.getRecIDFromTMPTCID = function(grid, TMPTCID){
    // var g = w2ui.RAPeopleGrid;
    var recid;
    for (var i = 0; i < grid.records.length; i++) {
        if (grid.records[i].TMPTCID === TMPTCID) {
            recid = grid.records[i].recid;
        }
    }
    return recid;
};

// displayRAPeopleSearchFormError If form field have error than it highlight with red border and
window.displayRAPeopleSearchFormError = function(){

    // if pet section doesn't have error than return
    if(!app.raflow.validationErrors.people){
        return;
    }

    var form = w2ui.RATransactantForm;
    var record = form.record;

    // get list of pets
    var people = app.raflow.validationCheck.errors.people.errors;

    // get index of pet for whom form is opened
    var index = getPeopleIndex(record.TMPTCID, people);

    if(index > -1){
        displayFormFieldsError(index, people, "RATransactantForm");
    }
};

// getPeopleIndex it return an index of people who have TMPTCID
window.getPeopleIndex = function (TMPTCID, people) {

    var index = -1;

    for(var i = 0; i < people.length; i++){
        // If TMPTCID doesn't match iterate for next element
        if(people[i].TMPTCID === TMPTCID){
            index = i;
            break;
        }
    }

    return index;
};

// displayRAPeopleSearchFormTabErrorDot
window.displayRAPeopleSearchFormTabErrorDot = function () {

    // Basic Info tab
    if ($(".w2ui-page.page-0").find(".error").length > 0){
        $("#tabs_RATransactantForm_tabs_tab_tab1").css('position', 'relative');
        $("#tabs_RATransactantForm_tabs_tab_tab1").append("<div class='tab-error-dot'></div>");
    }

    // Prospect tab
    if ($(".w2ui-page.page-1").find(".error").length > 0){
        $("#tabs_RATransactantForm_tabs_tab_tab4").css('position', 'relative');
        $("#tabs_RATransactantForm_tabs_tab_tab4").append("<div class='tab-error-dot'></div>");
    }

    // Payor tab
    if ($(".w2ui-page.page-2").find(".error").length > 0){
        $("#tabs_RATransactantForm_tabs_tab_tab3").css('position', 'relative');
        $("#tabs_RATransactantForm_tabs_tab_tab3").append("<div class='tab-error-dot'></div>");
    }

    // User tab
    if ($(".w2ui-page.page-3").find(".error").length > 0){
        $("#tabs_RATransactantForm_tabs_tab_tab2").css('position', 'relative');
        $("#tabs_RATransactantForm_tabs_tab_tab2").append("<div class='tab-error-dot'></div>");
    }

};

/* global
    RACompConfig, reassignGridRecids, RAFlowAJAX,
    HideSliderContent, ShowSliderContentW2UIComp,
    SaveCompDataAJAX, GetRAFlowCompLocalData,
    lockOnGrid,
    GetPetFormInitRecord, GetPetLocalData, SetPetLocalData,
    AssignPetsGridRecords, SavePetsCompData,
    SetRAPetLayoutContent,
    GetPetFeeLocalData, SetPetFeeLocalData,
    AssignPetFeesGridRecords,
    SetRAPetFormRecordFromLocalData,
    SetlocalDataFromRAPetFormRecord,
    GetAllARForFeeForm, SetDataFromFormRecord, SetFormRecordFromData,
    GetFeeGridColumns, GetFeeFormFields, GetFeeFormToolbar,
    SetFeeDataFromFeeFormRecord,
    GetFeeFormInitRecord,
    FeeFormOnChangeHandler, FeeFormOnRefreshHandler,
    SliderContentDivLength, SetFeeFormRecordFromFeeData,
    RenderPetFeesGridSummary, RAFlowNewPetAJAX, UpdateRAFlowLocalData,
    GetFeeAccountRulesW2UIListItems, RenderFeesGridSummary, getRecIDFromTMPASMID,
    displayRAPetFormError, getPetIndex, displayFormFieldsError, displayRAPetFeeFormError, getFeeIndex,
    GetTiePeopleLocalData, displayRAPetsGridError, getRecIDFromTMPPETID, displayRAPetFeesGridError,
    GetCurrentFlowID, EnableDisableRAFlowVersionInputs, ShowHideGridToolbarAddButton,
    HideAllSliderContent
*/

"use strict";

//-----------------------------------------------------------------------------
// RAFlowNewPetAJAX - Request to create new entry for a pet in raflow json
//-----------------------------------------------------------------------------
window.RAFlowNewPetAJAX = function() {
    var BID = getCurrentBID();
    var FlowID = GetCurrentFlowID();

    var url = '/v1/raflow-pets/' + BID.toString() + "/" + FlowID.toString() + "/";
    var data = {
        "cmd": "new",
        "FlowID": FlowID
    };

    return RAFlowAJAX(url, "POST", data, true)
    .done(function(data) {
        if (data.status !== "error") {
            // reassign records
            AssignPetsGridRecords();

            // mark new TMPPETID from meta
            app.raflow.last.TMPPETID = data.record.Flow.Data.meta.LastTMPPETID;
        }
    });
};

window.GetPetFormInitRecord = function (previousFormRecord){
    var defaultFormData = {
        recid:                  w2ui.RAPetsGrid.records.length + 1,
        TMPPETID:               0,
        PETID:                  0,
        TMPTCID:                0,
        Name:                   "",
        Breed:                  "",
        Type:                   "",
        Color:                  "",
        Weight:                 0,
    };

    // if it called after 'save and add another' action there previous form record is passed as Object
    // else it is null
    if ( previousFormRecord ) {
        defaultFormData = setDefaultFormFieldAsPreviousRecord(
            ['*'], // Fields to Reset
            defaultFormData,
            previousFormRecord
        );
    }

    return defaultFormData;
};

// -------------------------------------------------------------
// SetlocalDataFromRAPetFormRecord
// ==================================
// will update the data from the record
// it will only update the field defined in fields list in
// form definition
// -------------------------------------------------------------
window.SetlocalDataFromRAPetFormRecord = function(TMPPETID) {
    var form        = w2ui.RAPetForm,
        petFormData = getFormSubmitData(form.record, true);

    // get data from form field's TMPPETID
    var localPetData = GetPetLocalData(TMPPETID);

    // set data from form
    var petData = SetDataFromFormRecord(TMPPETID, form, localPetData);

    // if not Fees then assign in pet data
    if (!petData.hasOwnProperty("Fees")) {
        petData.Fees = [];
    }
    petData.Fees = w2ui.RAPetFeesGrid.records;

    // set this modified data back
    SetPetLocalData(TMPPETID, localPetData);
};

// -------------------------------------------------------------
// SetRAPetFormRecordFromLocalData
// ================================
// will set the data in the form record
// from local pet data
// -------------------------------------------------------------
window.SetRAPetFormRecordFromLocalData = function(TMPPETID) {
    var form = w2ui.RAPetForm;

    // get data from form field's TMPPETID
    var localPetData = GetPetLocalData(TMPPETID);

    // set form record from data
    SetFormRecordFromData(form, localPetData);

    // refresh the form after setting the record
    form.refresh();
    form.refresh();
};

window.loadRAPetsGrid = function () {

    // if form is loaded then return
    if (!("RAPetsGrid" in w2ui)) {

        // -----------------------------------------------------------
        //      ***** PET GRID *****
        // -----------------------------------------------------------
        $().w2grid({
            name: 'RAPetsGrid',
            header: 'Pets',
            show: {
                toolbar: true,
                toolbarSearch: false,
                toolbarAdd: true,
                toolbarReload: false,
                toolbarInput: false,
                toolbarColumns: false,
                footer: true,
            },
            multiSelect: false,
            style: 'border: none; display: block;',
            columns: [
                {
                    field: 'recid',
                    caption: 'recid',
                    hidden: true
                },
                {
                    field: 'TMPPETID',
                    caption: 'TMPPETID',
                    hidden: true
                },
                {
                    field: 'PETID',
                    caption: 'PETID',
                    hidden: true
                },
                {
                    field: 'haveError',
                    size: '30px',
                    hidden: false,
                    render: function (record) {
                        var haveError = false;
                        if (app.raflow.validationErrors.pets) {
                            var pets = app.raflow.validationCheck.errors.pets.errors;
                            for (var i = 0; i < pets.length; i++) {
                                if (pets[i].TMPPETID === record.TMPPETID && pets[i].total > 0) {
                                    haveError = true;
                                    break;
                                }
                            }
                        }
                        if (haveError) {
                            return '<i class="fas fa-exclamation-triangle" title="error"></i>';
                        } else {
                            return "";
                        }
                    }
                },
                {
                    field: 'TMPTCID',
                    caption: 'Contact<br>Person',
                    size: '150px',
                    render: function (record/*, index, col_index*/) {
                        var html = '';
                        if (record) {
                            var items = app.raflow.peopleW2UIItems;
                            for (var s in items) {
                                if (items[s].id == record.TMPTCID) html = items[s].text;
                            }
                        }
                        return html;
                    }
                },
                {
                    field: 'Name',
                    caption: 'Name',
                    size: '150px'
                },
                {
                    field: 'Type',
                    caption: 'Type',
                    size: '120px'
                },
                {
                    field: 'Breed',
                    caption: 'Breed',
                    size: '150px'
                },
                {
                    field: 'Color',
                    caption: 'Color',
                    size: '100px'
                },
                {
                    field: 'Weight',
                    caption: 'Weight<br>(pounds)',
                    size: '100px'
                },
            ],
            onRefresh: function (event) {
                var grid = this;
                event.onComplete = function (){
                    $("#RAPetsGrid_checkbox")[0].checked = app.raflow.Flow.Data.meta.HavePets;
                    $("#RAPetsGrid_checkbox")[0].disabled = app.raflow.Flow.Data.meta.HavePets;
                    lockOnGrid("RAPetsGrid");

                    ShowHideGridToolbarAddButton(grid.name);
                };
            },
            onClick: function(event) {
                event.onComplete = function() {
                    var yes_args = [this, event.recid],
                        no_args = [this],
                        no_callBack = function(grid) {
                            grid.select(app.last.grid_sel_recid);
                            return false;
                        },
                        yes_callBack = function(grid, recid) {
                            app.last.grid_sel_recid = parseInt(recid);

                            // keep highlighting current row in any case
                            grid.select(app.last.grid_sel_recid);

                            // get TMPPETID from grid
                            var TMPPETID = grid.get(recid).TMPPETID;

                            // keep this clicked TMPPETID in last object
                            app.raflow.last.TMPPETID = TMPPETID;

                            // render layout in the slider
                            ShowSliderContentW2UIComp(w2ui.RAPetLayout, RACompConfig.pets.sliderWidth);

                            // load pet fees grid
                            setTimeout(function() {
                                // fill layout with components and with data
                                SetRAPetLayoutContent(TMPPETID);
                            }, 0);

                            // load form fields error
                            setTimeout(function () {
                                displayRAPetFormError();
                            }, 500);

                        };

                    // warn user if form content has been changed
                    form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
                };
            },
            onAdd: function (/*event*/) {
                var yes_args = [this],
                    no_callBack = function() {
                        return false;
                    },
                    yes_callBack = function(grid) {
                        app.last.grid_sel_recid = -1;
                        grid.selectNone();

                        // get new entry for pet
                        RAFlowNewPetAJAX()
                        .done(function(data) {
                            // get last clicked TMPPETID
                            var TMPPETID = app.raflow.last.TMPPETID;

                            // render the layout in slider
                            ShowSliderContentW2UIComp(w2ui.RAPetLayout, RACompConfig.pets.sliderWidth);

                            // load pet fees grid
                            setTimeout(function() {
                                // fill layout with components
                                SetRAPetLayoutContent(TMPPETID);
                            }, 0);
                        });
                    };

                // warn user if form content has been changed
                form_dirty_alert(yes_callBack, no_callBack, yes_args);
            }
        });

        //------------------------------------------------------------------------
        //  petLayout - The layout to contain the petForm and petFees grid
        //              top  -      petForm
        //              main -      petFeesGrid
        //              bottom -    action buttons form
        //------------------------------------------------------------------------
        $().w2layout({
            name: 'RAPetLayout',
            padding: 0,
            panels: [
                { type: 'left',    size: 0,     hidden: true },
                { type: 'top',     size: '50%', hidden: false, content: 'top',  resizable: true, style: app.pstyle },
                { type: 'main',    size: '50%', hidden: false, content: 'main', resizable: true, style: app.pstyle },
                { type: 'preview', size: 0,     hidden: true,  content: 'PREVIEW'  },
                { type: 'bottom',  size: 50,    hidden: false, content: 'bottom', resizable: false, style: app.pstyle },
                { type: 'right',   size: 0,     hidden: true }
            ]
        });

        // -----------------------------------------------------------
        //      ***** PET FORM *****
        // -----------------------------------------------------------
        $().w2form({
            name    : 'RAPetForm',
            header  : 'Add Pet information',
            style   : 'border: 0px; background-color: transparent; display: block;',
            formURL : '/webclient/html/raflow/formra-pets.html',
            toolbar : {
                items: [
                    { id: 'bt3', type: 'spacer' },
                    { id: 'btnClose', type: 'button', icon: 'fas fa-times'}
                ],
                onClick: function (event) {
                    switch (event.target){
                        case 'btnClose':
                            HideSliderContent();
                            w2ui.RAPetsGrid.selectNone();
                            break;
                    }
                }
            },
            fields  : [
                { field: 'recid',                   type: 'int',    required: false,     html: { caption: 'recid', page: 0, column: 0 } },
                { field: 'TMPPETID',                type: 'int',    required: false  },
                { field: 'PETID',                   type: 'int',    required: false,     html: { caption: 'PETID', page: 0, column: 0 } },
                { field: 'TMPTCID',                 type: 'list',   required: false,     options: {items: [], selected: {}} },
                { field: 'Name',                    type: 'text',   required: true   },
                { field: 'Breed',                   type: 'text',   required: false  },
                { field: 'Type',                    type: 'text',   required: false  },
                { field: 'Color',                   type: 'text',   required: false  },
                { field: 'Weight',                  type: 'float',  required: false  },
            ],
            actions: {
                reset: function() {
                    w2ui.RAPetForm.clear();
                }
            },
            onRefresh: function(event) {
                event.onComplete = function() {
                    var form = w2ui.RAPetForm,
                        header = "Edit Rental Agreement Pets ({0})";

                    // there is NO PETID actually, so have to work around with recid key
                    formRefreshCallBack(form, "TMPPETID", header);

                    // selection of contact person
                    var TMPTCIDSel = {};
                    app.raflow.peopleW2UIItems.forEach(function(item) {
                        if (item.id === form.record.TMPTCID) {
                            $.extend(TMPTCIDSel, item);
                        }
                    });
                    form.get("TMPTCID").options.items = app.raflow.peopleW2UIItems;
                    form.get("TMPTCID").options.selected = TMPTCIDSel;

                    // hide delete button if it is NewRecord
                    if (form.record.TMPPETID === 0) {
                        $("#RAPetFormBtns").find("button[name=delete]").addClass("hidden");
                    } else {
                        $("#RAPetFormBtns").find("button[name=delete]").removeClass("hidden");
                    }

                    // format header
                    var petIdentity = form.record.Name,
                        petString   = "<em>new</em>";

                    if (form.record.PETID > 0) {
                        petString = petIdentity;
                    } else if (petIdentity) {
                        petString = "<em>new</em> - {0}".format(petIdentity);
                    }
                    form.header = "Edit Pet (<strong>{0}</strong>)".format(petString);

                    // FREEZE THE INPUTS IF VERSION IS RAID
                    EnableDisableRAFlowVersionInputs(form);
                };
            },
            onChange: function(event) {
                event.onComplete = function() {

                    // formRecDiffer: 1=current record, 2=original record, 3=diff object
                    var diff = formRecDiffer(this.record, app.active_form_original, {});
                    // if diff == {} then make dirty flag as false, else true
                    if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                        app.form_is_dirty = false;
                    } else {
                        app.form_is_dirty = true;
                    }
                };
            }
        });

        //------------------------------------------------------------------------
        //     ***** PET ACTION FORM BUTTONS *****
        //------------------------------------------------------------------------
        $().w2form({
            name: 'RAPetFormBtns',
            style: 'border: none; background-color: transparent;',
            formURL: '/webclient/html/raflow/formra-petbtns.html',
            url: '',
            fields: [],
            actions: {
                save: function() {
                    var f           = w2ui.RAPetForm,
                        TMPPETID    = f.record.TMPPETID;

                    // clean dirty flag of form
                    app.form_is_dirty = false;

                    // validate form
                    var errors = f.validate();
                    if (errors.length > 0) return;

                    // update the modified data
                    SetlocalDataFromRAPetFormRecord(TMPPETID);

                    // save this records in json Data
                    SavePetsCompData()
                    .done(function(data) {
                        if (data.status === 'success') {
                            // re-assign records in grid
                            AssignPetsGridRecords();

                            // reset the form
                            f.actions.reset();

                            // close the form
                            HideSliderContent();
                        } else {
                            f.message(data.message);
                        }
                    })
                    .fail(function(data) {
                        console.log("failure " + data);
                    });
                },
                saveadd: function() {
                    var f           = w2ui.RAPetForm,
                        grid        = w2ui.RAPetsGrid,
                        TMPPETID    = f.record.TMPPETID;

                    // clean dirty flag of form
                    app.form_is_dirty = false;

                    // validate form
                    var errors = f.validate();
                    if (errors.length > 0) return;

                    // update local data from this form record
                    SetlocalDataFromRAPetFormRecord(TMPPETID);

                    // save this records in json Data
                    SavePetsCompData()
                    .done(function(data) {
                        if (data.status === 'success') {

                            // get new entry for pet
                            RAFlowNewPetAJAX()
                            .done(function(data) {
                                // IT'S MANAGED IN AJAX API
                                var TMPPETID = app.raflow.last.TMPPETID;

                                // add new formatted record to current form
                                f.actions.reset();
                                f.record = GetPetLocalData(TMPPETID);
                                f.refresh();
                                f.refresh();

                                // re-assign records in grid
                                AssignPetsGridRecords();
                            })
                            .fail(function(data) {
                                f.message("failure " + data);
                            });
                        } else {
                            f.message(data.message);
                        }
                    })
                    .fail(function(data) {
                        console.log("failure " + data);
                    });
                },
                delete: function() {
                    var f = w2ui.RAPetForm;

                    // get local data from TMPPETID
                    var compData = GetRAFlowCompLocalData("pets") || [];
                    var itemIndex = GetPetLocalData(f.record.TMPPETID, true);

                    // if it exists then
                    if (itemIndex > -1) {

                        // remove locally
                        compData.splice(itemIndex, 1);

                        // save this records in json Data
                        SavePetsCompData()
                        .done(function(data) {
                            if (data.status === 'success') {
                                // reset form
                                f.actions.reset();

                                // reassign grid records
                                AssignPetsGridRecords();

                                // close the form
                                HideSliderContent();

                                // Unselect all selected record from the grid
                                w2ui.RAPetsGrid.selectNone();
                            } else {
                                f.message(data.message);
                            }
                        })
                        .fail(function(data) {
                            console.log("failure " + data);
                        });
                    }
                },
            },
            onRefresh: function(event) {
                var form = this;
                event.onComplete = function() {
                    // FREEZE THE INPUTS IF VERSION IS RAID
                    EnableDisableRAFlowVersionInputs(form);
                };
            },
        });

        // -----------------------------------------------------------
        //      ***** PET ***** FEES ***** GRID *****
        // -----------------------------------------------------------
        $().w2grid({
            name: 'RAPetFeesGrid',
            header: 'Pet Fees',
            show: {
                toolbar:        true,
                header:         false,
                toolbarSearch:  false,
                toolbarAdd:     true,
                toolbarReload:  false,
                toolbarInput:   false,
                toolbarColumns: false,
                footer:         false
            },
            multiSelect: false,
            style: 'border-color: silver; border-style: solid; border-width: 1px 0 1px 0;',
            columns: GetFeeGridColumns('RAPetFeesGrid'),
            onClick: function(event) {
                event.onComplete = function() {
                    var yes_args = [this, event.recid],
                        no_args = [this],
                        no_callBack = function(grid) {
                            grid.select(app.last.grid_sel_recid);
                            return false;
                        },
                        yes_callBack = function(grid, recid) {
                            var feeForm = w2ui.RAPetFeeForm;

                            var sliderID = 2;
                            appendNewSlider(sliderID);
                            $("#raflow-container")
                                .find(".slider[data-slider-id="+sliderID+"]")
                                .find(".slider-content")
                                .width(400)
                                .w2render(feeForm);

                            app.last.grid_sel_recid = parseInt(recid);

                            // keep highlighting current row in any case
                            grid.select(app.last.grid_sel_recid);

                            // get TMPPETID from last of raflow
                            var TMPPETID = app.raflow.last.TMPPETID;

                            // get TMPASMID from grid record
                            var TMPASMID = grid.get(recid).TMPASMID;

                            // get all account rules then
                            var BID = getCurrentBID();
                            GetAllARForFeeForm(BID)
                            .done(function(data) {
                                // get filtered account rules items
                                feeForm.get("ARID").options.items = GetFeeAccountRulesW2UIListItems(BID, "pets");

                                // set record in form
                                SetFeeFormRecordFromFeeData(TMPPETID, TMPASMID, "pets");
                                feeForm.record.RentCycleText = app.cycleFreq[feeForm.record.RentCycle];

                                ShowSliderContentW2UIComp(feeForm, SliderContentDivLength, sliderID);
                                feeForm.refresh(); // need to refresh for header changes

                                // When RentCycle is Norecur then disable the RentCycle list field.
                                var isDisabled = feeForm.record.RentCycleText.text === app.cycleFreq[0];
                                $("#RentCycleText").prop("disabled", isDisabled);

                                // displat form field error if it have
                                setTimeout(function(){
                                    displayRAPetFeeFormError(w2ui.RAPetForm.record.TMPPETID);
                                }, 500);
                            })
                            .fail(function(data) {
                                console.log("failure" + data);
                            });
                        };

                    // warn user if form content has been changed
                    form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
                };
            },
            onAdd: function(/*event*/) {
                var feesGrid    = w2ui.RAPetFeesGrid,
                    feeForm     = w2ui.RAPetFeeForm;

                var sliderID = 2;
                appendNewSlider(sliderID);
                $("#raflow-container")
                    .find(".slider[data-slider-id="+sliderID+"]")
                    .find(".slider-content")
                    .width(400)
                    .w2render(feeForm);

                // new record so select none
                feesGrid.selectNone();

                var TMPPETID = app.raflow.last.TMPPETID;

                // get all account rules in fit those in form "ARID" field
                var BID = getCurrentBID();
                GetAllARForFeeForm(BID)
                .done(function(data) {
                    // get filtered account rules items
                    feeForm.get("ARID").options.items = GetFeeAccountRulesW2UIListItems(BID, "pets");

                    // set form record
                    SetFeeFormRecordFromFeeData(TMPPETID, 0, "pets");
                    feeForm.record.recid = feesGrid.records.length + 1;

                    // show form in the DOM
                    ShowSliderContentW2UIComp(feeForm, SliderContentDivLength, sliderID);
                    feeForm.refresh();
                })
                .fail(function(data) {
                    console.log("failure" + data);
                });
            },
            onRefresh: function(event) {
                var grid = this;
                event.onComplete = function() {
                    ShowHideGridToolbarAddButton(grid.name);
                };
            }
        });

        // -----------------------------------------------------------
        //      ***** PET ***** FEE ***** FORM *****
        // -----------------------------------------------------------
        $().w2form({
            name: 'RAPetFeeForm',
            header: 'Add New Pet Fee',
            style: 'border: none; display: block;',
            formURL: '/webclient/html/raflow/formra-fee.html',
            focus: -1,
            fields: GetFeeFormFields(),
            toolbar : GetFeeFormToolbar(),
            actions: {
                reset: function () {
                    w2ui.RAPetFeeForm.clear();
                },
                save: function() {
                    var feeForm     = w2ui.RAPetFeeForm,
                        TMPASMID    = feeForm.record.TMPASMID;

                    // get TMPPETID from last of raflow
                    var TMPPETID = app.raflow.last.TMPPETID;

                    // clean dirty flag of form
                    app.form_is_dirty = false;

                    // set local fee data from fee form
                    SetFeeDataFromFeeFormRecord(TMPPETID, TMPASMID, "pets");

                    SavePetsCompData()
                    .done(function (data) {
                        if (data.status === 'success') {
                            // Re render the fees grid records
                            AssignPetFeesGridRecords(TMPPETID);

                            // reset the form
                            feeForm.actions.reset();

                            // close the form
                            HideSliderContent(2);
                        } else {
                            feeForm.message(data.message);
                        }
                    })
                    .fail(function (data) {
                        console.log("failure " + data);
                    });
                },
                saveadd: function() {
                    var feeForm     = w2ui.RAPetFeeForm,
                        feesGrid    = w2ui.RAPetFeesGrid,
                        TMPASMID    = feeForm.record.TMPASMID;

                    // get TMPPETID from last of raflow
                    var TMPPETID = app.raflow.last.TMPPETID;

                    // clean dirty flag of form
                    app.form_is_dirty = false;

                    // set local fee data from fee form
                    SetFeeDataFromFeeFormRecord(TMPPETID, TMPASMID, "pets");

                    SavePetsCompData()
                    .done(function (data) {
                        if (data.status === 'success') {

                            // reset the form
                            feeForm.actions.reset();

                            // set record in form
                            feeForm.record = GetFeeFormInitRecord();
                            feeForm.record.recid = feesGrid.records.length + 1;
                            feeForm.refresh();

                            // enable this field
                            $(feeForm.box).find("#RentCycleText").prop("disabled", false);

                            // Re render the fees grid records
                            AssignPetFeesGridRecords(TMPPETID);

                        } else {
                            feeForm.message(data.message);
                        }
                    })
                    .fail(function (data) {
                        console.log("failure " + data);
                    });
                },
                delete: function() {
                    var feeForm     = w2ui.RAPetFeeForm,
                        TMPASMID    = feeForm.record.TMPASMID;

                    // clean dirty flag of form
                    app.form_is_dirty = false;

                    // FRESH NEW FEE THEN JUST RETURN WITH CLOSING THE FORM
                    if (TMPASMID === 0) {
                        // reset form
                        feeForm.actions.reset();

                        // close the form
                        HideSliderContent(2);

                        return;
                    }

                    // get TMPPETID from last of raflow
                    var TMPPETID = app.raflow.last.TMPPETID;

                    var localPetData = GetPetLocalData(TMPPETID);
                    if (localPetData.Fees.length > 0) {
                        var itemIndex = GetPetFeeLocalData(TMPPETID, TMPASMID, true);

                        // remove fee item
                        localPetData.Fees.splice(itemIndex, 1);

                        // set this modified local pet data to back
                        SetPetLocalData(TMPPETID, localPetData);

                        // sync data on backend side
                        SavePetsCompData()
                        .done(function (data) {
                            if (data.status === 'success') {
                                // reset form
                                feeForm.actions.reset();

                                // // Re render the fees grid records
                                AssignPetFeesGridRecords(TMPPETID);

                                // close the form
                                HideSliderContent(2);
                            } else {
                                feeForm.message(data.message);
                            }
                        })
                        .fail(function (data) {
                            console.log("failure " + data);
                        });
                    }
                }
            },
            onChange: function(event) {
                event.onComplete = function() {
                    var feeForm = w2ui.RAPetFeeForm;

                    // take action on change event for this form
                    FeeFormOnChangeHandler(feeForm, event.target, event.value_new);

                       // formRecDiffer: 1=current record, 2=original record, 3=diff object
                    var diff = formRecDiffer(this.record, app.active_form_original, {});
                    // if diff == {} then make dirty flag as false, else true
                    if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                        app.form_is_dirty = false;
                    } else {
                        app.form_is_dirty = true;
                    }
                };
            },
            onRefresh: function(event) {
                var feeForm = this;
                event.onComplete = function() {

                    // there is NO PETID actually, so have to work around with recid key
                    formRefreshCallBack(feeForm);

                    // set header
                    var header      = "Edit Fee (<strong>{0}</strong>) for Pet (<strong>{1}</strong>)",
                        petIdentity = w2ui.RAPetForm.record.Name,
                        petString   = "<em>new</em>";

                    if (w2ui.RAPetForm.record.PETID > 0) {
                        petString = petIdentity;
                    } else if (petIdentity) {
                        petString = "<em>new</em> - {0}".format(petIdentity);
                    }

                    if (feeForm.record.ARName && feeForm.record.ARName.length > 0) {
                        feeForm.header = header.format(feeForm.record.ARName, petString);
                    } else {
                        feeForm.header = header.format("new", petString);
                    }

                    // minimum actions need to be taken care in refres event for fee form
                    FeeFormOnRefreshHandler(feeForm);
                };
            }
        });
    }

    // now load grid in division
    $('#ra-form #pets .grid-container').w2render(w2ui.RAPetsGrid);
    HideAllSliderContent();

    // load the existing data in pets component
    setTimeout(function () {
        // assign grid records
        AssignPetsGridRecords();
    }, 500);
};

// fill rental agreement pet layout with all forms, grids
window.SetRAPetLayoutContent = function(TMPPETID) {
    w2ui.RAPetLayout.content('bottom',  w2ui.RAPetFormBtns);
    w2ui.RAPetLayout.content('top',     w2ui.RAPetForm);
    w2ui.RAPetLayout.content('main',    w2ui.RAPetFeesGrid);

    // after 0 ms set the record
    setTimeout(function() {
        // set pet form record
        SetRAPetFormRecordFromLocalData(TMPPETID);

        // assign pet fees grid
        var BID = getCurrentBID();
        GetAllARForFeeForm(BID)
        .done(function() {
            AssignPetFeesGridRecords(TMPPETID);
        });
    }, 0);
};

//-----------------------------------------------------------------------------
// GetPetLocalData - returns the clone of pet data for requested TMPPETID
//-----------------------------------------------------------------------------
window.GetPetLocalData = function(TMPPETID, returnIndex) {
    var cloneData = {};
    var foundIndex = -1;
    var compData = GetRAFlowCompLocalData("pets") || [];
    compData.forEach(function(item, index) {
        if (item.TMPPETID == TMPPETID) {
            if (returnIndex) {
                foundIndex = index;
            } else {
                cloneData = $.extend(true, {}, item);
            }
            return false;
        }
    });
    if (returnIndex) {
        return foundIndex;
    }
    return cloneData;
};


//-----------------------------------------------------------------------------
// SetPetLocalData - save the data for requested a TMPPETID in local data
//-----------------------------------------------------------------------------
window.SetPetLocalData = function(TMPPETID, petData) {
    var compData = GetRAFlowCompLocalData("pets") || [];
    var dataIndex = -1;
    compData.forEach(function(item, index) {
        if (item.TMPPETID == TMPPETID) {
            dataIndex = index;
            return false;
        }
    });
    if (dataIndex > -1) {
        compData[dataIndex] = petData;
    } else {
        compData.push(petData);
    }
};

//-----------------------------------------------------------------------------
// AssignPetsGridRecords - will set the pets grid records from local
//                               copy of flow data again
//-----------------------------------------------------------------------------
window.AssignPetsGridRecords = function() {
    var compData = GetRAFlowCompLocalData("pets");
    var grid = w2ui.RAPetsGrid;

    // reset last sel recid
    app.last.grid_sel_recid  =-1;

    // clear the grid
    grid.clear();

    compData.forEach(function(petData) {
        var gridRec = {};

        // for each grid column
        grid.columns.forEach(function(gridColumn) {
            gridRec[gridColumn.field] = petData[gridColumn.field];
        });

        // push the record in grid
        grid.records.push(gridRec);
    });

    // assign record in grid
    reassignGridRecids(grid.name);

    // Display row with light red background if it have error
    displayRAPetsGridError();

    // lock the grid until "Have pets?" checkbox checked.
    lockOnGrid(grid.name);
};

//------------------------------------------------------------------------------
// SavePetsCompData - saves the data on server side
//------------------------------------------------------------------------------
window.SavePetsCompData = function() {
    var compData = GetRAFlowCompLocalData("pets");
    return SaveCompDataAJAX(compData, "pets");
};

//-----------------------------------------------------------------------------
// GetPetFeeLocalData - returns the clone of pet fee data for requested
//                      TMPPETID and TMPASMID
//-----------------------------------------------------------------------------
window.GetPetFeeLocalData = function(TMPPETID, TMPASMID, returnIndex) {
    var cloneData = {};
    var foundIndex = -1;
    var compData = GetRAFlowCompLocalData("pets") || [];
    compData.forEach(function(item, index) {
        if (item.TMPPETID == TMPPETID) {
            var feesData = item.Fees || [];
            feesData.forEach(function(feeItem, index) {
                if (feeItem.TMPASMID == TMPASMID) {
                    if (returnIndex) {
                        foundIndex = index;
                    } else {
                        cloneData = $.extend(true, {}, feeItem);
                    }
                }
            });
            return false;
        }
    });
    if (returnIndex) {
        return foundIndex;
    }
    return cloneData;
};

//-----------------------------------------------------------------------------
// SetPetFeeLocalData - save the data for requested a TMPPETID, TMPASMID
//                   in local data
//-----------------------------------------------------------------------------
window.SetPetFeeLocalData = function(TMPPETID, TMPASMID, petFeeData) {
    var compData = GetRAFlowCompLocalData("pets");
    var pIndex = -1,
        fIndex = -1;

    compData.forEach(function(item, itemIndex) {
        if (item.TMPPETID == TMPPETID) {
            var feesData = item.Fees || [];
            feesData.forEach(function(feeItem, feeItemIndex) {
                if (feeItem.TMPASMID == TMPASMID) {
                    fIndex = feeItemIndex;
                }
                return false;
            });
            pIndex = itemIndex;
            return false;
        }
    });

    // only if pet found then
    if (pIndex > -1) {
        if (fIndex > -1) {
            compData[pIndex].Fees[fIndex] = petFeeData;
        } else {
            compData[pIndex].Fees.push(petFeeData);
        }
    }
};

//-----------------------------------------------------------------------------
// RenderPetFeesGridSummary - will render grid summary row from pet
//                            comp data
//-----------------------------------------------------------------------------
window.RenderPetFeesGridSummary = function(TMPPETID) {
    var petData = GetPetLocalData(TMPPETID),
        grid = w2ui.RAPetFeesGrid,
        Fees = petData.Fees || [];

    // render fees amount summary
    RenderFeesGridSummary(grid, Fees);
};

//-----------------------------------------------------------------------------
// AssignPetFeesGridRecords - will set the pet fees grid records from local
//                            copy of pet fees data again
//-----------------------------------------------------------------------------
window.AssignPetFeesGridRecords = function(TMPPETID) {
    var grid    = w2ui.RAPetFeesGrid,
        BID     = getCurrentBID();

    // clear the grid
    grid.clear();

    // list of fees
    var petData = GetPetLocalData(TMPPETID),
        petFeesData = petData.Fees;

    // pet fees data
    petFeesData.forEach(function(fee) {
        var gridRec = {};

        // for each grid column
        grid.columns.forEach(function(gridColumn) {
            gridRec[gridColumn.field] = fee[gridColumn.field];
        });

        // push the record in grid
        grid.records.push(gridRec);

        // assign recid again
        reassignGridRecids(grid.name);
    });

    // highlight row with light red color if it have error
    displayRAPetFeesGridError();

    // render pet fees grid summary
    RenderPetFeesGridSummary(TMPPETID);
};

// dispalyRAPeopleGridError
// It highlights grid's row if it have error
window.displayRAPetsGridError = function (){
    // load grid errors if any
    var g = w2ui.RAPetsGrid;
    var record, i;
    for (i = 0; i < g.records.length; i++) {
        // get record from grid to apply css
        record = g.get(g.records[i].recid);

        if (!("w2ui" in record)) {
            record.w2ui = {}; // init w2ui if not present
        }
        if (!("class" in record.w2ui)) {
            record.w2ui.class = ""; // init class string
        }
        if (!("style" in record.w2ui)) {
            record.w2ui.style = {}; // init style object
        }
    }

    if (app.raflow.validationErrors.pets) {
        var pets = app.raflow.validationCheck.errors.pets.errors;
        for (i = 0; i < pets.length; i++) {
            var recid = getRecIDFromTMPPETID(g, pets[i].TMPPETID);
            if (pets[i].total > 0) {
                g.get(recid).w2ui.style = "background-color: #EEB4B4";
            }else{
                g.get(recid).w2ui.style = {};
            }
            g.refreshRow(recid);
        }
    }
};

window.displayRAPetFeesGridError = function () {
    // load grid errors if any
    var g = w2ui.RAPetFeesGrid;
    var record, i;
    for (i = 0; i < g.records.length; i++) {
        // get record from grid to apply css
        record = g.get(g.records[i].recid);

        if (!("w2ui" in record)) {
            record.w2ui = {}; // init w2ui if not present
        }
        if (!("class" in record.w2ui)) {
            record.w2ui.class = ""; // init class string
        }
        if (!("style" in record.w2ui)) {
            record.w2ui.style = {}; // init style object
        }
    }

    if (app.raflow.validationErrors.pets) {
        var pets = app.raflow.validationCheck.errors.pets.errors;
        for (i = 0; i < pets.length; i++) {
            for (var j = 0; j < pets[i].fees.errors.length; j++) {
                if (pets[i].fees.errors[j].total > 0) {
                    var recid = getRecIDFromTMPASMID(g, pets[i].fees.errors[j].TMPASMID);
                    g.get(recid).w2ui.style = "background-color: #EEB4B4";
                    g.refreshRow(recid);
                }
            }
        }
    }
};

// getRecIDFromTMPPETID It returns recid of grid record which matches TMPTCID
window.getRecIDFromTMPPETID = function(grid, TMPPETID){
    // var g = w2ui.RAPeopleGrid;
    var recid;
    for (var i = 0; i < grid.records.length; i++) {
        if (grid.records[i].TMPPETID === TMPPETID) {
            recid = grid.records[i].recid;
        }
    }
    return recid;
};

// displayRAPetFormError If form field have error than it highlight with red border and
window.displayRAPetFormError = function(){

    // if pet section doesn't have error than return
    if(!app.raflow.validationErrors.pets){
        return;
    }

    var form = w2ui.RAPetForm;
    var record = form.record;

    // get list of pets
    var pets = app.raflow.validationCheck.errors.pets.errors;

    // get index of pet for whom form is opened
    var index = getPetIndex(record.TMPPETID, pets);

    if(index > -1){
        displayFormFieldsError(index, pets, "RAPetForm");
    }
};

// getPetIndex it return an index of pet who have TMPPETID
window.getPetIndex = function (TMPPETID, pets) {

    var index = -1;

    for(var i = 0; i < pets.length; i++){
        // If TMPPETID doesn't match iterate for next element
        if(pets[i].TMPPETID === TMPPETID){
            index = i;
            break;
        }
    }

    return index;
};


// displayRAPetFeeFormError If form field have error than it highlight with red border and
window.displayRAPetFeeFormError = function(TMPPETID){

    // if pet section doesn't have error than return
    if(!app.raflow.validationErrors.pets){
        return;
    }

    var form = w2ui.RAPetFeeForm;
    var record = form.record;

    // get list of pets
    var pets = app.raflow.validationCheck.errors.pets.errors;

    // get index of pet for whom form is opened
    var petIndex = getPetIndex(TMPPETID, pets);

    var index = getFeeIndex(record.TMPASMID, pets[petIndex].fees.errors);

    if(index > -1){
        displayFormFieldsError(index, pets[petIndex].fees.errors, "RAPetFeeForm");
    }
};

/*global
    loadRAActionTemplate,
    loadRAActionForm,
    reloadActionForm,
    submitActionForm,
    getSLStringList,
    refreshLabels,
    GetVehicleIdentity,
    dtFormatISOToW2ui,
    localtimeToUTC,
    UpdateRAFlowLocalData,
    GetCurrentFlowID, CloseRAFlowLayout,
    ChangeRAFlowVersionToolbar,
    displayErrorDot,
    displayActiveComponentError,
    w2uiUTCDateControlString, RAFlowAJAX
*/
"use strict";

var actionsUI = {
    hdrHeight: 122,
    ftrHeight: 150
};

// -------------------------------------------------------------------------------
// submitActionForm - submits the data of action form
// @params - data
// -------------------------------------------------------------------------------
window.submitActionForm = function(data) {
    var BID         = getCurrentBID(),
        FlowID      = GetCurrentFlowID();

    var url = "/v1/raactions/" + BID.toString() + "/" + FlowID.toString() + "/";

    return RAFlowAJAX(url, "POST", data, false)
    .done(function(data) {
        if (data.status !== "success") {
            console.error(data.message);
            alert(data.message);
            return;
        }

        switch(true) {
            case (data.record.Flow.FlowID === -1):
                alert("Flow Already Exists");
                return false;
            case (data.record.Flow.FlowID === 0):
                if (app.raflow.version === 'refno') {
                    // load ActionForm and Toolbar for raid version
                    w2ui.newraLayout.content('right', '');
                    w2ui.newraLayout.hide('right', true);
                    app.raflow.version = 'raid'; // AS IT WAS MIGRATED
                }

                // Update flow local copy and green checks
                UpdateRAFlowLocalData(data, true);
                break;
            case (data.record.Flow.FlowID > 0):

                // FlowID > 0 that means it is refno version
                app.raflow.version = 'refno';

                // Update flow local copy and green checks
                UpdateRAFlowLocalData(data, true);

                // validation errors based on validation check
                app.raflow.validationErrors = {
                    dates: app.raflow.validationCheck.errors.dates.total > 0 || app.raflow.validationCheck.nonFieldsErrors.dates.length > 0,
                    people: app.raflow.validationCheck.errors.people.total > 0 || app.raflow.validationCheck.nonFieldsErrors.people.length > 0,
                    pets: app.raflow.validationCheck.errors.pets.total > 0 || app.raflow.validationCheck.nonFieldsErrors.pets.length > 0,
                    vehicles: app.raflow.validationCheck.errors.vehicles.total > 0 || app.raflow.validationCheck.nonFieldsErrors.vehicles.length > 0,
                    rentables: app.raflow.validationCheck.errors.rentables.total > 0 || app.raflow.validationCheck.nonFieldsErrors.rentables.length > 0,
                    parentchild: app.raflow.validationCheck.errors.parentchild.total > 0 || app.raflow.validationCheck.nonFieldsErrors.parentchild.length > 0,
                    tie: app.raflow.validationCheck.errors.tie.people.total > 0 || app.raflow.validationCheck.nonFieldsErrors.tie.length > 0
                };

                displayErrorDot();

                displayActiveComponentError();

                if(app.raflow.validationCheck.total > 0){
                    w2ui.raActionLayout.get('top').toolbar.click('btnBackToRA');
                    return false;
                }

                break;
        }

        if("raActionLayout" in w2ui){
            w2ui.raActionLayout.get('main').content = "";
        }

        loadRAActionTemplate();
        setTimeout(function() {
            reloadActionForm();
        },200);

    })
    .fail(function(data) {
        console.error(data);
        alert(data);
    });
};

// -------------------------------------------------------------------------------
// reloadActionForm - reloads the data of action form according to state
// -------------------------------------------------------------------------------
window.reloadActionForm = function() {
    // if version is refno, then remove NoticeToMove and Terminate options from Dropdown
    if (app.raflow.version === 'refno') {
        var itemArrayObject = Array.from(app.w2ui.listItems.RAActions);
        itemArrayObject.pop();
        itemArrayObject.pop();

        w2ui.RAActionForm.get('RAActions').options.items = itemArrayObject;

    } else if( app.raflow.version === 'raid' ) {
        w2ui.RAActionForm.get('RAActions').options.items = app.w2ui.listItems.RAActions;
    }

    // HIDE ALL OF THE COMPONENTS, LABELS, DIV'S
    $('#RAActionRAInfo').hide();
    $('#RAActionTerminatedRAInfo').hide();
    $('#RAActionNoticeToMoveInfo').hide();

    $('button[name=RAGenerateRAForm]').hide();
    $('button[name=RAGenerateMoveInInspectionForm]').hide();
    $('button[name=RAGenerateMoveOutForm]').hide();
    $('button[name=save]').hide();

    w2ui.RAActionForm.get('RAApprovalDecision1').hidden = true;
    w2ui.RAActionForm.get('RADeclineReason1').hidden = true;
    w2ui.RAActionForm.get('RAApprovalDecision2').hidden = true;
    w2ui.RAActionForm.get('RADeclineReason2').hidden = true;
    w2ui.RAActionForm.get('RATerminationReason').hidden = true;
    w2ui.RAActionForm.get('RADocumentDate').hidden = true;
    w2ui.RAActionForm.get('RANoticeToMoveDate').hidden = true;

    var data = app.raflow.Flow.Data;
    var raFlags = data.meta.RAFLAGS;
    var state = parseInt(raFlags & 0xf);

    // DISPLAY COMPONENTS, LABELS AND DIV'S ACCORDING TO CURRENT STATE
    switch (state) {
        // "Application Being Completed"
        case 0:
            break;

        // "Pending First Approval"
        case 1:
            w2ui.RAActionForm.get('RAApprovalDecision1').hidden = false;
            $('button[name=save]').show();
            $('button[name=save]').attr('disabled',true);
            break;

        // "Pending Second Approval"
        case 2:
            w2ui.RAActionForm.get('RAApprovalDecision2').hidden = false;
            $('button[name=save]').show();
            $('button[name=save]').attr('disabled',true);
            break;

        // "Move-In / Execute Modification"
        case 3:
            // auto load date in component if it is present in meta
            if (data.meta.DocumentDate != "1900-01-01 00:00:00 UTC"){
                var documentDate = w2uiUTCDateControlString(new Date((data.meta.DocumentDate).replace(" ", "T").replace(" UTC", "Z")));
                w2ui.RAActionForm.record.RADocumentDate = documentDate;
            }

            w2ui.RAActionForm.get('RADocumentDate').hidden = false;
            $('button[name=RAGenerateRAForm]').show();
            $('button[name=RAGenerateMoveInInspectionForm]').show();
            $('button[name=save]').show();
            break;

        // "Active"
        case 4:
            $('#RAActionRAInfo').show();
            break;

        // "Notice To Move"
        case 5:
            $('#RAActionNoticeToMoveInfo').show();
            break;

        // "Terminated"
        case 6:
            $('#RAActionTerminatedRAInfo').show();
            $('button[name=RAGenerateRAForm]').show();
            break;

        default:
    }
    w2ui.RAActionForm.refresh();
};

window.refreshLabels = function () {
    var data = app.raflow.Flow;
    var meta = data.Data.meta;

    //------------------------------------------------------------------------
    // Header Part
    //------------------------------------------------------------------------
    var x = document.getElementById("bannerRAID");
    if (x !== null) {
        if (data.ID == 0) {
            x.innerHTML = 'New Rental Agreement';
        } else {
            x.innerHTML = '' + data.ID;
        }
    }

    x = document.getElementById("bannerTermDates");
    if (x !== null) {
        x.innerHTML = '' + data.Data.dates.AgreementStart + ' - ' + data.Data.dates.AgreementStop;
    }

    x = document.getElementById("bannerPossessionDates");
    if (x !== null) {
        x.innerHTML = '' + data.Data.dates.PossessionStart + ' - ' + data.Data.dates.PossessionStop;
    }

    x = document.getElementById("bannerRentDates");
    if (x !== null) {
        x.innerHTML = '' + data.Data.dates.RentStart + ' - ' + data.Data.dates.RentStop;
    }

    //------------------------------------------------------------------------
    // Footer Part
    //------------------------------------------------------------------------
    x = document.getElementById("footerApplicationFilledBy");
    if (x !== null) {
        if (meta.ApplicationReadyUID == 0) {
            x.innerHTML = '';
        } else {
            x.innerHTML = dtFormatISOToW2ui((meta.ApplicationReadyDate).replace(" ", "T").replace(" UTC", "Z")) + ' by ' + meta.ApplicationReadyName;
        }
    }

    x = document.getElementById("footerApprover1");
    if (x !== null) {
        if (meta.Approver1 == 0) {
            x.innerHTML = '';
        } else {
            if ((meta.RAFLAGS & (1<<4)) > 0) {
                x.innerHTML = dtFormatISOToW2ui((meta.DecisionDate1).replace(" ", "T").replace(" UTC", "Z")) + '  Approved by ' + meta.Approver1Name ;
            } else{
                var reason1 = app.ApplDeny.find(function(t){if(t.id == meta.DeclineReason1){return t;}});
                var reason1Text = reason1 ? reason1.text : "";
                x.innerHTML = dtFormatISOToW2ui((meta.DecisionDate1).replace(" ", "T").replace(" UTC", "Z")) + '  Declined by ' + meta.Approver1Name + ' (' + reason1Text + ')';
            }
        }
    }

    x = document.getElementById("footerApprover2");
    if (x !== null) {
        if (meta.Approver2 == 0) {
            x.innerHTML = '';
        } else {
            if ((meta.RAFLAGS & (1<<5)) > 0) {
                x.innerHTML = dtFormatISOToW2ui((meta.DecisionDate2).replace(" ", "T").replace(" UTC", "Z")) + '  Approved by ' + meta.Approver2Name;
            } else{
                var reason2 = app.ApplDeny.find(function(t){if(t.id == meta.DeclineReason2){return t;}});
                var reason2Text = reason2 ? reason2.text : "";
                x.innerHTML = dtFormatISOToW2ui((meta.DecisionDate2).replace(" ", "T").replace(" UTC", "Z")) + '  Declined by ' + meta.Approver2Name + ' (' + reason2Text + ')';
            }
        }
    }

    x = document.getElementById("footerMoveInBy");
    if (x !== null) {
        if (meta.MoveInUID == 0) {
            x.innerHTML = '';
        } else {
            x.innerHTML = dtFormatISOToW2ui((meta.MoveInDate).replace(" ", "T").replace(" UTC", "Z")) + ' by ' + meta.MoveInName;
        }
    }

    x = document.getElementById("footerActiveBy");
    if (x !== null) {
        if (meta.ActiveUID == 0) {
            x.innerHTML = '';
        } else {
            x.innerHTML = dtFormatISOToW2ui((meta.ActiveDate).replace(" ", "T").replace(" UTC", "Z")) + ' by ' + meta.ActiveName;
        }
    }

    x = document.getElementById("footerRecievedNoticeToMoveBy");
    if (x !== null) {
        if (meta.NoticeToMoveUID == 0) {
            x.innerHTML = '';
        } else {
            var moveDate = '';
            if (meta.NoticeToMoveDate != "1900-01-01 00:00:00 UTC") {
                moveDate = w2uiUTCDateControlString(new Date((meta.NoticeToMoveDate).replace(" ", "T").replace(" UTC", "Z")));
            }
            x.innerHTML = dtFormatISOToW2ui((meta.NoticeToMoveReported).replace(" ", "T").replace(" UTC", "Z")) + ' by ' + meta.NoticeToMoveName + ' (move date: ' + moveDate + ')';
        }
    }

    x = document.getElementById("footerTerminatedBy");
    if (x !== null) {
        if (meta.LeaseTerminationReason == 0) {
            x.innerHTML = '';
        } else {
            var tReason;
            var tReasonText;
            if (meta.DeclineReason1 > 0 || meta.DeclineReason2 > 0) {
                tReason = app.RollerMsgs.find(function(t){if(t.id == meta.LeaseTerminationReason){return t;}});
            } else {
                tReason = app.WhyLeaving.find( function(t){ if(t.id == meta.LeaseTerminationReason) {return t;} } );
                if (typeof tReason === "undefined") {
                    tReason = app.RollerMsgs.find( function(t){ if(t.id == meta.LeaseTerminationReason) {return t;} } );
                }
            }
            tReasonText = tReason ? tReason.text : "";
            x.innerHTML = dtFormatISOToW2ui((meta.TerminationDate).replace(" ", "T").replace(" UTC", "Z")) + ' by '+ meta.TerminatorName + ' (' + tReasonText + ')';
        }
    }


    //------------------------------------------------------------------------
    // State Terminated Display Info
    //------------------------------------------------------------------------
    x = document.getElementById("bannerTerminatedBy");
    if (x !== null) {
        if (meta.TerminatorUID > 0) {
            x.innerHTML = dtFormatISOToW2ui((meta.TerminationDate).replace(" ", "T").replace(" UTC", "Z")) + ' by ' + meta.TerminatorName;
        } else {
            x.innerHTML = '';
        }
    }

    x = document.getElementById("bannerTerminationReason");
    if (x !== null) {
        if (meta.LeaseTerminationReason > 0) {
            var termination;
            var terminationReason;
            if (meta.DeclineReason1 > 0) {
                termination = app.RollerMsgs.find(function(t){if(t.id == meta.LeaseTerminationReason){return t;}});
                terminationReason = termination ? termination.text : "";

                // APPEND DECLINE REASON 1 IN BRACKETS
                var dreason1 = app.ApplDeny.find(function(t){if(t.id == meta.DeclineReason1){return t;}});
                var dreason1Text = dreason1 ? dreason1.text : "";

                // IN NEW LINE
                terminationReason += " ( "+ dreason1Text +" )";

            } else if (meta.DeclineReason2 > 0) {
                termination = app.RollerMsgs.find(function(t){if(t.id == meta.LeaseTerminationReason){return t;}});
                terminationReason = termination ? termination.text : "";

                // APPEND DECLINE REASON 1 IN BRACKETS
                var dreason2 = app.ApplDeny.find(function(t){if(t.id == meta.DeclineReason2){return t;}});
                var dreason2Text = dreason2 ? dreason2.text : "";

                // IN NEW LINE
                terminationReason += " ( "+ dreason2Text +" )";

            } else {
                termination = app.WhyLeaving.find(function(t){if(t.id == meta.LeaseTerminationReason){return t;}});
                // If RA is updated then the reason id will not be in WhyLeaving
                // hence we get it from RollerMsg
                if (!termination) {
                    termination = app.RollerMsgs.find(function(t){if(t.id == meta.LeaseTerminationReason){return t;}});
                }
                terminationReason = termination ? termination.text : "";
            }
            x.innerHTML = terminationReason;
        } else {
            x.innerHTML = '';
        }
    }

    // State Notice To Move Display Info
    x = document.getElementById("bannerMoveDate");
    if (x !== null) {
        if (meta.NoticeToMoveDate != "1900-01-01 00:00:00 UTC") {
            x.innerHTML = w2uiUTCDateControlString(new Date((meta.NoticeToMoveDate).replace(" ", "T").replace(" UTC", "Z")));
        } else {
            x.innerHTML = '';
        }
    }

    x = document.getElementById("bannerRecievedNoticeDate");
    if (x !== null) {
        if (meta.NoticeToMoveReported != "1900-01-01 00:00:00 UTC") {
            x.innerHTML = dtFormatISOToW2ui((meta.NoticeToMoveReported).replace(" ", "T").replace(" UTC", "Z"));
        } else {
            x.innerHTML = '';
        }
    }

    // State Active Display Info
    x = document.getElementById("bannerDocumentDate");
    if (x !== null) {
        if (meta.DocumentDate != "1900-01-01 00:00:00 UTC") {
            x.innerHTML = w2uiUTCDateControlString(new Date((meta.DocumentDate).replace(" ", "T").replace(" UTC", "Z")));
        } else {
            x.innerHTML = '';
        }
    }

    x = document.getElementById("bannerPayors");
    if (x !== null) {
        if (data.Data.people.length >0) {
            var payorList = [];
            data.Data.people.forEach(function(item) {
                if(item.IsRenter) {
                    payorList.push(item.FirstName + ' ' +item.MiddleName+ ' ' +item.LastName);
                }
            });
            x.innerHTML = payorList;
        } else {
            x.innerHTML = '';
        }
    }

    x = document.getElementById("bannerUsers");
    if (x !== null) {
        if (data.Data.people.length >0) {
            var userList = [];
            data.Data.people.forEach(function(item) {
                if(item.IsOccupant) {
                    userList.push(item.FirstName + ' ' +item.MiddleName+ ' ' +item.LastName);
                }
            });
            x.innerHTML = userList;
        } else {
            x.innerHTML = '';
        }
    }

    x = document.getElementById("bannerGuarantors");
    if (x !== null) {
        if (data.Data.people.length >0) {
            var guarantorList = [];
            data.Data.people.forEach(function(item) {
                if(item.IsGuarantor) {
                    guarantorList.push(item.FirstName + ' ' +item.MiddleName+ ' ' +item.LastName);
                }
            });
            x.innerHTML = guarantorList;
        } else {
            x.innerHTML = '';
        }
    }

    x = document.getElementById("bannerRentables");
    if (x !== null) {
        if (data.Data.rentables.length >0) {
            var rentableList = [];
            data.Data.rentables.forEach(function(item) {
                rentableList.push(item.RentableName);
            });
            x.innerHTML = rentableList;
        } else {
            x.innerHTML = '';
        }
    }

    x = document.getElementById("bannerPets");
    if (x !== null) {
            var petList = [];
        if (data.Data.pets.length >0) {
            data.Data.pets.forEach(function(item) {
                petList.push(item.Name);
            });
            x.innerHTML = petList;
        } else {
            x.innerHTML = '';
        }
    }

    x = document.getElementById("bannerVehicles");
    if (x !== null) {
            var vehicleList = [];
        if (data.Data.vehicles.length >0) {
            data.Data.vehicles.forEach(function(item) {
                vehicleList.push(GetVehicleIdentity(item));
            });
            x.innerHTML = vehicleList;
        } else {
            x.innerHTML = '';
        }
    }
};

//------------------------------------------------------------------------
// loadRAActionTemplate - It creates a layout for action forms and places
//                        it in newralayout's right panel.
//                        Top panel & bottom panel of this layout contains
//                        header & footer of action form respectively.
// -----------------------------------------------------------------------
window.loadRAActionTemplate = function() {
    if(!w2ui.raActionLayout) {
        $().w2layout({
            name: 'raActionLayout',
            padding: 0,
            panels: [
                { type: 'left', style: app.pstyle2, hidden: true },
                { type: 'top', style: app.pstyle2, content:'top', size: actionsUI.hdrHeight,
                    toolbar: {
                        items: [
                            { id: 'btnBackToRA',    type: 'button',     icon: 'fas fa-angle-left', text: '' },
                            { id: 'bt3',            type: 'spacer' },
                            { id: 'btnClose',       type: 'button',     icon: 'fas fa-times' }
                        ],
                        onClick: function (event) {
                            switch(event.target) {
                            case 'btnBackToRA':
                                var no_callBack = function() { return false; },
                                    yes_callBack = function() {
                                        w2ui.newraLayout.content('right','');
                                        w2ui.newraLayout.hide('right',true);
                                        w2ui.raActionLayout.get('main').content.destroy();
                                        w2ui.newraLayout.unlock('main');
                                        w2ui.newraLayout.get('main').toolbar.refresh();

                                        // get the current component of raflow interface (to be previous one)
                                        var active_comp = $(".ra-form-component:visible");

                                        // load target section (for refresh purpose)
                                        loadTargetSection(active_comp.attr("id"), active_comp.attr("id"));
                                    };
                                form_dirty_alert(yes_callBack, no_callBack);
                                break;
                            case 'btnClose':
                                yes_callBack = function() {
                                    CloseRAFlowLayout();
                                };
                                form_dirty_alert(yes_callBack, no_callBack);
                                break;
                            }
                        },
                    }
                },
                { type: 'main', style: app.pstyle2, content: 'main'},
                { type: 'preview', style: app.pstyle2, hidden: true },
                { type: 'bottom', style: app.pstyle2, size: actionsUI.ftrHeight,content:'bottom' },
                { type: 'right', style: app.pstyle2, hidden: true}
            ],
            onRefresh: function(event) {
                event.onComplete = function() {
                    refreshLabels();
                };
            },
            onRender: function(event) {
                event.onComplete = function() {
                    var layout = w2ui.raActionLayout;
                    var btnBackToRAText = "";
                    if (app.raflow.version === "raid") {
                        var RAID = app.raflow.Flow.ID;
                        btnBackToRAText = "<p style='font-size: 10pt; margin: 0 5px;'>Back to <strong>RA" + RAID + "</strong></p>";
                    } else if(app.raflow.version === "refno") {
                        var UserRefNo = app.raflow.Flow.UserRefNo;
                        btnBackToRAText = "<p style='font-size: 10pt; margin: 0 5px;'>Back to <strong>" + UserRefNo + "</strong></p>";
                    }
                    layout.get("top").toolbar.set('btnBackToRA', {text: btnBackToRAText});
                    // REFRESH THE TOOLBAR TO GET THE EFFECT
                    layout.get("top").toolbar.refresh();
                };
            }
        });
        w2ui.raActionLayout.load('top', '/webclient/html/raflow/formra-actionheader.html');
        w2ui.raActionLayout.load('bottom', '/webclient/html/raflow/formra-actionfooter.html');
    }
    w2ui.newraLayout.content('right', w2ui.raActionLayout);

    loadRAActionForm();

    w2ui.newraLayout.show('right', true);
    w2ui.newraLayout.sizeTo('right', 950);
};

// -------------------------------------------------------------------------------
// Rental Agreement Action Form
// -------------------------------------------------------------------------------
window.loadRAActionForm = function() {
    if(! w2ui.RAActionForm) {
        $().w2form({
            name: 'RAActionForm',
            style: 'display: block;',
            focus: -1,
            formURL: '/webclient/html/raflow/formra-actionmain.html',
            fields: [
                { field: 'RAApprovalDecision1', type: 'list', width: 120, required: true, hidden: true,
                    options: {
                        items: [
                            {id: 0, text: "--Select Approve or Decline--"},
                            {id: 1, text: "Approve"},
                            {id: 2, text: "Decline"}
                        ]
                    }
                },
                { field: 'RADeclineReason1', type: 'list', width: 120, required: true, hidden: true,
                    options: {
                        items: getSLStringList(getCurrentBID(), "ApplDeny")
                    }
                },
                { field: 'RAApprovalDecision2', type: 'list', width: 120, required: true, hidden: true,
                    options: {
                        items: [
                            {id: 0, text: "--Select Approve or Decline--"},
                            {id: 1, text: "Approve"},
                            {id: 2, text: "Decline"}
                        ]
                    }
                },
                { field: 'RADeclineReason2', type: 'list', width: 120, required: true, hidden: true,
                    options: {
                        items: getSLStringList(getCurrentBID(), "ApplDeny")
                    }
                },
                { field: 'RADocumentDate', type: 'date', hidden: true, options: { start: '01/01/2000' } },
                { field: 'RANoticeToMoveDate', type: 'date', hidden: true, options: { start: w2uiDateControlString(new Date()) } },
                { field: 'RATerminationReason', type: 'list', width: 120, required: true, hidden: true,
                    options: {
                        items: getSLStringList(getCurrentBID(), "WhyLeaving")
                    }
                },
                { field: 'RAActions', type: 'list', width: 120, required: true, options: {items: app.w2ui.listItems.RAActions}}
            ],
            onChange: function (event) {
                event.done(function(){
                    this.refresh();
                });

                switch(event.target) {
                    case 'RAActions':
                        switch (event.value_new.id) {
                            case 5: // Received Notice-To-Move
                                w2ui.RAActionForm.get('RANoticeToMoveDate').hidden = false;

                                // auto load date in component if it is present in meta
                                if (app.raflow.Flow.Data.meta.NoticeToMoveDate != "1900-01-01 00:00:00 UTC"){
                                    var moveDate = w2uiUTCDateControlString(new Date((app.raflow.Flow.Data.meta.NoticeToMoveDate).replace(" ", "T").replace(" UTC", "Z")));
                                    this.record.RANoticeToMoveDate = moveDate;
                                }

                                w2ui.RAActionForm.get('RATerminationReason').hidden = true;
                                delete this.record.RATerminationReason;
                                $('button[name=updateAction]').attr('disabled',false);
                                break;

                            case 6: // Terminate
                                w2ui.RAActionForm.get('RATerminationReason').hidden = false;
                                $('button[name=updateAction]').attr('disabled',true);

                                delete this.record.RANoticeToMoveDate;
                                w2ui.RAActionForm.get('RANoticeToMoveDate').hidden = true;
                                break;

                            default:
                                w2ui.RAActionForm.get('RATerminationReason').hidden = true;
                                delete this.record.RATerminationReason;
                                $('button[name=updateAction]').attr('disabled',false);

                                delete this.record.RANoticeToMoveDate;
                                w2ui.RAActionForm.get('RANoticeToMoveDate').hidden = true;
                        }
                        break;

                    case 'RAApprovalDecision1':
                        if(event.value_new.text === 'Decline') {
                            $('button[name=save]').attr('disabled',true);
                            w2ui.RAActionForm.get('RADeclineReason1').hidden = false;
                        } else if(event.value_new.text === 'Approve') {
                            $('button[name=save]').attr('disabled',false);
                            w2ui.RAActionForm.get('RADeclineReason1').hidden = true;
                            delete this.record.RADeclineReason1;
                        } else {
                            $('button[name=save]').attr('disabled',true);
                            w2ui.RAActionForm.get('RADeclineReason1').hidden = true;
                            delete this.record.RADeclineReason1;
                        }
                        break;

                    case 'RAApprovalDecision2':
                        if(event.value_new.text === 'Decline') {
                            $('button[name=save]').attr('disabled',true);
                            w2ui.RAActionForm.get('RADeclineReason2').hidden = false;
                        } else if(event.value_new.text === 'Approve') {
                            $('button[name=save]').attr('disabled',false);
                            w2ui.RAActionForm.get('RADeclineReason2').hidden = true;
                            delete this.record.RADeclineReason2;
                        } else {
                            $('button[name=save]').attr('disabled',true);
                            w2ui.RAActionForm.get('RADeclineReason2').hidden = true;
                            delete this.record.RADeclineReason2;
                        }
                        break;

                    case 'RADeclineReason1':
                        if(event.value_new.id === 0) {
                            $('button[name=save]').attr('disabled',true);
                        } else {
                            $('button[name=save]').attr('disabled',false);
                        }
                        break;

                    case 'RADeclineReason2':
                        if(event.value_new.id === 0) {
                            $('button[name=save]').attr('disabled',true);
                        } else {
                            $('button[name=save]').attr('disabled',false);
                        }
                        break;

                    case 'RATerminationReason':
                        if(event.value_new.id === 0) {
                            $('button[name=updateAction]').attr('disabled',true);
                        } else {
                            $('button[name=updateAction]').attr('disabled',false);
                        }
                        break;

                    default:
                        $('button[name=updateAction]').attr('disabled',false);
                        $('button[name=save]').attr('disabled',false);
                }
            },
            onRefresh: function (event) {
                var data = app.raflow.Flow.Data;
                var raFlags = data.meta.RAFLAGS;
                var raStateString = app.RAStates[parseInt(raFlags & 0xf)];

                // var RAID = app.raflow.Flow.ID;
                // if(RAID > 0 &&  (raStateString === "Pending First Approval" || raStateString === "Pending Second Approval")) {
                //     raStateString = 'Modification ' + raStateString;
                // }

                $('#RAActionStateLable').text(raStateString);

                refreshLabels();
            },
            onRender: function (event) {
                w2ui.RAActionForm.record = {
                    RAActions: {id: -1, text: "--Select an Action--"},
                };

                // load sl stringlist in app
                getSLStringList(getCurrentBID(), "RollerMsgs");
            },
            actions: {
                save: function() {
                    var UserRefNo = app.raflow.Flow.UserRefNo;
                    var RAID = app.raflow.Flow.ID;
                    var Mode = "State";
                    var Version = app.raflow.version;

                    var data = app.raflow.Flow.Data;
                    var raFlags = data.meta.RAFLAGS;
                    var raState =parseInt(raFlags & 0xf);

                    var Decision1 = 0;
                    var DeclineReason1 = 0;
                    var Decision2 = 0;
                    var DeclineReason2 = 0;
                    var DocumentDate = "1/1/1900";

                    var reqData = {};
                    switch(raState) {
                        case 1:
                            Decision1 =  w2ui.RAActionForm.record.RAApprovalDecision1.id;
                            DeclineReason1 = w2ui.RAActionForm.record.RADeclineReason1.id;

                            reqData = {
                                "UserRefNo":UserRefNo,
                                "RAID":RAID,
                                "Version":Version,
                                "Mode": Mode,
                                "Decision1": Decision1,
                                "DeclineReason1": DeclineReason1
                            };
                            submitActionForm(reqData);
                            break;
                        case 2:
                            Decision2 =  w2ui.RAActionForm.record.RAApprovalDecision2.id;
                            DeclineReason2 = w2ui.RAActionForm.record.RADeclineReason2.id;

                            reqData = {
                                "UserRefNo":UserRefNo,
                                "RAID":RAID,
                                "Version":Version,
                                "Mode": Mode,
                                "Decision2": Decision2,
                                "DeclineReason2": DeclineReason2
                            };
                            submitActionForm(reqData);
                            break;
                        case 3:
                            if(w2ui.RAActionForm.record.RADocumentDate) {
                                DocumentDate = w2ui.RAActionForm.record.RADocumentDate;
                            }
                            reqData = {
                                "UserRefNo":UserRefNo,
                                "RAID":RAID,
                                "Version":Version,
                                "Mode": Mode,
                                "DocumentDate": DocumentDate
                            };
                            submitActionForm(reqData);
                            break;
                    }
                },
                updateAction: function() {
                    var UserRefNo = app.raflow.Flow.UserRefNo;
                    var RAID = app.raflow.Flow.ID;
                    var Action = this.record.RAActions.id;
                    var TerminationReason = 0;
                    var NoticeToMoveDate = "1/1/1900";
                    var Mode = "Action";
                    var Version = app.raflow.version;

                    var currentState = parseInt(app.raflow.Flow.Data.meta.RAFLAGS & (0xf));
                    //----------------------------------------------------------------
                    // if Action is to change to current state, only do this if we're
                    // in the Notice-To-Move state... in order to change the date.
                    //----------------------------------------------------------------
                    if (Action === currentState && Action != 5) {
                        return;
                    }
                    var reqData = {};
                    switch(Action) {
                        case -1:
                            break;
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            reqData = {
                                "UserRefNo": UserRefNo,
                                "RAID": RAID,
                                "Version": Version,
                                "Action": Action,
                                "Mode": Mode
                            };
                            submitActionForm(reqData);
                            break;
                        case 5:
                            if(w2ui.RAActionForm.record.RANoticeToMoveDate) {
                                NoticeToMoveDate = w2ui.RAActionForm.record.RANoticeToMoveDate;
                            }

                            reqData = {
                                "UserRefNo": UserRefNo,
                                "RAID": RAID,
                                "Version": Version,
                                "Action": Action,
                                "Mode": Mode,
                                "NoticeToMoveDate": NoticeToMoveDate
                            };
                            submitActionForm(reqData);
                            break;
                        case 6:
                            if(w2ui.RAActionForm.record.RATerminationReason.id >0) {
                                TerminationReason = w2ui.RAActionForm.record.RATerminationReason.id;
                            }
                            reqData = {
                                "UserRefNo": UserRefNo,
                                "RAID": RAID,
                                "Version": Version,
                                "Action": Action,
                                "Mode": Mode,
                                "TerminationReason": TerminationReason
                            };
                            submitActionForm(reqData);
                            break;
                    }
                }
            }
        });
    }
    // now render the form in specifiec targeted panel
    w2ui.raActionLayout.content('main', w2ui.RAActionForm);
    setTimeout(function() {
        reloadActionForm();
    }, 100);
};

/*global
    InitRAFlowAjax,
    RACompConfig, w2ui,
    GetRAFlowDataAjax,
    manageParentRentableW2UIItems, managePeopleW2UIItems,
    LoadRAFlowTemplate,
    loadRAActionTemplate,
    getStringListData, initBizErrors, displayErrorDot,
    ChangeRAFlowVersionToolbar, GetRefNoByRAIDFromGrid,
    RenderRAFlowVersionData, CloseRAFlowLayout, DeleteRAFlowAJAX, HideRAFlowLoader
*/

"use strict";

//-----------------------------------------------------------------------------
// LoadRAFlowTemplate - load RA flow with data and green checkmark and
//                      necessary settings, it loads dateForm by default
//
// @params
//   FlowID = Id of the Flow
//-----------------------------------------------------------------------------
window.LoadRAFlowTemplate = function() {
    if("RAActionForm" in w2ui){
        w2ui.RAActionForm.destroy();
    }

    if("raActionLayout" in w2ui){
        w2ui.raActionLayout.destroy();
        w2ui.newraLayout.get('right').content = "";
        w2ui.newraLayout.hide('right');
    }

    // show the loader
    HideRAFlowLoader(false);

    // set the toplayout content
    w2ui.toplayout.content('right', w2ui.newraLayout);
    w2ui.toplayout.show('right', true);
    w2ui.toplayout.sizeTo('right', 950);

    $.get('/webclient/html/raflow/raflowtmpl.html', function(htmlData) {
        // set the content of template HTML into main content of layout
        w2ui.newraLayout.content('main', htmlData);

        // render the new ra layout
        w2ui.newraLayout.render();

        // reset wizard steps
        $(".ra-form-component").hide();
        $("#progressbar #steps-list li").removeClass("active done"); // remove activeClass from all li

        setTimeout(function() {
            // RENDER THE VERSION DATA
            var active_comp_id = "dates";
            RenderRAFlowVersionData(active_comp_id);

            // hide the loader
            HideRAFlowLoader(true);
        }, 0);
    });
};

window.buildRAFlowElements = function() {
    // ------------------------------------------------------
    // raflows grid
    // ------------------------------------------------------
    $().w2grid({
        name: 'raflowsGrid',
        multiSelect: false,
        show: {
            toolbar: true,
            footer: true,
            lineNumbers: false,
            selectColumn: false,
            expandColumn: false,
            toolbarAdd: true,
            toolbarDelete: false,
            toolbarSave: false,
            toolbarEdit: false,
            toolbarSearch: true,
            toolbarInput: true,
            searchAll: true,
            toolbarReload: true,
            toolbarColumns: false,
        },
        searches: [
            { field: 'RAID', caption: 'RAID', type: 'text' },
            { field: 'Payors', caption: 'Payor(s)', type: 'text' },
            { field: 'AgreementStart', caption: 'Agreement Start Date', type: 'date' },
            { field: 'AgreementStop', caption: 'Agreement Stop Date', type: 'date' },
            { field: 'UserRefNo', caption: 'Reference Number', type: 'text' },
        ],
        columns: [
            {
                field: 'recid',
                caption: 'recid',
                size: '40px',
                hidden: true,
                sortable: true
            },
            {
                field: 'BID',
                caption: 'BID',
                hidden: true
            },
            {
                field: 'BUD',
                caption: 'BUD',
                hidden: true
            },
            {
                field: 'RAID',
                caption: 'RAID',
                size: "60px",
                sortable: true
            },
            {
                field: 'Payors',
                caption: 'Payor(s)',
                size: '250px',
                sortable: true
            },
            {
                field: 'AgreementStart',
                caption: 'Agreement<br>Start',
                render: 'date',
                size: '80px',
                sortable: true,
                style: 'text-align: right'
            },
            {
                field: 'AgreementStop',
                caption: 'Agreement<br>Stop',
                render: 'date',
                size: '80px',
                sortable: true,
                style: 'text-align: right'
            },
            {
                field: 'FlowID',
                caption: 'Flow ID',
                size: '50px',
                hidden: true,
                sortable:   true
            },
            {
                field: 'UserRefNo',
                caption: 'Ref No',
                size: '200px',
                sortable:   true
            },
        ],
        onRequest: function(event) {
            event.postData.cmd = "all";
            event.postData.FlowType = "RA";
        },
        onRefresh: function(event) {
            event.onComplete = function() {
                // var sel_recid = parseInt(this.last.sel_recid);
                if (app.active_grid == this.name) {
                    this.select(app.last.grid_sel_recid);
                    // This one is special case, you need to set last sel_recid when you're adding
                    // new record with help of onAdd event handler, so new record automatically
                    // will be selected

                    /*if (app.new_form_rec) {
                        this.unselect(sel_recid);
                    }
                    else{
                        this.select(sel_recid);
                    }*/
                }
            };
        },
        onClick: function(event) {
            event.onComplete = function () {
                var yes_args = [this, event.recid],
                    no_args = [this],
                    no_callBack = function(grid) {
                        grid.select(app.last.grid_sel_recid);
                        return false;
                    },
                    yes_callBack = function(grid, recid) {
                        app.last.grid_sel_recid = parseInt(recid);

                        // keep highlighting current row in any case
                        grid.select(app.last.grid_sel_recid);

                        // get grid record
                        var rec = grid.get(recid);
                        var version = (rec.RAID > 0) ? "raid" : "refno";

                        GetRAFlowDataAjax(rec.UserRefNo, rec.RAID, version)
                        .done(function(data) {
                            if (data.status != "success") {
                                grid.message(data.message);
                            } else {
                                LoadRAFlowTemplate();

                                // Update local copy of string list
                                var BID = getCurrentBID();
                                var BUD = getBUDfromBID(BID);
                                getStringListData(BID, BUD);
                                initBizErrors();
                            }
                        })
                        .fail(function() {
                            grid.message("Error while fetching data for selected record");
                        });
                    };

                // warn user if form content has been changed
                form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
            };
        },
        onAdd: function(/*event*/) {
            var yes_args = [this],
                no_args = [this],
                no_callBack = function(grid) {
                    grid.select(app.last.grid_sel_recid);
                    return false;
                },
                yes_callBack = function(grid, recid) {
                    InitRAFlowAjax()
                    .done(function(data, textStatus, jqXHR) {
                        if (data.status === "success") {
                            var bid = getCurrentBID(),
                                bud = getBUDfromBID(bid);

                            // Update local copy of string list
                            getStringListData(bid, bud);

                            var newRecid = grid.records.length;

                            // add new record
                            grid.add({
                                recid:          newRecid,
                                BID:            bid,
                                BUD:            bud,
                                RAID:           0,
                                Payors:         null,
                                AgreementStart: null,
                                AgreementStop:  null,
                                FlowID:         data.record.Flow.FlowID,
                                UserRefNo:      data.record.Flow.UserRefNo,
                            });

                            grid.refresh();

                            app.last.grid_sel_recid = parseInt(newRecid);

                            // keep highlighting current row in any case
                            grid.select(app.last.grid_sel_recid);

                            var rec = grid.get(newRecid);
                            LoadRAFlowTemplate();

                        } else {
                            grid.message(data.message);
                        }
                    })
                    .fail(function() {
                        grid.message("error while creating new flow ID");
                    });

                };

            // warn user if form content has been changed
            form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
        }
    });

    // add date navigation toolbar for new rental agreement form
    addDateNavToToolbar('raflows');

    //------------------------------------------------------------------------
    //          Rental Agreement Details
    //------------------------------------------------------------------------
    $().w2layout({
        name: 'newraLayout',
        padding: 0,
        panels: [
            { type: 'left',         hidden: true },
            { type: 'top',          hidden: true },
            { type: 'main',         size: '60%',    resizable: true,    style: app.pstyle,
                content: 'main',
                toolbar: {
                    items: [
                        { id: 'btnNotes',       type: 'button',     icon: 'far fa-sticky-note' },
                        { id: 'id',             type: 'html' },
                        { id: 'state',          type: 'html' },
                        { id: 'bt3',            type: 'spacer' },
                        { id: 'versionMode',    type: 'html' },
                        {                       type: 'break' },
                        { id: 'stateAction',    type: 'html' },
                        { id: 'remove-refno',   type: 'html',
                            html: '<button title="Delete" id="remove_raflow" name="remove_raflow" class="w2ui-btn" style="min-width: 30px; padding: 6px 0px;"><i class="fas fa-trash"></i></button>' },
                        {                       type: 'break' },
                        { id: 'editViewBtn',    type: 'html' },
                        {                       type: 'break' },
                        { id: 'btnClose',       type: 'button',     icon: 'fas fa-times' }
                    ],
                    onClick: function (event) {
                        console.log(event.target);
                        switch(event.target) {
                        case 'btnClose':
                            var no_callBack = function() { return false; },
                                yes_callBack = function() {
                                    // reset validationError. cause it should display error when it pressed GetApproval button
                                    initBizErrors();
                                    CloseRAFlowLayout();
                                };
                            form_dirty_alert(yes_callBack, no_callBack);
                            break;
                        }
                    },
                    onRefresh: function(event) {
                        var toolbar = this;
                        event.onComplete = function() {
                            // ADDITIONAL CHECK REQUIRED HERE - SPECIAL ONE
                            // BECAUSE WE DON'T KNOW WHEN RENDER WILL COMPLETE
                            // WHEN TOOLBAR IS COMPLETELY REFRESHED THEN ALSO CHECK FOR BUTTON
                            if (app.raflow.loading) {
                                $(toolbar.box).find("button").prop('disabled', true);
                            } else {
                                $(toolbar.box).find("button").prop('disabled', false);
                            }
                        };
                    },
                }
            },
            { type: 'preview',      hidden: true },
            { type: 'bottom',       hidden: true },
            { type: 'right',        hidden: true, size: '200', resizable: true }
        ],
        onResize: function(event) {
            event.onComplete = function() {
                $("#raflow-container .slider").width($(this.box).width());
            };
        },
        onRefresh: function(event) {
            event.onComplete = function() {
                $("button#save-ra-flow-btn").prop("disabled", (app.raflow.version === "raid"));
            };
        }
    });
};

//-----------------------------------------------------------------------
// ChangeRAFlowVersionToolbar - change the toolbar items content based on
//                              the requested version of raflow
//
// @params
//   version    = raflow version ("raid" / "refno")
//   RefNo      = Flow Reference No
//   RAID       = Associated Rental Agreement ID if exists (optional)
//   FLAGS      = Current version raflow FLAGS, will render the state
//-----------------------------------------------------------------------
window.ChangeRAFlowVersionToolbar = function(version, RAID, RefNo, FLAGS) {

    // RESET RAID
    if (!RAID) {
        RAID = 0;
    }

    // RESET REF NO
    if (!RefNo) {
        RefNo = "";
    }

    // GET STATE STRING USING FLAGS
    var state = app.RAStates[parseInt(FLAGS & 0xF)];
    var stateHTML = "<p style='margin:0 10px; font-size: 10pt;'>State:&nbsp;<span id='RAState'>" + state + "</span></p>";

    // STATE CHANGE ACTIONS BUTTON HTML
    var stateActionHTML = "<button class='w2ui-btn' id='raactions' name='raactions'><i class='fas fa-cog' style='margin-right: 7px;'></i>Actions</button>";

    var idString = "",
        editViewBtnHTML = "",
        versionMode = "",
        btnBackToRAText = "";

    switch(version) {
        case "raid":
            idString = "<p style='margin:0 10px; font-size: 12pt;'><strong>RA" + RAID + "</strong></p>";
            editViewBtnHTML = "<button class='w2ui-btn' id='edit_view_raflow' name='edit_view_raflow'><i class='fas fa-pencil-alt fa-sm' style='margin-right: 7px;'></i>Edit" + (RefNo ? "&nbsp;&nbsp;" + RefNo : "") + "</button>";
            versionMode = "Viewing";
            btnBackToRAText = "Back to RA" + RAID;

            // HIDE TRASH ICON
            w2ui.newraLayout.get("main").toolbar.hide('remove-refno');

            // SHOW EDIT/VIEW BUTTON AND SET THE TEXT
            w2ui.newraLayout.get("main").toolbar.show('editViewBtn');
            w2ui.newraLayout.get("main").toolbar.set('editViewBtn', {html: editViewBtnHTML});
            break;

        case "refno":
            idString = "<p style='margin:0 10px; font-size: 12pt;'><strong>" + RefNo + "</strong></p>";
            editViewBtnHTML = "<button class='w2ui-btn' id='edit_view_raflow' name='edit_view_raflow'><i class='fas fa-eye fa-sm' style='margin-right: 7px;'></i>" + (RAID ? "View RA" + RAID : "") + "</button>";
            versionMode = "Editing";
            btnBackToRAText = "Back to " + RefNo;

            // SHOW TRASH ICON
            w2ui.newraLayout.get("main").toolbar.show('remove-refno');

            // SHOW EDIT/VIEW BUTTON AND SET THE TEXT BASED ON RAID
            if (RAID > 0) {
                w2ui.newraLayout.get("main").toolbar.show('editViewBtn');
                w2ui.newraLayout.get("main").toolbar.set('editViewBtn', {html: editViewBtnHTML});
            } else {
                w2ui.newraLayout.get("main").toolbar.hide('editViewBtn');
            }
            break;
    }

    // VERSION MODE
    var versionModeHTML = "<small style='font-size: 8.5pt; color: #555; vertical-align: 2px; margin-left: 10px;'>"+versionMode+"</small>";

    // SET THE ID AND STATE IN TOOLBAR
    w2ui.newraLayout.get("main").toolbar.set('id', {html: idString});
    w2ui.newraLayout.get("main").toolbar.set('state', {html: stateHTML});
    w2ui.newraLayout.get("main").toolbar.set('stateAction', {html: stateActionHTML});
    w2ui.newraLayout.get("main").toolbar.set('versionMode', {html: versionModeHTML});

    // REFRESH THE TOOLBAR TO GET THE EFFECT
    w2ui.newraLayout.get("main").toolbar.refresh();

    // TOP TOOLBAR IN ACTION LAYOUT
    if (w2ui.raActionLayout) {
        w2ui.raActionLayout.get("top").toolbar.set('btnBackToRA', {text: btnBackToRAText});
        // REFRESH THE TOOLBAR TO GET THE EFFECT
        w2ui.raActionLayout.get("top").toolbar.refresh();
    }
};

//-----------------------------------------------------------------------
// RenderRAFlowVersionData will load the RAID versioned data
//        in the interface from local copy
//-----------------------------------------------------------------------
window.RenderRAFlowVersionData = function(active_comp_id, prev_comp_id) {

    // mark this flag as is this new record
    // record created already
    app.new_form_rec = false;

    // as new content will be loaded for this form
    // mark form dirty flag as false
    app.form_is_dirty = false;

    // calculate people items
    managePeopleW2UIItems();

    // calculate parent rentable items
    manageParentRentableW2UIItems();

    var FLAGS   = app.raflow.Flow.Data.meta.RAFLAGS,
        RAID    = app.raflow.Flow.ID,
        RefNo   = (RAID > 0) ? GetRefNoByRAIDFromGrid(RAID) : app.raflow.Flow.UserRefNo;

    // change toolbar
    ChangeRAFlowVersionToolbar(app.raflow.version, RAID, RefNo, FLAGS);
    // hide save button
    $("button#save-ra-flow-btn").prop("disabled", (app.raflow.version === "raid"));

    // clear grid, form if previously loaded in DOM
    for (var comp in app.raFlowPartTypes) {
        // reset w2ui component as well
        if(RACompConfig[comp].w2uiComp in w2ui) {
            // clear inputs
            w2ui[RACompConfig[comp].w2uiComp].clear();
        }
    }

    // LOAD THE CURRENT COMPONENT AGAIN
    loadTargetSection(active_comp_id, prev_comp_id);
};

//-----------------------------------------------------------------------------
// EDIT/VIEW RAFLOW BUTTON CLICK EVENT HANDLER
//-----------------------------------------------------------------------------
$(document).on("click", "button#edit_view_raflow", function(e) {
    var RAID            = app.raflow.Flow.ID,
        RefNo           = (RAID > 0) ? GetRefNoByRAIDFromGrid(RAID) : app.raflow.Flow.UserRefNo,
        versionToRender = (app.raflow.version === "raid") ? "refno" : "raid";

    // GET THE DATA FROM SERVER FOR VERSION TO RENDER THE DATA
    GetRAFlowDataAjax(RefNo, RAID, versionToRender)
    .done(function(data) {
        if (data.status !== "error") {
            var active_comp = $(".ra-form-component:visible");
            var active_comp_id = active_comp.attr("id");
            RenderRAFlowVersionData(active_comp_id);
        }
    })
    .fail(function() {
        alert("Error while fetching data for selected record");
    });
});

//-----------------------------------------------------------------------------
// ACTIONS BUTTON CLICK EVENT HANDLER
//-----------------------------------------------------------------------------
$(document).on("click", "button#raactions", function(e) {
    var BID = getCurrentBID();
    var BUD = getBUDfromBID(BID);
    getStringListData(BID, BUD);

    w2ui.newraLayout.lock('main');
    // set the newralayout's right panel content
    setTimeout(function() {
        loadRAActionTemplate();
    }, 500);
});

// CloseRAFlowLayout closes the new ra layout with resetting right panel content
window.CloseRAFlowLayout = function() {
    app.raflow.version = ""; // RESET THE RAFLOW VERSION
    if (w2ui.raActionLayout) {
        w2ui.raActionLayout.content('main', '');
    }
    w2ui.newraLayout.unlock('main');
    w2ui.newraLayout.content('right', '');
    w2ui.newraLayout.hide('right', true);
    w2ui.toplayout.hide('right', true);
    w2ui.raflowsGrid.render();
    app.form_is_dirty = false;
};

//-----------------------------------------------------------------------------
// REMOVE FLOW BUTTON CLICK EVENT HANDLER
//-----------------------------------------------------------------------------
$(document).on("click", "button#remove_raflow", function(e) {
    e.preventDefault();

    var version = app.raflow.version,
        RefNo   = app.raflow.Flow.UserRefNo;

    // ONLY REF.NO CAN BE DELETED
    if (version === "raid") { // IF RAID VERSION LOADED THEN
        return;
    }

    // delete the flow
    DeleteRAFlowAJAX(RefNo)
    .done(function(data) {
        if (data.status ==="success") {
            CloseRAFlowLayout();
        } else {
            alert(data.message);
        }
    });
});

/* global
    RAFlowAJAX,
    RACompConfig, SliderContentDivLength, reassignGridRecids,
    HideSliderContent, appendNewSlider, ShowSliderContentW2UIComp,
    SaveCompDataAJAX, GetRAFlowCompLocalData,
    GetFeeFormInitRecord, SaveRAFlowRentableAJAX,
    GetRentableLocalData, SetRentableLocalData, GetAllARForFeeForm,
    SaveRentableCompData, SetRentableFeeLocalData, GetRentableFeeLocalData,
    ridRentablePickerRender, ridRentableDropRender, ridRentableCompare,
    AssignRentableGridRecords, AssignRentableFeesGridRecords,
    SetRentableAmountsFromFees, manageParentRentableW2UIItems, getRecIDFromTMPASMID,
    RenderRentablesGridSummary, GetFeeFormFields, GetFeeGridColumns, getFeeIndex,
    SetFeeDataFromFeeFormRecord, SetFeeFormRecordFromFeeData, displayRARentableFeesGridError,
    FeeFormOnChangeHandler, GetFeeFormToolbar, FeeFormOnRefreshHandler, getRecIDFromRID, displayFormFieldsError,
    GetFeeAccountRulesW2UIListItems, RenderFeesGridSummary, updateFlowData, dispalyRARentablesGridError,
    displayRARentableFeeFormError, getRentableIndex, displayFormFieldsError,
    GetCurrentFlowID, EnableDisableRAFlowVersionInputs, ShowHideGridToolbarAddButton,
    HideAllSliderContent, displayNonFieldsError, RemoveRAFlowRentableAJAX
*/

"use strict";

// -------------------------------------------------------------------------------
// SaveRAFlowRentableAJAX - pull down all fees records for the requested RID
// @params - RID
// -------------------------------------------------------------------------------
window.SaveRAFlowRentableAJAX = function(RID) {
    var BID = getCurrentBID(),
        FlowID = GetCurrentFlowID();

    var url = "/v1/raflow-rentable/" + BID.toString() + "/" + FlowID.toString() + "/";
    var data = {
        "cmd": "save",
        "RID": RID,
        "FlowID": FlowID
    };

    return RAFlowAJAX(url, "POST", data, true)
    .done(function(data) {
        if (data.status !== "error") {
            // set the rentable grid records again
            AssignRentableGridRecords();
        }
    });
};

// -------------------------------------------------------------------------------
// RemoveRAFlowRentableAJAX - remove rentables
// @params - RID
// -------------------------------------------------------------------------------
window.RemoveRAFlowRentableAJAX = function (RID) {
    var BID = getCurrentBID(),
        FlowID = GetCurrentFlowID();

    var url = "/v1/raflow-rentable/" + BID.toString() + "/" + FlowID.toString() + "/";
    var data = {
        "cmd": "delete",
        "RID": RID,
        "FlowID": FlowID
    };

    return RAFlowAJAX(url, "POST", data, true)
    .done(function(data) {
        if (data.status !== "error") {
            // set the rentable grid records again
            AssignRentableGridRecords();
        }
    });
};

window.loadRARentablesGrid = function () {

    // if form is loaded then return
    if (!("RARentablesGrid" in w2ui)) {

        // -----------------------------------------------------------
        // RENTABLE SEARCH FORM
        // -----------------------------------------------------------
        $().w2form({
            name: 'RARentableSearchForm',
            header: 'Rentable',
            style: 'display: block; border: none;',
            formURL: '/webclient/html/raflow/formra-rentablesearch.html',
            focus: -1,
            fields: [
                {name: 'Rentable',      type: 'enum',   required: true,
                    options: {
                        url:           '/v1/rentablestd/' + getCurrentBID().toString(),
                        max:           1,
                        cacheMax:      50,
                        maxDropHeight: 350,
                        renderItem:    function(item) {
                            // Enable Accept button
                            $(w2ui.RARentableSearchForm.box).find("button[name=accept]").prop("disabled", false);
                            w2ui.RARentableSearchForm.record.RID = item.RID;
                            w2ui.RARentableSearchForm.record.RentableName = item.RentableName;
                            return item.RentableName + '  (RID: ' + item.RID + ')';
                        },
                        renderDrop:    ridRentableDropRender,
                        compare:       ridRentableCompare,
                        onNew:         function (event) {
                            //console.log('++ New Item: Do not forget to submit it to the server too', event);
                            $.extend(event.item, { RentableName : event.item.text });
                        },
                        onRemove: function(event) {
                            event.onComplete = function() {
                                w2ui.RARentableSearchForm.actions.reset();
                            };
                        }
                    },
                },
                {name: 'BID',           type: 'int',    required: true, html: {caption: "BID"}},
                {name: 'RID',           type: 'int',    required: true, html: {caption: "RID"}},
                {name: 'RentableName',  type: 'int',    required: true, html: {caption: "RentableName"}},
            ],
            actions: {
                reset: function () {
                    w2ui.RARentableSearchForm.clear();
                    $(w2ui.RARentableSearchForm.box).find("button[name=accept]").prop("disabled", true);
                }
            },
            onRefresh: function (event) {
                var f = this;
                event.onComplete = function () {
                    var BID = getCurrentBID(),
                        BUD = getBUDfromBID(BID);

                    f.record.BID = BID;

                    // FREEZE THE INPUTS IF VERSION IS RAID
                    EnableDisableRAFlowVersionInputs(f);
                };
            }
        });

        // -----------------------------------------------------------
        // RENTABLES GRID
        // -----------------------------------------------------------
        $().w2grid({
            name: 'RARentablesGrid',
            header: 'Rentables',
            show: {
                toolbar:    false,
                footer:     true,
            },
            multiSelect: false,
            style: 'border-color: silver; border-style: solid; border-width: 1px 0 0 0; display: block;',
            columns: [
                {
                    field: 'recid',
                    hidden: true
                },
                {
                    field: 'RID',
                    hidden: true
                },
                {
                    field: 'RTID',
                    hidden: true
                },
                {
                    field: 'RTFLAGS',
                    hidden: true
                },
                {
                    field: 'haveError',
                    size: '30px',
                    hidden: false,
                    render: function (record) {
                        var haveError = false;
                        if (app.raflow.validationErrors.rentables) {
                            var rentables = app.raflow.validationCheck.errors.rentables.errors;
                            for (var i = 0; i < rentables.length; i++) {
                                if (rentables[i].RID === record.RID && rentables[i].total > 0) {
                                    haveError = true;
                                    break;
                                }
                            }
                        }
                        if (haveError) {
                            return '<i class="fas fa-exclamation-triangle" title="error"></i>';
                        } else {
                            return "";
                        }
                    }
                },
                {
                    field: 'RentableName',
                    caption: 'Rentable',
                    size: '100%'
                },
                {
                    field: 'RentCycle',
                    hidden: true
                },
                {
                    field: 'RentCycleText',
                    caption: 'RentCycle',
                    size: '100px',
                    render: function (record) {
                        return app.cycleFreq[record.RentCycle];
                    }
                },
                {
                    field: 'AtSigningPreTax',
                    caption: 'At Signing<br>(pre-tax)',
                    size: '100px',
                    render: 'money'
                },
                {
                    field: 'SalesTax',
                    caption: 'Sales Tax',
                    size: '100px',
                    render: 'money'
                },
                /*{ // FUTURE RELEASE
                    field: 'SalesTaxAmt',
                    caption: 'Sales Tax Amt',
                    size: '100px',
                    render: 'money'
                },*/
                {
                    field: 'TransOccTax',
                    caption: 'Trans Occ Tax',
                    size: '100px',
                    render: 'money'
                },
                /*{ // FUTURE RELEASE
                    field: 'TransOccAmt',
                    caption: 'Trans Occ Amt',
                    size: '100px',
                    render: 'money'
                },*/
                {
                    field: 'RowTotal',
                    caption: 'Grand Total',
                    size: '100px',
                    style: 'text-align: right',
                    render: function(record) {
                        var html = "";
                        var total = 0.0;
                        if (record) {
                            if (record.AtSigningPreTax) {
                                total += record.AtSigningPreTax;
                            }
                            if (record.SalesTax) {
                                total += record.SalesTax;
                            }
                            if (record.TransOccTax) {
                                total += record.TransOccTax;
                            }

                            // make it bold
                            html = "<strong>" + w2utils.formatters.money(total) + "</strong>";
                        }
                        return html;
                    }
                },
                {
                    field: 'RemoveRec',
                    caption: "Remove<br>Rentable",
                    size: '90px',
                    render: function (record/*, index, col_index*/) {
                        // SPECIAL CHECK FOR THIS REMOVE BUTTON
                        if (app.raflow.version === "raid") {
                            return;
                        }
                        var html = "";
                        if (record.RID && record.RID > 0) {
                            html = '<i class="fas fa-minus-circle" style="color: #DC3545; cursor: pointer;" title="remove rentable"></i>';
                        }
                        return html;
                    },
                }
            ],
            onClick: function (event) {
                event.onComplete = function () {
                    // if it's remove column then remove the record
                    // maybe confirm dialog will be added
                    if(w2ui.RARentablesGrid.getColumn("RemoveRec", true) == event.column) {
                        var rec = w2ui.RARentablesGrid.get(event.recid);

                        RemoveRAFlowRentableAJAX(rec.RID)
                        .done(function(data) {
                            if (data.status === "success") {
                                // after removing rentable comp data re-calculate parent rentable
                                // w2ui items list
                                manageParentRentableW2UIItems();
                            }
                        });
                        return;
                    }

                    var yes_args = [w2ui.RARentablesGrid, event.recid],
                        no_args = [w2ui.RARentablesGrid],
                        no_callBack = function(grid) {
                            grid.select(app.last.grid_sel_recid);
                            return false;
                        },
                        yes_callBack = function(grid, recid) {
                            app.last.grid_sel_recid = parseInt(recid);

                            // keep highlighting current row in any case
                            grid.select(app.last.grid_sel_recid);

                            // get auto populated to new RA account rules
                            var rec = grid.get(recid);

                            // keep this clicked rentable in last object
                            app.raflow.last.RID = rec.RID;

                            // get local data of this rentable
                            var localRData = GetRentableLocalData(rec.RID);

                            // just render the record from local data if fees are available
                            if(localRData.hasOwnProperty("Fees") && localRData.Fees.length > 0) {
                                // set fees grid records
                                AssignRentableFeesGridRecords(rec.RID);
                            }

                            // show slider content
                            ShowSliderContentW2UIComp(w2ui.RARentableFeesGrid, RACompConfig.rentables.sliderWidth);
                        };

                    // warn user if content has been changed
                    form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
                };
            }
        });

        // -----------------------------------------------------------
        // RENTABLE ***** FEES ***** GRID
        // -----------------------------------------------------------
        $().w2grid({
            name: 'RARentableFeesGrid',
            header: 'Rentables Fees',
            show: {
                toolbar:        true,
                header:         true,
                toolbarSearch:  false,
                toolbarAdd:     true,
                toolbarReload:  false,
                toolbarInput:   false,
                toolbarColumns: false,
                footer:         false
            },
            style: 'border: none; display: block;',
            columns: GetFeeGridColumns('RARentableFeesGrid'),
            toolbar: {
                items: [
                    {id: 'bt3', type: 'spacer'},
                    {id: 'btnClose', type: 'button', icon: 'fas fa-times'}
                ],
                onClick: function (event) {
                    switch(event.target) {
                        case "btnClose":
                            HideSliderContent();
                            // unselect selected record
                            w2ui.RARentablesGrid.selectNone();
                            AssignRentableGridRecords();
                            break;
                    }
                }
            },
            onAdd: function(/*event*/) {
                var feesGrid    = w2ui.RARentableFeesGrid,
                    feeForm     = w2ui.RARentableFeeForm;

                var sliderID = 2;
                appendNewSlider(sliderID);
                $("#raflow-container")
                    .find(".slider[data-slider-id="+sliderID+"]")
                    .find(".slider-content")
                    .width(400)
                    .w2render(feeForm);

                // new record so select none
                feesGrid.selectNone();

                // get RID from last of raflow
                var RID = app.raflow.last.RID;

                // get all account rules in fit those in form "ARID" field
                var BID = getCurrentBID();
                GetAllARForFeeForm(BID)
                .done(function(data) {
                    // get filtered account rules items
                    feeForm.get("ARID").options.items = GetFeeAccountRulesW2UIListItems(BID, "rentables");

                    // set form record
                    SetFeeFormRecordFromFeeData(RID, 0, "rentables");
                    feeForm.record.recid = feesGrid.records.length + 1;

                    // show form in the DOM
                    ShowSliderContentW2UIComp(feeForm, SliderContentDivLength, sliderID);
                    feeForm.refresh();
                })
                .fail(function(data) {
                    console.log("failure" + data);
                });
            },
            onClick: function(event) {
                event.onComplete = function() {
                    var yes_args = [this, event.recid],
                        no_args = [this],
                        no_callBack = function(grid) {
                            grid.select(app.last.grid_sel_recid);
                            return false;
                        },
                        yes_callBack = function(grid, recid) {
                            var feeForm = w2ui.RARentableFeeForm;

                            var sliderID = 2;
                            appendNewSlider(sliderID);
                            $("#raflow-container")
                                .find(".slider[data-slider-id="+sliderID+"]")
                                .find(".slider-content")
                                .width(400)
                                .w2render(feeForm);

                            app.last.grid_sel_recid = parseInt(recid);

                            // keep highlighting current row in any case
                            grid.select(app.last.grid_sel_recid);

                            // get RID from last of raflow
                            var RID = app.raflow.last.RID;

                            // get TMPASMID from grid record
                            var TMPASMID = grid.get(recid).TMPASMID;

                            // get all account rules then
                            var BID = getCurrentBID();
                            GetAllARForFeeForm(BID)
                            .done(function(data) {
                                // get filtered account rules items
                                feeForm.get("ARID").options.items = GetFeeAccountRulesW2UIListItems(BID, "rentables");

                                // set record in form
                                SetFeeFormRecordFromFeeData(RID, TMPASMID, "rentables");
                                feeForm.record.RentCycleText = app.cycleFreq[feeForm.record.RentCycle];

                                ShowSliderContentW2UIComp(feeForm, SliderContentDivLength, sliderID);
                                feeForm.refresh(); // need to refresh for header changes

                                // When RentCycle is Norecur then disable the RentCycle list field.
                                var isDisabled = feeForm.record.RentCycleText.text === app.cycleFreq[0];
                                $("#RentCycleText").prop("disabled", isDisabled);

                                setTimeout(function () {
                                    displayRARentableFeeFormError(app.raflow.last.RID);
                                }, 500);
                            })
                            .fail(function(data) {
                                console.log("failure" + data);
                            });
                        };

                    // warn user if form content has been changed
                    form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
                };
            },
            onRefresh: function(event) {
                var grid = this;
                event.onComplete = function() {
                    ShowHideGridToolbarAddButton(grid.name);
                };
            }
        });

        // -----------------------------------------------------------
        //  ***** RENTABLE ***** FEE ***** FORM *****
        // -----------------------------------------------------------
        $().w2form({
            name: 'RARentableFeeForm',
            header: 'Add New Rentable Fee',
            style: 'border: none; display: block;',
            formURL: '/webclient/html/raflow/formra-fee.html',
            focus: -1,
            fields: GetFeeFormFields(),
            toolbar : GetFeeFormToolbar(),
            actions: {
                reset: function () {
                    w2ui.RARentableFeeForm.clear();
                },
                save: function() {
                    var feeForm     = w2ui.RARentableFeeForm,
                        TMPASMID    = feeForm.record.TMPASMID;

                    // get RID from last of raflow
                    var RID = app.raflow.last.RID;

                    // clean dirty flag of form
                    app.form_is_dirty = false;

                    // set local fee data from fee form
                    SetFeeDataFromFeeFormRecord(RID, TMPASMID, "rentables");

                    // re-calculate amounts for rentable
                    SetRentableAmountsFromFees(RID);

                    SaveRentableCompData()
                    .done(function (data) {
                        if (data.status === 'success') {
                            // Re render the fees grid records
                            AssignRentableFeesGridRecords(RID);

                            // reset the form
                            feeForm.actions.reset();

                            // close the form
                            HideSliderContent(2);
                        } else {
                            feeForm.message(data.message);
                        }
                    })
                    .fail(function (data) {
                        console.log("failure " + data);
                    });
                },
                saveadd: function() {
                    var feeForm     = w2ui.RARentableFeeForm,
                        feesGrid    = w2ui.RARentableFeesGrid,
                        TMPASMID    = feeForm.record.TMPASMID;

                    // get RID from last of raflow
                    var RID = app.raflow.last.RID;

                    // clean dirty flag of form
                    app.form_is_dirty = false;

                    // set local fee data from fee form
                    SetFeeDataFromFeeFormRecord(RID, TMPASMID, "rentables");

                    // re-calculate amounts for rentable
                    SetRentableAmountsFromFees(RID);

                    SaveRentableCompData()
                    .done(function (data) {
                        if (data.status === 'success') {

                            // reset the form
                            feeForm.actions.reset();

                            // set record in form
                            feeForm.record = GetFeeFormInitRecord();
                            feeForm.record.recid = feesGrid.records.length + 1;
                            feeForm.refresh();

                            // enable this field
                            $(feeForm.box).find("#RentCycleText").prop("disabled", false);

                            // Re render the fees grid records
                            AssignRentableFeesGridRecords(RID);

                        } else {
                            feeForm.message(data.message);
                        }
                    })
                    .fail(function (data) {
                        console.log("failure " + data);
                    });
                },
                delete: function() {
                    var feeForm     = w2ui.RARentableFeeForm,
                        TMPASMID    = feeForm.record.TMPASMID;

                    // clean dirty flag of form
                    app.form_is_dirty = false;

                    // FRESH NEW FEE THEN JUST RETURN WITH CLOSING THE FORM
                    if (TMPASMID === 0) {
                        // reset form
                        feeForm.actions.reset();

                        // close the form
                        HideSliderContent(2);

                        return;
                    }

                    // get RID from last of raflow
                    var RID = app.raflow.last.RID;

                    var localRData = GetRentableLocalData(RID);
                    if (localRData.Fees.length > 0) {
                        var itemIndex = GetRentableFeeLocalData(RID, TMPASMID, true);

                        // remove fee item
                        localRData.Fees.splice(itemIndex, 1);

                        // set this modified local rentable data to back
                        SetRentableLocalData(RID, localRData);

                        // re-calculate amounts for rentable
                        SetRentableAmountsFromFees(RID);

                        // sync data on backend side
                        SaveRentableCompData()
                        .done(function (data) {
                            if (data.status === 'success') {
                                // reset form
                                feeForm.actions.reset();

                                // // Re render the fees grid records
                                AssignRentableFeesGridRecords(RID);

                                // close the form
                                HideSliderContent(2);
                            } else {
                                feeForm.message(data.message);
                            }
                        })
                        .fail(function (data) {
                            console.log("failure " + data);
                        });
                    }
                }
            },
            onChange: function(event) {
                event.onComplete = function() {
                    var feeForm = w2ui.RARentableFeeForm;

                    // take action on change event for this form
                    FeeFormOnChangeHandler(feeForm, event.target, event.value_new);

                       // formRecDiffer: 1=current record, 2=original record, 3=diff object
                    var diff = formRecDiffer(this.record, app.active_form_original, {});
                    // if diff == {} then make dirty flag as false, else true
                    app.form_is_dirty = !($.isPlainObject(diff) && $.isEmptyObject(diff));
                };
            },
            onRefresh: function(event) {
                var feeForm = this;
                event.onComplete = function() {

                    // there is NO PETID actually, so have to work around with recid key
                    formRefreshCallBack(feeForm);

                    // set header
                    var RID             = app.raflow.last.RID,
                        localRData      = GetRentableLocalData(RID),
                        rentableName    = localRData.RentableName;

                    var header = "Fee (<strong>{0}</strong>) for <strong>{1}</strong>";
                    if (feeForm.record.ARName && feeForm.record.ARName.length > 0) {
                        feeForm.header = header.format(feeForm.record.ARName, rentableName);
                    } else {
                        feeForm.header = header.format("new", rentableName);
                    }

                    // minimum actions need to be taken care in refres event for fee form
                    FeeFormOnRefreshHandler(feeForm);
                };
            }
        });
    }

    // now load grid in division
    $('#ra-form #rentables .grid-container').w2render(w2ui.RARentablesGrid);
    $('#ra-form #rentables .form-container').w2render(w2ui.RARentableSearchForm);
    HideAllSliderContent();

    // load the existing data in rentables component
    setTimeout(function () {
        AssignRentableGridRecords();
    }, 500);
};

//-----------------------------------------------------------------------------
// AssignRentableGridRecords - will set the rentable grid records from local
//                               copy of flow data
//-----------------------------------------------------------------------------
window.AssignRentableGridRecords = function() {
    var compData = GetRAFlowCompLocalData("rentables");
    if (compData) {
        w2ui.RARentablesGrid.records = compData;
        reassignGridRecids(w2ui.RARentablesGrid.name);

        // Operation on RARentableSearchForm
        w2ui.RARentableSearchForm.refresh();

        // manage parent rentables list
        manageParentRentableW2UIItems();

        // Render RentableGrid Summary
        RenderRentablesGridSummary();

        // display row with light red background if it have error
        dispalyRARentablesGridError();

    } else {
        w2ui.RARentablesGrid.clear();
        // Operation on RARentableSearchForm
        w2ui.RARentableSearchForm.actions.reset();
    }
};

//-----------------------------------------------------------------------------
// SetRentableAmountsFromFees - set the all amounts to rentable locally
//                              calculated from fees list associated with
//                              requested RID
//
// @params
//    RID = RentableID
//-----------------------------------------------------------------------------
window.SetRentableAmountsFromFees = function(RID) {
    // get the local data again after new data has been set
    var localRData = GetRentableLocalData(RID);

    if (!localRData) {
        console.error("local rentable data not found for RID: ", RID);
        return;
    }

    // temp variable to hold the summing up figure for all amounts
    var amountsSum = {
        AtSigningPreTax:    0.0,
        SalesTax:           0.0,
        // SalesTaxAmt:        0.0,
        TransOccTax:        0.0,
        // TransOccAmt:        0.0,
    };

    // iterate over each Fees record
    localRData.Fees.forEach(function(feeData) {
        amountsSum.AtSigningPreTax += feeData.AtSigningPreTax;
        amountsSum.SalesTax += feeData.SalesTax;
        // amountsSum.SalesTaxAmt += feeData.SalesTaxAmt;
        amountsSum.TransOccTax += feeData.TransOccTax;
        // amountsSum.TransOccAmt += feeData.TransOccAmt;
    });

    // set the amount to rentable
    localRData.AtSigningPreTax = amountsSum.AtSigningPreTax;
    localRData.SalesTax = amountsSum.SalesTax;
    // localRData.SalesTaxAmt = amountsSum.SalesTaxAmt;
    localRData.TransOccTax = amountsSum.TransOccTax;
    // localRData.TransOccAmt = amountsSum.TransOccAmt;

    // save this modified rentable data
    SetRentableLocalData(RID, localRData);
};

//-----------------------------------------------------------------------------
// RenderRentablesGridSummary - will render grid summary row from rentable
//                             comp data
//-----------------------------------------------------------------------------
window.RenderRentablesGridSummary = function() {
    var compData = GetRAFlowCompLocalData("rentables") || [];
    var grid = w2ui.RARentablesGrid;

    // summary record in fees grid
    var summaryRec = {
        recid:              0,
        RentableName:       "Grand Total",
        AtSigningPreTax:    0.0,
        SalesTax:           0.0,
        // SalesTaxAmt:     0.0,
        TransOccTax:        0.0,
        // TransOccAmt:     0.0,
        RowTotal:           0.0,
        RemoveRec:          null,
    };

    compData.forEach(function(rentableItem) {
        summaryRec.AtSigningPreTax += rentableItem.AtSigningPreTax;
        summaryRec.SalesTax += rentableItem.SalesTax;
        // summaryRec.SalesTaxAmt += rentableItem.SalesTaxAmt;
        summaryRec.TransOccTax += rentableItem.TransOccTax;
        // summaryRec.TransOccAmt += rentableItem.TransOccAmt;
        summaryRec.RowTotal += rentableItem.RowTotal;
    });

    // set style of entire summary row
    summaryRec.w2ui = {style: "font-weight: bold"};

    // set the summary rec in summary array of grid
    grid.summary = [summaryRec];

    // refresh the grid
    grid.refresh();
};

//-----------------------------------------------------------------------------
// AssignRentableFeesGridRecords - will set the rentable Fees grid records
//                                   from local copy of flow data again and
//                                   set the summary row record in the grid
//
// @params
//    RID = RentableID
//-----------------------------------------------------------------------------
window.AssignRentableFeesGridRecords = function(RID) {
    var grid = w2ui.RARentableFeesGrid;

    // get the local data again after new data has been set
    var localRData = GetRentableLocalData(RID),
        Fees = localRData.Fees || [];

    grid.records = Fees;

    // set the header as well
    grid.header = "Fees for (<strong>{0}</strong>)".format(localRData.RentableName);

    // render fees amount summary
    RenderFeesGridSummary(grid, Fees);

    // reassign records id in feees grid and refresh it
    reassignGridRecids(grid.name);

    // set the summarized value in rentable grid too
    var rentablesGridRecords = w2ui.RARentablesGrid.records || [];
    var foundRIDIndex = -1;
    rentablesGridRecords.forEach(function(gRec, index) {
        if (gRec.RID == RID) {
            foundRIDIndex = index + 1; // we've reassigned recid which starts from 1, not 0
            return false;
        }
    });

    // It highlight row with light red color if it have error
    displayRARentableFeesGridError();

    if (foundRIDIndex > -1) {
        var rentableGridRec = w2ui.RARentablesGrid.get(foundRIDIndex);
        var summaryRec = grid.summary[0]; //only one summary we have

        // summing up total
        rentableGridRec.AtSigningPreTax = summaryRec.AtSigningPreTax;
        rentableGridRec.SalesTax = summaryRec.SalesTax;
        // rentableGridRec.SalesTaxAmt = summaryRec.SalesTaxAmt;
        rentableGridRec.TransOccTax = summaryRec.TransOccTax;
        // rentableGridRec.TransOccAmt = summaryRec.TransOccAmt;

        // set the modified data in grid back
        w2ui.RARentablesGrid.set(foundRIDIndex, rentableGridRec);
        w2ui.RARentablesGrid.refresh();
    }

    // render rentable grid summary record
    RenderRentablesGridSummary();
};

//-----------------------------------------------------------------------------
// AcceptRentable - add Rentable to the list rentables grid records
//-----------------------------------------------------------------------------
window.AcceptRentable = function () {
    var RID = w2ui.RARentableSearchForm.record.RID;

    // find index of this RID in grid if it exists
    var gridRecIndex = -1;
    w2ui.RARentablesGrid.records.forEach(function(rec) {
        if (RID == rec.RID) {
            gridRecIndex = rec.recid;
            return false;
        }
    });

    if(gridRecIndex > -1 ) {
        w2ui.RARentablesGrid.select(gridRecIndex); // highlight the existing record
        w2ui.RARentableSearchForm.clear(); // clear the search rentable form
    } else {
        var fRec    = w2ui.RARentableSearchForm.record;

        SaveRAFlowRentableAJAX(fRec.RID)
        .done(function(data) {
            if (data.status === "success") {
                // reset the form
                w2ui.RARentableSearchForm.actions.reset();
            }
        })
        .fail(function(data) {
            console.log("ERROR from fees data: " + data);
        });
    }
};

//------------------------------------------------------------------------------
// manageParentRentableW2UIItems - maintain parent rentable w2ui items list
//------------------------------------------------------------------------------
window.manageParentRentableW2UIItems = function() {

    // reset it first
    app.raflow.parentRentableW2UIItems = [];

    // inner function to push item in "app.raflow.parentRentableW2UIItems"
    var pushItem = function(rentableItem, atIndex) {
        var found = false;
        app.raflow.parentRentableW2UIItems.forEach(function(item) {
            if (item.id === rentableItem.id) {
                found = true;
                return false;
            }
        });

        // if not found the push item in app.raflow.parentRentableW2UIItems
        if (!found) {
            app.raflow.parentRentableW2UIItems.splice(atIndex, 0, rentableItem);
        }
    };

    // get comp data
    var rentableCompData = GetRAFlowCompLocalData("rentables") || [];

    // first build the list of parent rentables and sort it out in asc order of RID
    rentableCompData.forEach(function(rentableItem) {
        var RID = rentableItem.RID,
            RentableName = rentableItem.RentableName;

        var childRentableFLAG = (rentableItem.RTFLAGS & (1 << app.rtFLAGS.IsChildRentable));

        if ( childRentableFLAG === 0) { // 0 means it is not child, it is parent
            var item = {id: RID, text: RentableName};
            pushItem(item, app.raflow.parentRentableW2UIItems.length);
        }
    });

    // sort it out in asc order of RID value
    app.raflow.parentRentableW2UIItems.sort(function(a, b) {
        return a.id - b.id;
    });

    // if there is only one parent rentable then pre-select it for all child rentable
    // otherwise built drop down menu
    if (app.raflow.parentRentableW2UIItems.length != 1) {
        var item = {id: 0, text: " -- select rentable -- "};
        pushItem(item, 0);
    } else {
        app.raflow.parentRentableW2UIItems.forEach(function(item, index) {
            if (item.id === 0) {
                app.raflow.parentRentableW2UIItems.splice(index, 1);
            }
        });
    }
};

//------------------------------------------------------------------------------
// SaveRentableCompData - saves the data on server side
//------------------------------------------------------------------------------
window.SaveRentableCompData = function() {
    var compData = GetRAFlowCompLocalData("rentables");
    return SaveCompDataAJAX(compData, "rentables");
};

//-----------------------------------------------------------------------------
// GetRentableLocalData - returns the clone of rentable data for requested
//                        RID
//-----------------------------------------------------------------------------
window.GetRentableLocalData = function(RID, returnIndex) {
    var cloneData = {};
    var foundIndex = -1;
    var compData = GetRAFlowCompLocalData("rentables");
    compData.forEach(function(item, index) {
        if (item.RID == RID) {
            if (returnIndex) {
                foundIndex = index;
            } else {
                cloneData = $.extend(true, {}, item);
            }
            return false;
        }
    });
    if (returnIndex) {
        return foundIndex;
    }
    return cloneData;
};

//-----------------------------------------------------------------------------
// SetRentableLocalData - save the data for requested RID in local data
//-----------------------------------------------------------------------------
window.SetRentableLocalData = function(RID, rentableData) {
    var compData = GetRAFlowCompLocalData("rentables");
    var dataIndex = -1;
    compData.forEach(function(item, index) {
        if (item.RID == RID) {
            dataIndex = index;
            return false;
        }
    });

    // if rentable has no property of Fees then
    if (!rentableData.hasOwnProperty("Fees")) {
        rentableData.Fees = [];
    }

    if (dataIndex > -1) {
        compData[dataIndex] = rentableData;
    } else {
        compData.push(rentableData);
    }
};

//-----------------------------------------------------------------------------
// GetRentableFeeLocalData - returns the clone of rentable fee data for requested
//                           RID, TMPASMID from "Fees" list of a rentable
//-----------------------------------------------------------------------------
window.GetRentableFeeLocalData = function(RID, TMPASMID, returnIndex) {
    var cloneData = {};
    var foundIndex = -1;
    var compData = GetRAFlowCompLocalData("rentables");
    compData.forEach(function(item) {
        if (item.RID == RID) {
            var feesData = item.Fees || [];
            feesData.forEach(function(feeItem, index) {
                if (feeItem.TMPASMID == TMPASMID) {
                    if (returnIndex) {
                        foundIndex = index;
                    } else {
                        cloneData = $.extend(true, {}, feeItem);
                    }
                }
                return false;
            });
            return false;
        }
    });
    if (returnIndex) {
        return foundIndex;
    }
    return cloneData;
};

//-----------------------------------------------------------------------------
// SetRentableFeeLocalData - save the data for Fee with
//                           requested RID in local data
//-----------------------------------------------------------------------------
window.SetRentableFeeLocalData = function(RID, TMPASMID, rentableFeeData) {
    var compData    = GetRAFlowCompLocalData("rentables"),
        rIndex      = -1,
        fIndex      = -1;

    // find rentable and fee in it
    compData.forEach(function(item, itemIndex) {
        if (item.RID == RID) {
            var feesData = item.Fees || [];
            feesData.forEach(function(feeItem, feeItemIndex) {
                if (feeItem.TMPASMID == TMPASMID) {
                    fIndex = feeItemIndex;
                }
                return false;
            });
            rIndex = itemIndex;
            return false;
        }
    });

    // only if rentable found then
    if (rIndex > -1) {
        if (fIndex > -1) {
            compData[rIndex].Fees[fIndex] = rentableFeeData;
        } else {
            compData[rIndex].Fees.push(rentableFeeData);
        }
    }
};

// dispalyRARentablesGridError
// It highlights grid's row if it have error
window.dispalyRARentablesGridError = function (){
    // load grid errors if any
    var g = w2ui.RARentablesGrid;
    var record, i;
    for (i = 0; i < g.records.length; i++) {
        // get record from grid to apply css
        record = g.get(g.records[i].recid);

        if (!("w2ui" in record)) {
            record.w2ui = {}; // init w2ui if not present
        }
        if (!("class" in record.w2ui)) {
            record.w2ui.class = ""; // init class string
        }
        if (!("style" in record.w2ui)) {
            record.w2ui.style = {}; // init style object
        }
    }

    if (app.raflow.validationErrors.rentables) {
        var rentables = app.raflow.validationCheck.errors.rentables.errors;
        for (i = 0; i < rentables.length; i++) {
            if (rentables[i].total > 0) {
                var recid = getRecIDFromRID(g, rentables[i].RID);
                g.get(recid).w2ui.style = "background-color: #EEB4B4";
                g.refreshRow(recid);
            }
        }
    }
};

// displayRARentableFeesGridError It highlight row with light red color if it have error
window.displayRARentableFeesGridError = function () {
    // load grid errors if any
    var g = w2ui.RARentableFeesGrid;
    var record, i;
    for (i = 0; i < g.records.length; i++) {
        // get record from grid to apply css
        record = g.get(g.records[i].recid);

        if (!("w2ui" in record)) {
            record.w2ui = {}; // init w2ui if not present
        }
        if (!("class" in record.w2ui)) {
            record.w2ui.class = ""; // init class string
        }
        if (!("style" in record.w2ui)) {
            record.w2ui.style = {}; // init style object
        }
    }

    if (app.raflow.validationErrors.rentables) {
        var rentables = app.raflow.validationCheck.errors.rentables.errors;
        for (i = 0; i < rentables.length; i++) {
            for (var j = 0; j < rentables[i].fees.errors.length; j++) {
                if (rentables[i].fees.errors[j].total > 0) {
                    var recid = getRecIDFromTMPASMID(g, rentables[i].fees.errors[j].TMPASMID);
                    g.get(recid).w2ui.style = "background-color: #EEB4B4";
                    g.refreshRow(recid);
                }
            }
        }
    }
};

// getRecIDFromRID It returns recid of grid record which matches TMPTCID
window.getRecIDFromRID = function(grid, RID){
    // var g = w2ui.RAPeopleGrid;
    var recid;
    for (var i = 0; i < grid.records.length; i++) {
        if (grid.records[i].RID === RID) {
            recid = grid.records[i].recid;
        }
    }
    return recid;
};

// displayRARentableFeeFormError If form field have error than it highlight with red border and
window.displayRARentableFeeFormError = function(RID){

    // if pet section doesn't have error than return
    if(!app.raflow.validationErrors.rentables){
        return;
    }

    var form = w2ui.RARentableFeeForm;
    var record = form.record;

    // get list of pets
    var rentables = app.raflow.validationCheck.errors.rentables.errors;

    // get index of vehicle for whom form is opened
    var rentableIndex = getRentableIndex(RID, rentables);

    var index = getFeeIndex(record.TMPASMID, rentables[rentableIndex].fees.errors);

    if(index > -1){
        displayFormFieldsError(index, rentables[rentableIndex].fees.errors, "RARentableFeeForm");
    }
};

// getRentableIndex it return an index of rentable who have RID
window.getRentableIndex = function (RID, rentables) {

    var index = -1;

    for(var i = 0; i < rentables.length; i++){
        // If RID doesn't match iterate for next element
        if(rentables[i].RID === RID){
            index = i;
            break;
        }
    }

    return index;
};

/* global
    GetRAFlowCompLocalData, reassignGridRecids, SaveCompDataAJAX,
    GetTiePeopleLocalData, SetTiePeopleLocalData, AssignTiePeopleGridRecords, SaveTiePeopleData,
    getFullName, dispalyRATiePeopleGridError, getRecIDFromTMPTCID,
    EnableDisableRAFlowVersionGrid, SaveTieCompData
*/

"use strict";

//-----------------------------------------------------------------------
// loadRATieSection -
//-----------------------------------------------------------------------
window.loadRATieSection = function () {

    if (!("RATieLayout" in w2ui)) {

        //------------------------------------------------------------------------
        //          tieLayout which holds all grids
        //------------------------------------------------------------------------
        $().w2layout({
            name: 'RATieLayout',
            panels: [
                {
                    type: 'main',
                    overflow: "hidden",
                    style: 'border: none; background-color: white; padding: 0px;',
                    tabs: {
                        style: "padding-top: 10px;",
                        tabs: [
                            { id: 'tie-people', caption: 'Occupants' },
                        ],
                        onClick: function (event) {
                            switch(event.target) {
                            case "tie-people":
                                w2ui.RATieLayout.html('main', w2ui.RATiePeopleGrid);

                                // once it's loaded then set the grid records
                                // and render parentRentableName columns in grid
                                setTimeout(function() {
                                    AssignTiePeopleGridRecords();
                                }, 500);
                                break;
                            }
                        }
                    }
                },
            ],
        });

        // TIe People grid
        $().w2grid({
            name: 'RATiePeopleGrid',
            header: 'People Tie',
            show: {
                toolbar:    false,
                footer:     true
            },
            multiSelect: false,
            style: 'border: none; display: block;',
            columns: [
                {
                    field: 'recid',
                    hidden: true
                },
                {
                    field: 'TMPTCID',
                    hidden: true
                },
                {
                    field: 'PRID',
                    hidden: true
                },
                {
                    field: 'haveError',
                    size: '30px',
                    hidden: false,
                    render: function (record) {
                        var haveError = false;
                        if (app.raflow.validationErrors.tie) {
                            var tiePeople = app.raflow.validationCheck.errors.tie.people.errors;
                            for (var i = 0; i < tiePeople.length; i++) {
                                if (tiePeople[i].TMPTCID === record.TMPTCID && tiePeople[i].total > 0) {
                                    haveError = true;
                                    break;
                                }
                            }
                        }
                        if (haveError) {
                            return '<i class="fas fa-exclamation-triangle" title="error"></i>';
                        } else {
                            return "";
                        }
                    }
                },
                {
                    field: 'FullName',
                    caption: 'Full Name',
                    size: '40%',
                },
                {
                    field: 'ParentRentableName',
                    caption: 'Assign To',
                    size: '60%',
                    editable: {
                        type: 'select',
                        items: [],
                    },
                    render: function (record/*, index, col_index*/) {
                        var html = '';

                        if (record) {
                            var items = app.raflow.parentRentableW2UIItems;
                            for (var s in items) {
                                if (items[s].id == record.ParentRentableName) html = items[s].text;
                            }
                        }
                        return html;
                    }
                },
            ],
            onRefresh: function(event) {
                var grid = this;
                event.onComplete = function() {
                    EnableDisableRAFlowVersionGrid(grid);
                };
            },
            onChange: function(event) {
                var grid = this;
                event.onComplete = function() {
                    // parent rentable name column index
                    var PRNCI = grid.getColumn("ParentRentableName", true);
                    if (PRNCI === event.column) {
                        var record = grid.get(event.recid);
                        var localTiePeopleData = GetTiePeopleLocalData(record.TMPTCID);

                        localTiePeopleData.PRID = record.PRID = parseInt(event.value_new);
                        record.ParentRentableName = parseInt(event.value_new);

                        // set data
                        grid.set(event.recid, record);
                        SetTiePeopleLocalData(record.TMPTCID, localTiePeopleData);

                        // SAVE DATA ON SERVER SIDE
                        SaveTieCompData()
                        .done(function(data) {
                            if (data.status === 'success') {
                                // save grid changes
                                grid.save();
                            } else {
                                grid.message(data.message);
                            }
                        })
                        .fail(function(data) {
                            console.log("failure " + data);
                        });
                    }
                };
            }
        });

    }

    // now load layout in division
    $('#ra-form #tie .layout-container').w2render(w2ui.RATieLayout);
    setTimeout(function() {
        w2ui.RATieLayout.get("main").tabs.click("tie-people");
    }, 0);
};

//-----------------------------------------------------------------------------
// GetTiePeopleLocalData - returns the clone of people data for requested TMPTCID
//                      from tie comp data
//-----------------------------------------------------------------------------
window.GetTiePeopleLocalData = function(TMPTCID, returnIndex) {
    var cloneData = {};
    var foundIndex = -1;

    var compData = GetRAFlowCompLocalData("tie");
    var tiePeopleData = compData.people || [];

    tiePeopleData.forEach(function(item, index) {
        if (item.TMPTCID == TMPTCID) {
            if (returnIndex) {
                foundIndex = index;
            } else {
                cloneData = $.extend(true, {}, item);
            }
            return false;
        }
    });
    if (returnIndex) {
        return foundIndex;
    }
    return cloneData;
};

//-----------------------------------------------------------------------------
// SetTiePeopleLocalData - set the modified tie people data locally
//                      for requested TMPTCID by matching TMPTCID
//-----------------------------------------------------------------------------
window.SetTiePeopleLocalData = function(TMPTCID, data) {
    var compData = GetRAFlowCompLocalData("tie");
    var tiePeopleData = compData.people || [];

    var dataIndex = -1;
    tiePeopleData.forEach(function(item, index) {
        if (item.TMPTCID == TMPTCID) {
            dataIndex = index;
            return false;
        }
    });
    if (dataIndex > -1) {
        tiePeopleData[dataIndex] = data;
    } else {
        tiePeopleData.push(data);
    }

    // modified data
    compData.people = tiePeopleData;
};

// -------------------------------------------------------------------------------
// AssignTiePeopleGridRecords - assign calculated records in people tie grid
//                            from "people" comp data
// -------------------------------------------------------------------------------
window.AssignTiePeopleGridRecords = function() {
    var peopleCompData = GetRAFlowCompLocalData("people") || [];
    var grid = w2ui.RATiePeopleGrid,
        tieGridRecords = [];

    peopleCompData.forEach(function(peopleData) {

        // NOTE: list down only occupants in tie section
        if (!peopleData.IsOccupant) {
            return; // continue to next person
        }

        var PRID = 0;
        var tiePeople = GetTiePeopleLocalData(peopleData.TMPTCID);

        // parent Rentable ID found then for initial load in grid
        if (tiePeople.PRID) {
            // if it's found in parent rentable list then keep as it is
            // else assign 0 if not found
            app.raflow.parentRentableW2UIItems.forEach(function(parentRItem) {
                if (parentRItem.id == tiePeople.PRID) {
                    PRID = tiePeople.PRID;
                    return false;
                }
            });
        }

        // get full name from individual record
        var FullName;
        if (!peopleData.IsCompany) {
            FullName = getFullName(peopleData);
        } else {
            FullName = peopleData.Employer;
        }

        var record = {
            recid:              0,
            TMPTCID:           peopleData.TMPTCID,
            PRID:               PRID,
            ParentRentableName: PRID,
            FullName:           FullName,
        };
        tieGridRecords.push(record);
    });

    if (tieGridRecords.length > 0) {

        // if there is only one parent rentable then pre-select it for all child rentable
        // otherwise built drop down menu
        if (app.raflow.parentRentableW2UIItems.length == 0) {
            tieGridRecords.forEach(function(rec) {
                rec.PRID = 0;
                rec.ParentRentableName = 0;
            });
        } else if (app.raflow.parentRentableW2UIItems.length == 1) {
            // re-assign PRID
            tieGridRecords.forEach(function(rec) {
                rec.PRID = app.raflow.parentRentableW2UIItems[0].id;
                rec.ParentRentableName = app.raflow.parentRentableW2UIItems[0].id;
            });
        }

        // feed array of records to grid
        grid.records = tieGridRecords;
        reassignGridRecids(grid.name);

        // assign item prepared earlier for parent rentable list
        grid.getColumn("ParentRentableName").editable.items = app.raflow.parentRentableW2UIItems;
        grid.getColumn("ParentRentableName").render();

        // display row with light red background if it have error
        dispalyRATiePeopleGridError();

    } else {
        grid.clear();
    }

    // save the data if it's been modified
    SaveTiePeopleData();
};

//-----------------------------------------------------------------------------
// SaveTiePeopleData -   if there are any difference between server data
//                       and local data at this step then save the
//                       modified data on the server via API
//-----------------------------------------------------------------------------
window.SaveTiePeopleData = function() {
    var compData = GetRAFlowCompLocalData("tie"),
        tiePeopleData = compData.people || [],
        dataToSaveFlag = false,
        gridRecords = w2ui.RATiePeopleGrid.records || [];

    // first check the length
    if (gridRecords.length !== tiePeopleData.length) {
        dataToSaveFlag = true;
    } else {
        var tmpIDExists = false;
        // scan for each record from grid with compData, if RID not found then hit the API to save data
        gridRecords.forEach(function(gridRec) {
            tiePeopleData.forEach(function(peopleItem) {
                if (gridRec.TMPTCID === peopleItem.TMPTCID && gridRec.PRID === peopleItem.PRID) {
                    tmpIDExists = true;
                    return false;
                }
            });
            if (!tmpIDExists) { // if not found then it means we have mismatch in data
                dataToSaveFlag = true;
                return false;
            }
        });
    }

    // if have to save the data then update the local copy
    if (dataToSaveFlag) {
        var modTiePeopleData = [];

        gridRecords.forEach(function(rec) {
            modTiePeopleData.push({TMPTCID: rec.TMPTCID, PRID: rec.PRID});
        });

        // set this to it's position
        compData.people = modTiePeopleData;

        // now hit the server API to save
        SaveCompDataAJAX(compData, "tie");
    }
};

// dispalyRATiePeopleGridError
// It highlights grid's row if it have error
window.dispalyRATiePeopleGridError = function (){
    // load grid errors if any
    var g = w2ui.RATiePeopleGrid;
    var record, i;
    for (i = 0; i < g.records.length; i++) {
        // get record from grid to apply css
        record = g.get(g.records[i].recid);

        if (!("w2ui" in record)) {
            record.w2ui = {}; // init w2ui if not present
        }
        if (!("class" in record.w2ui)) {
            record.w2ui.class = ""; // init class string
        }
        if (!("style" in record.w2ui)) {
            record.w2ui.style = {}; // init style object
        }
    }

    if (app.raflow.validationErrors.tie) {
        var tie = app.raflow.validationCheck.errors.tie.people.errors;
        for (i = 0; i < tie.length; i++) {
            if (tie[i].total > 0) {
                var recid = getRecIDFromTMPTCID(g, tie[i].TMPTCID);
                g.get(recid).w2ui.style = "background-color: #EEB4B4";
                g.refreshRow(recid);
            }
        }
    }
};

// getRecIDFromRID It returns recid of grid record which matches TMPTCID
window.getRecIDFromTMPTCID = function(grid, TMPTCID){
    var recid;
    for (var i = 0; i < grid.records.length; i++) {
        if (grid.records[i].TMPTCID === TMPTCID) {
            recid = grid.records[i].recid;
        }
    }
    return recid;
};

//------------------------------------------------------------------------------
// SaveTieCompData - saves the data on server side
//------------------------------------------------------------------------------
window.SaveTieCompData = function() {
    var compData = GetRAFlowCompLocalData("tie");
    return SaveCompDataAJAX(compData, "tie");
};

/* global
    RACompConfig, reassignGridRecids, RAFlowAJAX,
    HideSliderContent, ShowSliderContentW2UIComp,
    SaveCompDataAJAX, GetRAFlowCompLocalData,
    lockOnGrid, displayRAVehicleFeesGridError,
    GetVehicleFormInitRecord, SetVehicleLocalData, GetVehicleLocalData,
    AssignVehiclesGridRecords, SaveVehiclesCompData,
    SetRAVehicleLayoutContent,
    GetVehicleFeeLocalData, SetVehicleFeeLocalData,
    AssignVehicleFeesGridRecords,
    SetRAVehicleFormRecordFromLocalData,
    SetlocalDataFromRAVehicleFormRecord,
    GetAllARForFeeForm, SetDataFromFormRecord, SetFormRecordFromData,
    GetFeeGridColumns, GetFeeFormFields, GetFeeFormToolbar,
    SetFeeDataFromFeeFormRecord,
    GetFeeFormInitRecord, getRecIDFromTMPASMID, getFeeIndex,
    FeeFormOnChangeHandler, FeeFormOnRefreshHandler,
    SliderContentDivLength, SetFeeFormRecordFromFeeData,
    displayRAVehicleFeeFormError, RenderFeesGridSummary, displayRAVehicleFormError,
    displayFormFieldsError, getVehicleIndex,
    RenderVehicleFeesGridSummary, RAFlowNewVehicleAJAX,
    GetFeeAccountRulesW2UIListItems, RenderFeesGridSummary,
    GetVehicleIdentity, UpdateRAFlowLocalData, GetTiePeopleLocalData,
    getRecIDFromTMPVID, dispalyRAVehiclesGridError, GetCurrentFlowID,
    EnableDisableRAFlowVersionInputs, ShowHideGridToolbarAddButton,
    HideAllSliderContent
*/

"use strict";

//-----------------------------------------------------------------------------
// RAFlowNewVehicleAJAX - Request to create new vehicle in raflow json
//-----------------------------------------------------------------------------
window.RAFlowNewVehicleAJAX = function() {
    var BID = getCurrentBID();
    var FlowID = GetCurrentFlowID();

    var url = "/v1/raflow-vehicles/" + BID.toString() + "/" + FlowID.toString() + "/";
    var data = {
        "cmd": "new",
        "FlowID": FlowID
    };

    return RAFlowAJAX(url, "POST", data, true)
    .done(function(data) {
        if (data.status !== "error") {
            // reassign records
            AssignVehiclesGridRecords();

            // mark new TMPVID from meta
            app.raflow.last.TMPVID = data.record.Flow.Data.meta.LastTMPVID;
        }
    });
};

// -------------------------------------------------------------------------------
// Rental Agreement - Vehicles Grid
// -------------------------------------------------------------------------------
window.GetVehicleFormInitRecord = function (previousFormRecord) {
    var defaultFormData = {
        recid:                  w2ui.RAVehiclesGrid.records.length + 1,
        TMPVID:                 0,
        VID:                    0,
        TMPTCID:                0,
        VIN:                    "",
        VehicleType:            "",
        VehicleMake:            "",
        VehicleModel:           "",
        VehicleColor:           "",
        VehicleYear:            0,
        LicensePlateState:      "",
        LicensePlateNumber:     "",
        ParkingPermitNumber:    "",
    };

    // if it called after 'save and add another' action there previous form record is passed as Object
    // else it is null
    if ( previousFormRecord ) {
        defaultFormData = setDefaultFormFieldAsPreviousRecord(
            ['*'], // Fields to Reset
            defaultFormData,
            previousFormRecord
        );
    }

    return defaultFormData;
};

// -------------------------------------------------------------
// SetlocalDataFromRAVehicleFormRecord
// ==================================
// will update the data from the record
// it will only update the field defined in fields list in
// form definition
// -------------------------------------------------------------
window.SetlocalDataFromRAVehicleFormRecord = function(TMPVID) {
    var form            = w2ui.RAVehicleForm;

    // get data from form field's TMPVID
    var localVehicleData = GetVehicleLocalData(TMPVID);

    // set data from form
    var vehicleData = SetDataFromFormRecord(TMPVID, form, localVehicleData);

    // KEEP VEHICLE YEAR IN NUMBERIC
    vehicleData.VehicleYear = parseInt(vehicleData.VehicleYear);

    // if not Fees then assign in vehicle data
    if (!vehicleData.hasOwnProperty("Fees")) {
        vehicleData.Fees = [];
    }
    vehicleData.Fees = w2ui.RAVehicleFeesGrid.records;

    // set this modified data back
    SetVehicleLocalData(TMPVID, localVehicleData);
};

// -------------------------------------------------------------
// SetRAVehicleFormRecordFromLocalData
// ================================
// will set the data in the form record
// from local vehicle data
// -------------------------------------------------------------
window.SetRAVehicleFormRecordFromLocalData = function(TMPVID) {
    var form = w2ui.RAVehicleForm;

    // get data from form field's TMPVID
    var localVehicleData = GetVehicleLocalData(TMPVID);

    // set form record from data
    SetFormRecordFromData(form, localVehicleData);

    // refresh the form after setting the record
    form.refresh();
    form.refresh();
};

window.loadRAVehiclesGrid = function () {

    // if form is loaded then return
    if (!("RAVehiclesGrid" in w2ui)) {

        // -----------------------------------------------------------
        //      VEHICLES GRID
        // -----------------------------------------------------------
        $().w2grid({
            name    : 'RAVehiclesGrid',
            header  : 'Vehicles',
            show    : {
                toolbar         : true,
                toolbarSearch   : false,
                toolbarReload   : false,
                toolbarInput    : false,
                toolbarColumns  : false,
                footer          : true,
                toolbarAdd      : true   // indicates if toolbar add new button is visible
            },
            multiSelect: false,
            style   : 'border: 0px solid black; display: block;',
            columns : [
                {
                    field: 'recid',
                    hidden: true
                },
                {
                    field: 'TMPVID',
                    hidden: true
                },
                {
                    field: 'VID',
                    hidden: true
                },
                {
                    field: 'haveError',
                    size: '30px',
                    hidden: false,
                    render: function (record) {
                        var haveError = false;
                        if (app.raflow.validationErrors.vehicles) {
                            var vehicles = app.raflow.validationCheck.errors.vehicles.errors;
                            for (var i = 0; i < vehicles.length; i++) {
                                if (vehicles[i].TMPVID === record.TMPVID && vehicles[i].total > 0) {
                                    haveError = true;
                                    break;
                                }
                            }
                        }
                        if (haveError) {
                            return '<i class="fas fa-exclamation-triangle" title="error"></i>';
                        } else {
                            return "";
                        }
                    }
                },
                {
                    field: 'TMPTCID',
                    caption: 'Contact<br>Person',
                    size: '150px',
                    render: function (record/*, index, col_index*/) {
                        var html = '';
                        if (record) {
                            var items = app.raflow.peopleW2UIItems;
                            for (var s in items) {
                                if (items[s].id == record.TMPTCID) html = items[s].text;
                            }
                        }
                        return html;
                    }
                },
                {
                    field: 'VehicleType',
                    caption: 'Type',
                    size: '80px',
                    editable: { type: 'text' }
                },
                {
                    field: 'VIN',
                    caption: 'VIN',
                    size: '80px'
                },
                {
                    field: 'VehicleMake',
                    caption: 'Make',
                    size: '80px'
                },
                {
                    field: 'VehicleModel',
                    caption: 'Model',
                    size: '80px'
                },
                {
                    field: 'VehicleColor',
                    caption: 'Color',
                    size: '80px'
                },
                {
                    field: 'VehicleYear',
                    caption: 'Year',
                    size: '80px'
                },
                {
                    field: 'LicensePlateState',
                    caption: 'License Plate<br>State',
                    size: '100px'
                },
                {
                    field: 'LicensePlateNumber',
                    caption: 'License Plate<br>Number',
                    size: '100px'
                },
                {
                    field: 'ParkingPermitNumber',
                    caption: 'Parking Permit <br>Number',
                    size: '100px'
                }
            ],
            onRefresh: function(event) {
                var grid = this;

                // have to manage recid on every refresh of this grid
                event.onComplete = function() {
                    $("#RAVehiclesGrid_checkbox")[0].checked = app.raflow.Flow.Data.meta.HaveVehicles;
                    $("#RAVehiclesGrid_checkbox")[0].disabled = app.raflow.Flow.Data.meta.HaveVehicles;
                    lockOnGrid("RAVehiclesGrid");

                    ShowHideGridToolbarAddButton(grid.name);
                };
            },
            onClick : function (event){
                event.onComplete = function () {
                    var yes_args = [this, event.recid],
                        no_args = [this],
                        no_callBack = function(grid) {
                            grid.select(app.last.grid_sel_recid);
                            return false;
                        },
                        yes_callBack = function (grid, recid) {
                            app.last.grid_sel_recid = parseInt(recid);

                            // keep highlighting current row in any case
                            grid.select(app.last.grid_sel_recid);

                            // get TMPVID from grid
                            var TMPVID = grid.get(recid).TMPVID;

                            // keep this clicked TMPVID in last object
                            app.raflow.last.TMPVID = TMPVID;

                            // render layout in the slider
                            ShowSliderContentW2UIComp(w2ui.RAVehicleLayout, RACompConfig.vehicles.sliderWidth);

                            // load vehicle fees grid
                            setTimeout(function() {
                                // fill layout with components and with data
                                SetRAVehicleLayoutContent(TMPVID);
                            }, 0);

                            setTimeout(function () {
                                displayRAVehicleFormError();
                            }, 500);
                        };

                    // warn user if form content has been changed
                    form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
                };
            },
            onAdd   : function (/*event*/) {
                var yes_args = [this],
                    no_callBack = function() {
                        return false;
                    },
                    yes_callBack = function(grid) {
                        app.last.grid_sel_recid = -1;
                        grid.selectNone();

                        // get new entry for vehicle
                        RAFlowNewVehicleAJAX()
                        .done(function(data) {
                            // get last clicked TMPVID
                            var TMPVID = app.raflow.last.TMPVID;

                            // render the layout in slider
                            ShowSliderContentW2UIComp(w2ui.RAVehicleLayout, RACompConfig.vehicles.sliderWidth);

                            // load vehicle fees grid
                            setTimeout(function() {
                                // fill layout with components
                                SetRAVehicleLayoutContent(TMPVID);
                            }, 0);
                        });
                    };

                // warn user if form content has been changed
                form_dirty_alert(yes_callBack, no_callBack, yes_args);
            }
        });

        //------------------------------------------------------------------------
        //  vehicleLayout - The layout to contain the vehicleForm and vehicleFees grid
        //              top  -      vehicleForm
        //              main -      vehicleFeesGrid
        //              bottom -    action buttons form
        //------------------------------------------------------------------------
        $().w2layout({
            name: 'RAVehicleLayout',
            padding: 0,
            panels: [
                { type: 'left',    size: 0,     hidden: true },
                { type: 'top',     size: '50%', hidden: false, content: 'top',  resizable: true, style: app.pstyle },
                { type: 'main',    size: '50%', hidden: false, content: 'main', resizable: true, style: app.pstyle },
                { type: 'preview', size: 0,     hidden: true,  content: 'PREVIEW'  },
                { type: 'bottom',  size: 50,    hidden: false, content: 'bottom', resizable: false, style: app.pstyle },
                { type: 'right',   size: 0,     hidden: true }
            ]
        });

        // -----------------------------------------------------------
        //      ***** VEHICLE FORM *****
        // -----------------------------------------------------------
        $().w2form({
            name    : 'RAVehicleForm',
            header  : 'Add Vehicle form',
            formURL : '/webclient/html/raflow/formra-vehicles.html',
            toolbar :{
                items: [
                    { id: 'bt3', type: 'spacer' },
                    { id: 'btnClose', type: 'button', icon: 'fas fa-times'}
                ],
                onClick: function (event) {
                    switch (event.target){
                        case 'btnClose':
                            HideSliderContent();
                            break;
                    }
                }
            },
            fields  : [
                { field: 'recid',               type: 'int',    required: false,     html: { caption: 'recid', page: 0, column: 0 } },
                { field: 'TMPVID',              type: 'int',    required: false  },
                { field: 'VID',                 type: 'int',    required: false,     html: { caption: 'VID', page: 0, column: 0 } },
                { field: 'TMPTCID',             type: 'list',   required: false,     options: {items: [], selected: {}} },
                { field: 'VehicleType',         type: 'text',   required: true },
                { field: 'VehicleMake',         type: 'text',   required: false },
                { field: 'VehicleModel',        type: 'text',   required: false },
                { field: 'VehicleColor',        type: 'text',   required: false },
                { field: 'VehicleYear',         type: 'number', required: false },
                { field: 'LicensePlateState',   type: 'text',   required: false },
                { field: 'LicensePlateNumber',  type: 'text',   required: false },
                { field: 'VIN',                 type: 'text',   required: false },
                { field: 'ParkingPermitNumber', type: 'text',   required: false },
            ],
            actions: {
                reset: function () {
                    w2ui.RAVehicleForm.clear();
                }
            },
            onRefresh: function(event) {
                event.onComplete = function() {
                    var f = w2ui.RAVehicleForm,
                        header = "Edit Rental Agreement Vehicles ({0})";

                    // there is NO VID actually, so have to work around with TMPVID key
                    formRefreshCallBack(f, "TMPVID", header);

                    // selection of contact person
                    var TMPTCIDSel = {};
                    app.raflow.peopleW2UIItems.forEach(function(item) {
                        if (item.id === f.record.TMPTCID) {
                            $.extend(TMPTCIDSel, item);
                        }
                    });
                    f.get("TMPTCID").options.items = app.raflow.peopleW2UIItems;
                    f.get("TMPTCID").options.selected = TMPTCIDSel;

                    // hide delete button if it is NewRecord
                    if (f.record.TMPVID === 0) {
                        $(f.box).find("button[name=delete]").addClass("hidden");
                    } else {
                        $(f.box).find("button[name=delete]").removeClass("hidden");
                    }

                    // get RAID for active flow
                    var RAID = app.raflow.Flow.ID;
                    if (RAID > 0) {
                        $(f.box).find("input[name=ParkingPermitNumber]").prop("disabled", false);
                    } else {
                        // make it required false
                        f.get("ParkingPermitNumber").required = false;
                        // if RAID is not available then disable
                        $(f.box).find("input[name=ParkingPermitNumber]").prop("disabled", true);
                    }

                    // format header
                    var vehicleIdentity = GetVehicleIdentity(f.record),
                        vehicleString   = "<em>new</em>";

                    if (f.record.VID > 0) {
                        vehicleString = vehicleIdentity;
                    } else if (vehicleIdentity) {
                        vehicleString = "<em>new</em> - {0}".format(vehicleIdentity);
                    }
                    f.header = "Edit Vehicle (<strong>{0}</strong>)".format(vehicleString);

                    // FREEZE THE INPUTS IF VERSION IS RAID
                    EnableDisableRAFlowVersionInputs(f);
                };
            },
            onChange: function(event) {
                event.onComplete = function() {

                    // formRecDiffer: 1=current record, 2=original record, 3=diff object
                    var diff = formRecDiffer(this.record, app.active_form_original, {});
                    // if diff == {} then make dirty flag as false, else true
                    if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                        app.form_is_dirty = false;
                    } else {
                        app.form_is_dirty = true;
                    }
                };
            }
        });

        //------------------------------------------------------------------------
        //      ***** VEHICLE ACTION FORM BUTTONS *****
        //------------------------------------------------------------------------
        $().w2form({
            name: 'RAVehicleFormBtns',
            style: 'border: none; background-color: transparent;',
            formURL: '/webclient/html/raflow/formra-vehiclebtns.html',
            url: '',
            fields: [],
            actions: {
                save: function () {
                    var f       = w2ui.RAVehicleForm,
                        TMPVID  = f.record.TMPVID;

                    // clean dirty flag of form
                    app.form_is_dirty = false;

                    // validate form record
                    var errors = f.validate();
                    if (errors.length > 0) return;

                    // update the modified data
                    SetlocalDataFromRAVehicleFormRecord(TMPVID);

                    // save this records in json Data
                    SaveVehiclesCompData()
                    .done(function(data) {
                        if (data.status === 'success') {
                            // re-assign records in grid
                            AssignVehiclesGridRecords();

                            // reset the form
                            f.actions.reset();

                            // close the form
                            HideSliderContent();
                        } else {
                            f.message(data.message);
                        }
                    })
                    .fail(function(data) {
                        console.log("failure " + data);
                    });
                },
                saveadd: function () {
                    var f       = w2ui.RAVehicleForm,
                        grid    = w2ui.RAVehiclesGrid,
                        TMPVID  = f.record.TMPVID;

                    // clean dirty flag of form
                    app.form_is_dirty = false;

                    // validate the form first
                    var errors = f.validate();
                    if (errors.length > 0) return;

                    // update local data from this form record
                    SetlocalDataFromRAVehicleFormRecord(TMPVID);

                    // save this records in json Data
                    SaveVehiclesCompData()
                    .done(function(data) {
                        if (data.status === 'success') {

                            // get new entry for vehicle
                            RAFlowNewVehicleAJAX()
                            .done(function(data) {
                                // IT'S MANAGED IN AJAX API
                                var TMPVID = app.raflow.last.TMPVID;

                                // reset form
                                f.actions.reset();
                                f.record = GetVehicleLocalData(TMPVID);
                                f.refresh();
                                f.refresh();

                                // re-assign records in grid
                                AssignVehiclesGridRecords();
                            })
                            .fail(function(data) {
                                f.message("failure " + data);
                            });
                        } else {
                            f.message(data.message);
                        }
                    })
                    .fail(function(data) {
                        console.log("failure " + data);
                    });
                },
                delete: function () {
                    var f = w2ui.RAVehicleForm;

                    // get local data from TMPVID
                    var compData = GetRAFlowCompLocalData("vehicles") || [];
                    var itemIndex = GetVehicleLocalData(f.record.TMPVID, true);

                    // if it exists then
                    if (itemIndex > -1) {

                        // remove locally
                        compData.splice(itemIndex, 1);

                        // save this records in json Data
                        SaveVehiclesCompData()
                        .done(function(data) {
                            if (data.status === 'success') {
                                // reset form
                                f.actions.reset();

                                // re-assign records in grid
                                AssignVehiclesGridRecords();

                                // close the form
                                HideSliderContent();
                            } else {
                                f.message(data.message);
                            }
                        })
                        .fail(function(data) {
                            console.log("failure " + data);
                        });
                    }
                },
            },
            onRefresh: function(event) {
                var form = this;
                event.onComplete = function() {
                    // FREEZE THE INPUTS IF VERSION IS RAID
                    EnableDisableRAFlowVersionInputs(form);
                };
            }
        });

        // -----------------------------------------------------------
        //      ***** VEHICLE ***** FEES ***** GRID *****
        // -----------------------------------------------------------
        $().w2grid({
            name: 'RAVehicleFeesGrid',
            header: 'Vehicle Fees',
            show: {
                toolbar:        true,
                header:         false,
                toolbarSearch:  false,
                toolbarAdd:     true,
                toolbarReload:  false,
                toolbarInput:   false,
                toolbarColumns: true,
                footer:         false,
            },
            multiSelect: false,
            style: 'border-color: silver; border-style: solid; border-width: 1px 0 1px 0;',
            columns: GetFeeGridColumns('RAVehicleFeesGrid'),
            onClick: function(event) {
                event.onComplete = function() {
                    var yes_args = [this, event.recid],
                        no_args = [this],
                        no_callBack = function(grid) {
                            grid.select(app.last.grid_sel_recid);
                            return false;
                        },
                        yes_callBack = function(grid, recid) {
                            var feeForm = w2ui.RAVehicleFeeForm;

                            var sliderID = 2;
                            appendNewSlider(sliderID);
                            $("#raflow-container")
                                .find(".slider[data-slider-id="+sliderID+"]")
                                .find(".slider-content")
                                .width(400)
                                .w2render(feeForm);

                            app.last.grid_sel_recid = parseInt(recid);

                            // keep highlighting current row in any case
                            grid.select(app.last.grid_sel_recid);

                            // get TMPVID from last of raflow
                            var TMPVID = app.raflow.last.TMPVID;

                            // get TMPASMID from grid record
                            var TMPASMID = grid.get(recid).TMPASMID;

                            // get all account rules then
                            var BID = getCurrentBID();
                            GetAllARForFeeForm(BID)
                            .done(function(data) {
                                // get filtered account rules items
                                feeForm.get("ARID").options.items = GetFeeAccountRulesW2UIListItems(BID, "vehicles");

                                // set record in form
                                SetFeeFormRecordFromFeeData(TMPVID, TMPASMID, "vehicles");
                                feeForm.record.RentCycleText = app.cycleFreq[feeForm.record.RentCycle];

                                ShowSliderContentW2UIComp(feeForm, SliderContentDivLength, sliderID);
                                feeForm.refresh(); // need to refresh for header changes

                                // When RentCycle is Norecur then disable the RentCycle list field.
                                var isDisabled = feeForm.record.RentCycleText.text === app.cycleFreq[0];
                                $("#RentCycleText").prop("disabled", isDisabled);

                                setTimeout(function () {
                                    displayRAVehicleFeeFormError(w2ui.RAVehicleForm.record.TMPVID);
                                }, 500);
                            })
                            .fail(function(data) {
                                console.log("failure" + data);
                            });
                        };

                    // warn user if form content has been changed
                    form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
                };
            },
            onAdd: function(/*event*/) {
                var feesGrid    = w2ui.RAVehicleFeesGrid,
                    feeForm     = w2ui.RAVehicleFeeForm;

                var sliderID = 2;
                appendNewSlider(sliderID);
                $("#raflow-container")
                    .find(".slider[data-slider-id="+sliderID+"]")
                    .find(".slider-content")
                    .width(400)
                    .w2render(feeForm);

                // new record so select none
                feesGrid.selectNone();

                var TMPVID = app.raflow.last.TMPVID;

                // get all account rules in fit those in form "ARID" field
                var BID = getCurrentBID();
                GetAllARForFeeForm(BID)
                .done(function(data) {
                    // get filtered account rules
                    feeForm.get("ARID").options.items = GetFeeAccountRulesW2UIListItems(BID, "vehicles");

                    // set form record
                    SetFeeFormRecordFromFeeData(TMPVID, 0, "vehicles");
                    feeForm.record.recid = feesGrid.records.length + 1;

                    // show form in the DOM
                    ShowSliderContentW2UIComp(feeForm, SliderContentDivLength, sliderID);
                    feeForm.refresh();
                })
                .fail(function(data) {
                    console.log("failure" + data);
                });
            },
            onRefresh: function(event) {
                var grid = this;
                event.onComplete = function() {
                    ShowHideGridToolbarAddButton(grid.name);
                };
            },
        });

        // -----------------------------------------------------------
        //      ***** VEHICLE ***** FEE ***** FORM *****
        // -----------------------------------------------------------
        $().w2form({
            name: 'RAVehicleFeeForm',
            header: 'Add New Vehicle Fee',
            style: 'display: block; border: none;',
            formURL: '/webclient/html/raflow/formra-fee.html',
            focus: -1,
            fields: GetFeeFormFields(),
            toolbar : GetFeeFormToolbar(),
            actions: {
                reset: function () {
                    w2ui.RAVehicleFeeForm.clear();
                },
                save: function() {
                    var feeForm     = w2ui.RAVehicleFeeForm,
                        TMPASMID    = feeForm.record.TMPASMID;

                    // get TMPVID from last of raflow
                    var TMPVID = app.raflow.last.TMPVID;

                    // clean dirty flag of form
                    app.form_is_dirty = false;

                    // set local fee data from fee form
                    SetFeeDataFromFeeFormRecord(TMPVID, TMPASMID, "vehicles");

                    SaveVehiclesCompData()
                    .done(function (data) {
                        if (data.status === 'success') {
                            // Re render the fees grid records
                            AssignVehicleFeesGridRecords(TMPVID);

                            // reset the form
                            feeForm.actions.reset();

                            // close the form
                            HideSliderContent(2);
                        } else {
                            feeForm.message(data.message);
                        }
                    })
                    .fail(function (data) {
                        console.log("failure " + data);
                    });
                },
                saveadd: function() {
                    var feeForm     = w2ui.RAVehicleFeeForm,
                        feesGrid    = w2ui.RAVehicleFeesGrid,
                        TMPASMID    = feeForm.record.TMPASMID;

                    // get TMPVID from last of raflow
                    var TMPVID = app.raflow.last.TMPVID;

                    // clean dirty flag of form
                    app.form_is_dirty = false;

                    // set local fee data from fee form
                    SetFeeDataFromFeeFormRecord(TMPVID, TMPASMID, "vehicles");

                    SaveVehiclesCompData()
                    .done(function (data) {
                        if (data.status === 'success') {

                            // reset the form
                            feeForm.actions.reset();

                            // set record in form
                            feeForm.record = GetFeeFormInitRecord();
                            feeForm.record.recid = feesGrid.records.length + 1;
                            feeForm.refresh();

                            // enable this field
                            $(feeForm.box).find("#RentCycleText").prop("disabled", false);

                            // Re render the fees grid records
                            AssignVehicleFeesGridRecords(TMPVID);

                        } else {
                            feeForm.message(data.message);
                        }
                    })
                    .fail(function (data) {
                        console.log("failure " + data);
                    });
                },
                delete: function() {
                    var feeForm     = w2ui.RAVehicleFeeForm,
                        TMPASMID    = feeForm.record.TMPASMID;

                    // clean dirty flag of form
                    app.form_is_dirty = false;

                    // FRESH NEW FEE THEN JUST RETURN WITH CLOSING THE FORM
                    if (TMPASMID === 0) {
                        // reset form
                        feeForm.actions.reset();

                        // close the form
                        HideSliderContent(2);

                        return;
                    }

                    // get TMPVID from last of raflow
                    var TMPVID = app.raflow.last.TMPVID;

                    var localVehicleData = GetVehicleLocalData(TMPVID);
                    if (localVehicleData.Fees.length > 0) {
                        var itemIndex = GetVehicleFeeLocalData(TMPVID, TMPASMID, true);

                        // remove fee item
                        localVehicleData.Fees.splice(itemIndex, 1);

                        // set this modified local vehicle data to back
                        SetVehicleLocalData(TMPVID, localVehicleData);

                        // sync data on backend side
                        SaveVehiclesCompData()
                        .done(function (data) {
                            if (data.status === 'success') {
                                // reset form
                                feeForm.actions.reset();

                                // // Re render the fees grid records
                                AssignVehicleFeesGridRecords(TMPVID);

                                // close the form
                                HideSliderContent(2);
                            } else {
                                feeForm.message(data.message);
                            }
                        })
                        .fail(function (data) {
                            console.log("failure " + data);
                        });
                    }
                }
            },
            onChange: function(event) {
                event.onComplete = function() {
                    var feeForm = w2ui.RAVehicleFeeForm;

                    // take action on change event for this form
                    FeeFormOnChangeHandler(feeForm, event.target, event.value_new);

                       // formRecDiffer: 1=current record, 2=original record, 3=diff object
                    var diff = formRecDiffer(this.record, app.active_form_original, {});
                    // if diff == {} then make dirty flag as false, else true
                    if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                        app.form_is_dirty = false;
                    } else {
                        app.form_is_dirty = true;
                    }
                };
            },
            onRefresh: function(event) {
                var feeForm = this;
                event.onComplete = function() {

                    // there is NO VID actually, so have to work around with recid key
                    formRefreshCallBack(feeForm);

                    // set header
                    var header          = "Edit Fee (<strong>{0}</strong>) for Vehicle (<strong>{1}</strong>)".format(vehicleIdentity),
                        vehicleIdentity = GetVehicleIdentity(w2ui.RAVehicleForm.record),
                        vehicleString   = "<em>new</em>";

                    if (w2ui.RAVehicleForm.record.VID > 0) {
                        vehicleString = vehicleIdentity;
                    } else if (vehicleIdentity) {
                        vehicleString = "<em>new</em> - {0}".format(vehicleIdentity);
                    }

                    if (feeForm.record.ARName && feeForm.record.ARName.length > 0) {
                        feeForm.header = header.format(feeForm.record.ARName, vehicleString);
                    } else {
                        feeForm.header = header.format("new", vehicleString);
                    }

                    // minimum actions need to be taken care in refres event for fee form
                    FeeFormOnRefreshHandler(feeForm);
                };
            }
        });
    }

    // now load grid in target division
    $('#ra-form #vehicles .grid-container').w2render(w2ui.RAVehiclesGrid);
    HideAllSliderContent();

    // load the existing data in vehicles component
    setTimeout(function () {
        // assign grid records
        AssignVehiclesGridRecords();
    }, 500);
};

// fill rental agreement vehicle layout with all forms, grids
window.SetRAVehicleLayoutContent = function(TMPVID) {
    w2ui.RAVehicleLayout.content('bottom',  w2ui.RAVehicleFormBtns);
    w2ui.RAVehicleLayout.content('top',     w2ui.RAVehicleForm);
    w2ui.RAVehicleLayout.content('main',    w2ui.RAVehicleFeesGrid);

    // after 0 ms set the record
    setTimeout(function() {
        // set vehicle form record
        SetRAVehicleFormRecordFromLocalData(TMPVID);

        // assign vehicle fees grid
        var BID = getCurrentBID();
        GetAllARForFeeForm(BID)
        .done(function() {
            AssignVehicleFeesGridRecords(TMPVID);
        });
    }, 0);
};

//-----------------------------------------------------------------------------
// GetVehicleLocalData - returns the clone of vehicle data for requested TMPVID
//-----------------------------------------------------------------------------
window.GetVehicleLocalData = function(TMPVID, returnIndex) {
    var cloneData = {};
    var foundIndex = -1;
    var compData = GetRAFlowCompLocalData("vehicles") || [];
    compData.forEach(function(item, index) {
        if (item.TMPVID == TMPVID) {
            if (returnIndex) {
                foundIndex = index;
            } else {
                cloneData = $.extend(true, {}, item);
            }
            return false;
        }
    });
    if (returnIndex) {
        return foundIndex;
    }
    return cloneData;
};


//-----------------------------------------------------------------------------
// SetVehicleLocalData - save the data for requested a TMPVID in local data
//-----------------------------------------------------------------------------
window.SetVehicleLocalData = function(TMPVID, vehicleData) {
    var compData = GetRAFlowCompLocalData("vehicles") || [];
    var dataIndex = -1;
    compData.forEach(function(item, index) {
        if (item.TMPVID == TMPVID) {
            dataIndex = index;
            return false;
        }
    });
    if (dataIndex > -1) {
        compData[dataIndex] = vehicleData;
    } else {
        compData.push(vehicleData);
    }
};

//-----------------------------------------------------------------------------
// AssignVehiclesGridRecords - will set the vehicles grid records from local
//                               copy of flow data again
//-----------------------------------------------------------------------------
window.AssignVehiclesGridRecords = function() {
    var compData = GetRAFlowCompLocalData("vehicles");
    var grid = w2ui.RAVehiclesGrid;

    // reset last sel recid
    app.last.grid_sel_recid  =-1;

    // clear the grid
    grid.clear();

    compData.forEach(function(vehicleData) {
        var gridRec = {};

        // for each grid column
        grid.columns.forEach(function(gridColumn) {
            gridRec[gridColumn.field] = vehicleData[gridColumn.field];
        });

        // push the record in grid
        grid.records.push(gridRec);
    });

    // assign record in grid
    reassignGridRecids(grid.name);

    // display row error with light red background if it have
    dispalyRAVehiclesGridError();

    // lock the grid until "Have vehicles?" checkbox checked.
    lockOnGrid(grid.name);
};

//------------------------------------------------------------------------------
// SaveVehiclesCompData - saves the data on server side
//------------------------------------------------------------------------------
window.SaveVehiclesCompData = function() {
    var compData = GetRAFlowCompLocalData("vehicles");
    return SaveCompDataAJAX(compData, "vehicles");
};

//-----------------------------------------------------------------------------
// GetVehicleFeeLocalData - returns the clone of vehicle fee data for requested
//                          TMPVID and TMPASMID
//-----------------------------------------------------------------------------
window.GetVehicleFeeLocalData = function(TMPVID, TMPASMID, returnIndex) {
    var cloneData = {};
    var foundIndex = -1;
    var compData = GetRAFlowCompLocalData("vehicles") || [];
    compData.forEach(function(item, index) {
        if (item.TMPVID == TMPVID) {
            var feesData = item.Fees || [];
            feesData.forEach(function(feeItem, index) {
                if (feeItem.TMPASMID == TMPASMID) {
                    if (returnIndex) {
                        foundIndex = index;
                    } else {
                        cloneData = $.extend(true, {}, feeItem);
                    }
                }
            });
            return false;
        }
    });
    if (returnIndex) {
        return foundIndex;
    }
    return cloneData;
};


//-----------------------------------------------------------------------------
// SetVehicleFeeLocalData - save the data for requested a TMPVID, TMPASMID
//                          in local data
//-----------------------------------------------------------------------------
window.SetVehicleFeeLocalData = function(TMPVID, TMPASMID, vehicleFeeData) {
    var compData = GetRAFlowCompLocalData("vehicles");
    var pIndex = -1,
        fIndex = -1;

    compData.forEach(function(item, itemIndex) {
        if (item.TMPVID == TMPVID) {
            var feesData = item.Fees || [];
            feesData.forEach(function(feeItem, feeItemIndex) {
                if (feeItem.TMPASMID == TMPASMID) {
                    fIndex = feeItemIndex;
                }
                return false;
            });
            pIndex = itemIndex;
            return false;
        }
    });

    // only if rentable found then
    if (pIndex > -1) {
        if (fIndex > -1) {
            compData[pIndex].Fees[fIndex] = vehicleFeeData;
        } else {
            compData[pIndex].Fees.push(vehicleFeeData);
        }
    }
};

//-----------------------------------------------------------------------------
// RenderVehicleFeesGridSummary - will render grid summary row from vehicle
//                                comp data
//-----------------------------------------------------------------------------
window.RenderVehicleFeesGridSummary = function(TMPVID) {
    var vehicleData = GetVehicleLocalData(TMPVID),
        grid = w2ui.RAVehicleFeesGrid,
        Fees = vehicleData.Fees || [];

    // render fees amount summary
    RenderFeesGridSummary(grid, Fees);
};

//-----------------------------------------------------------------------------
// AssignVehicleFeesGridRecords - will set the vehicle fees grid records from local
//                                copy of vehicle fees data again
//-----------------------------------------------------------------------------
window.AssignVehicleFeesGridRecords = function(TMPVID) {
    var grid    = w2ui.RAVehicleFeesGrid;

    // clear the grid
    grid.clear();

    // list of fees
    var vehicleData = GetVehicleLocalData(TMPVID),
        vehicleFeesData = vehicleData.Fees;

    // vehicle fees data
    vehicleFeesData.forEach(function(fee) {
        var gridRec = {};

        // for each grid column
        grid.columns.forEach(function(gridColumn) {
            gridRec[gridColumn.field] = fee[gridColumn.field];
        });

        // push the record in grid
        grid.records.push(gridRec);

        // assign recid again
        reassignGridRecids(grid.name);
    });

    // highlight row with light red background if it have error
    displayRAVehicleFeesGridError();

    // render vehicle fees grid summary
    RenderVehicleFeesGridSummary(TMPVID);
};

//-----------------------------------------------------------------------------
// GetVehicleIdentity - return easily readable vehicle identity string
//-----------------------------------------------------------------------------
window.GetVehicleIdentity = function(record) {
    var year    = record.VehicleYear,
        make    = record.VehicleMake,
        model   = record.VehicleModel;

    if (year || make || model) {
        return "{0} {1} {2}".format(year, make, model);
    }

    return "";
};

// dispalyRAPeopleGridError
// It highlights grid's row if it have error
window.dispalyRAVehiclesGridError = function (){
    // load grid errors if any
    var g = w2ui.RAVehiclesGrid;
    var record, i;
    for (i = 0; i < g.records.length; i++) {
        // get record from grid to apply css
        record = g.get(g.records[i].recid);

        if (!("w2ui" in record)) {
            record.w2ui = {}; // init w2ui if not present
        }
        if (!("class" in record.w2ui)) {
            record.w2ui.class = ""; // init class string
        }
        if (!("style" in record.w2ui)) {
            record.w2ui.style = {}; // init style object
        }
    }

    if (app.raflow.validationErrors.vehicles) {
        var vehicles = app.raflow.validationCheck.errors.vehicles.errors;
        for (i = 0; i < vehicles.length; i++) {
            if (vehicles[i].total > 0) {
                var recid = getRecIDFromTMPVID(g, vehicles[i].TMPVID);
                g.get(recid).w2ui.style = "background-color: #EEB4B4";
                g.refreshRow(recid);
            }
        }
    }
};

window.displayRAVehicleFeesGridError = function () {
    // load grid errors if any
    var g = w2ui.RAVehicleFeesGrid;
    var record, i;
    for (i = 0; i < g.records.length; i++) {
        // get record from grid to apply css
        record = g.get(g.records[i].recid);

        if (!("w2ui" in record)) {
            record.w2ui = {}; // init w2ui if not present
        }
        if (!("class" in record.w2ui)) {
            record.w2ui.class = ""; // init class string
        }
        if (!("style" in record.w2ui)) {
            record.w2ui.style = {}; // init style object
        }
    }

    if (app.raflow.validationErrors.vehicles) {
        var vehicles = app.raflow.validationCheck.errors.vehicles.errors;
        for (i = 0; i < vehicles.length; i++) {
            for (var j = 0; j < vehicles[i].fees.errors.length; j++) {
                if (vehicles[i].fees.errors[j].total > 0) {
                    var recid = getRecIDFromTMPASMID(g, vehicles[i].fees.errors[j].TMPASMID);
                    g.get(recid).w2ui.style = "background-color: #EEB4B4";
                    g.refreshRow(recid);
                }
            }
        }
    }
};

// getRecIDFromTMPVID It returns recid of grid record which matches TMPTCID
window.getRecIDFromTMPVID = function(grid, TMPVID){
    // var g = w2ui.RAPeopleGrid;
    var recid;
    for (var i = 0; i < grid.records.length; i++) {
        if (grid.records[i].TMPVID === TMPVID) {
            recid = grid.records[i].recid;
        }
    }
    return recid;
};

// displayRAVehicleFormError If form field have error than it highlight with red border and
window.displayRAVehicleFormError = function(){

    // if pet section doesn't have error than return
    if(!app.raflow.validationErrors.vehicles){
        return;
    }

    var form = w2ui.RAVehicleForm;
    var record = form.record;

    // get list of pets
    var vehicles = app.raflow.validationCheck.errors.vehicles.errors;

    // get index of pet for whom form is opened
    var index = getVehicleIndex(record.TMPVID, vehicles);

    if(index > -1){
        displayFormFieldsError(index, vehicles, "RAVehicleForm");
    }
};

// getVehicleIndex it return an index of vehicle who have TMPVID
window.getVehicleIndex = function (TMPVID, vehicles) {

    var index = -1;

    for(var i = 0; i < vehicles.length; i++){
        // If TMPVID doesn't match iterate for next element
        if(vehicles[i].TMPVID === TMPVID){
            index = i;
            break;
        }
    }

    return index;
};

// displayRAVehicleFeeFormError If form field have error than it highlight with red border and
window.displayRAVehicleFeeFormError = function(TMPVID){

    // if pet section doesn't have error than return
    if(!app.raflow.validationErrors.vehicles){
        return;
    }

    var form = w2ui.RAVehicleFeeForm;
    var record = form.record;

    // get list of pets
    var vehicles = app.raflow.validationCheck.errors.vehicles.errors;

    // get index of vehicle for whom form is opened
    var vehicleIndex = getVehicleIndex(TMPVID, vehicles);

    var index = getFeeIndex(record.TMPASMID, vehicles[vehicleIndex].fees.errors);

    if(index > -1){
        displayFormFieldsError(index, vehicles[vehicleIndex].fees.errors, "RAVehicleFeeForm");
    }
};

/*global
    $, w2ui, console, app, getTCIDName, w2popup, getCurrentBusiness,
    asmFormRASelect, expFormRASelect, rentalAgrPickerRender, rentalAgrPickerDropRender, rentalAgrPickerCompare,
    rafinder
*/
"use strict";

//------------------------------------------------------------------------
//          rental Agreement Finder
//------------------------------------------------------------------------

window.rafinder = {
    cb: null,
};

//-----------------------------------------------------------------------------
// buildRAPicker - rentalAgrPicker is a form to help the user find the Rental
//          Agreement they're looking for. It uses typedown on the payors name
//          to determine what Rental Agreements the user is responsible for
//          and lists them all in real-time so the user can pick the one they
//          want.
// @params
// @return
//-----------------------------------------------------------------------------
window.buildRAPicker = function (){
    $().w2form({
        name: 'rentalAgrPicker',
        style: 'border: 0px; background-color: transparent;',
        formURL: '/webclient/html/rentalagrfinder.html',
        focus  : 0,
        fields: [
            { field: 'TCID', type: 'int', required: true },
            // INDEX 1
            { field: 'PayorName', required: true,
                type: 'enum',
                options: {
                    url:            '/v1/rentalagrtd/' + app.RentalAgrPicker.BID,
                    // max:     1,
                    items: [],
                    openOnFocus:    true,
                    maxDropWidth:   350,
                    maxDropHeight:  350,
                    renderItem:     rentalAgrPickerRender,
                    renderDrop:     rentalAgrPickerDropRender,
                    compare:        rentalAgrPickerCompare,
                    onNew: function (event) {
                        console.log('++ New Item: Do not forget to submit it to the server too', event);
                        //$.extend(event.item, { FirstName: '', LastName : event.item.text });
                    }
                },
            },
            // INDEX 2
            { field: 'RentableName', type: 'list',      required: true, options: { items: [] } },
            { field: 'RAID',         type: 'int',       required: true  },
            { field: 'FirstName',    type: 'text',      required: false },
            { field: 'LastName',     type: 'text',      required: false },
            { field: 'CompanyName',  type: 'text',      required: false },
            { field: 'IsCompany',    type: 'checkbox',  required: false },
        ],
        onRefresh: function(/*event*/) {
            w2ui.rentalAgrPicker.fields[1].options.url = '/v1/rentalagrtd/' + app.RentalAgrPicker.BID;
            w2ui.rentalAgrPicker.fields[2].options.items = app.RentalAgrPicker.RARentablesNames;
            if (app.RentalAgrPicker.RARentablesNames.length == 1) {
                w2ui.rentalAgrPicker.record.RentableName = app.RentalAgrPicker.RARentablesNames[0];
            }
        },
        actions: {
            save: function () {
                if (typeof rafinder.cb == "function" ) {
                    rafinder.cb();
                }
                w2popup.close();
            },
        },
    });
};

// popupRentalAgrPicker comes up when the user clicks on the Find... button
// while creating an assessment. It is used to locate a rental agreement by payor.
// @PARAMS
//    s - caller name
//----------------------------------------------------------------------------------
window.popupRentalAgrPicker = function (s) {
    rafinder.caller = s;
    var x = getCurrentBusiness();
    app.RentalAgrPicker = {BID: x.value, RAID: 0, TCID: 0, RID: 0, FirstName: '', LastName: '', CompanyName: '', IsCompany: false, RAR: [], RARentablesNames: []};
    app.RentalAgrPicker.RARentablesNames = [{id: 0, text:" "}];
    w2ui.rentalAgrPicker.fields[2].options.items = app.RentalAgrPicker.RARentablesNames;
    w2ui.rentalAgrPicker.record.TCID = -1;
    w2ui.rentalAgrPicker.record.RAID = -1;
    w2ui.rentalAgrPicker.record.PayorName = '';
    w2ui.rentalAgrPicker.record.IsCompany = false;
    w2ui.rentalAgrPicker.record.CompanyName = '';
    w2ui.rentalAgrPicker.record.FirstName = '';
    w2ui.rentalAgrPicker.record.LastName = '';
    w2ui.rentalAgrPicker.refresh();

    $().w2popup('open', {
        title   : 'Find Rental Agreement',
        body    : '<div id="form" style="width: 100%; height: 100%;"></div>',
        style   : 'padding: 15px 0px 0px 0px',
        width   : 400,
        height  : 250,
        showMax : true,
        onToggle: function (event) {
            $(w2ui.rentalAgrPicker.box).hide();
            event.onComplete = function () {
                $(w2ui.rentalAgrPicker.box).show();
                w2ui.rentalAgrPicker.resize();
            };
        },
        onOpen: function (event) {
            event.onComplete = function () {
                // specifying an onOpen handler instead would be equivalent to specifying
                // an onBeforeOpen handler, which would make this code execute too
                // early and hence not deliver.
                $('#w2ui-popup #form').w2render('rentalAgrPicker');
            };
        }
    });
};


//-----------------------------------------------------------------------------
// rentalAgrPickerCompare - Compare item to the search string. Verify that the
//          supplied search string can be found in item
// @params
//   item = an object assumed to have a FirstName and LastName
// @return - true if the search string is found, false otherwise
//-----------------------------------------------------------------------------
window.rentalAgrPickerCompare = function (item, search) {
    var s = getTCIDName(item);
    s = s.toLowerCase();
    var srch = search.toLowerCase();
    var match = (s.indexOf(srch) >= 0);
    return match;
};

//-----------------------------------------------------------------------------
// rentalAgrPickerDropRender - renders a name during typedown.
// @params
//   item = an object assumed to have a FirstName and LastName
// @return - the name to render
//-----------------------------------------------------------------------------
window.rentalAgrPickerDropRender = function (item) {
    return getTCIDName(item);
};

// //-----------------------------------------------------------------------------
// // rentalAgrPickerRender - renders a name during typedown in the
// //          rentalAgrPicker. It also sets the TCID for the record.
// // @params
// //   item = an object assumed to have a FirstName and LastName
// // @return - true if the names match, false otherwise
// //-----------------------------------------------------------------------------
// function rentalAgrPickerRender(item) {
//     var s = getTCIDName(item);
//     w2ui.rentalAgrPicker.record.TCID = item.TCID;
//     w2ui.rentalAgrPicker.record.Payor = s;
//     w2ui.rentalAgrPicker.record.RAID = item.RAID;
//     return s;
// }

//-----------------------------------------------------------------------------
// rentalAgrPickerRender - renders a name during typedown.
// @params
//   item = an object assumed to have a FirstName and LastName
// @return - true if the names match, false otherwise
//-----------------------------------------------------------------------------
window.rentalAgrPickerRender = function (item) {
    var s;
    if (item.IsCompany) {
        s = item.CompanyName;
    } else {
        s = item.FirstName + ' ' + item.LastName;
    }

    w2ui.rentalAgrPicker.record = {
        TCID: item.TCID,
        RAID: item.RAID,
        PayorName: s,
        FirstName: item.FirstName,
        MiddleName: item.MiddleName,
        LastName: item.LastName,
        IsCompany: item.IsCompany,
        CompanyName: item.CompanyName,
        RID: item.RID,
    };

    // Try to getget the rentables associated with item.RAID.  There may not
    // be any rentables, which means they could be taking an application fee
    // from a potential renter...
    //------------------------------------------------------------------------
    var url = '/v1/rar/' + app.RentalAgrPicker.BID + '/' + item.RAID;
    $.get(url, null, null, "json")
    .done(function(data) {
        app.RentalAgrPicker.RAR = data;
        app.RentalAgrPicker.RARentablesNames = [];
        if (app.RentalAgrPicker.RAR.records) {
            for (var i = 0; i < app.RentalAgrPicker.RAR.records.length; i++) {
                app.RentalAgrPicker.RARentablesNames.push(
                    { id: app.RentalAgrPicker.RAR.records[i].RID, text: app.RentalAgrPicker.RAR.records[i].RentableName} );
            }
        } else {
            app.RentalAgrPicker.RARentablesNames.push({ id: 0, text: ''} );
        }
        console.log('calling rentalAgrPicker.refresh(), app.RentalAgrPicker.RARentablesNames.length = ' + app.RentalAgrPicker.RARentablesNames.length );
        w2ui.rentalAgrPicker.refresh();
    });
    return s;
};



/*global
    w2ui, $, app, w2confirm, getBUDfromBID, getCurrentBusiness, setToForm,
    console, form_dirty_alert, buildPaymentTypeSelectList, setDateControlsInToolbar,
    addDateNavToToolbar, tcidReceiptPayorPickerRender, tcidPickerDropRender, tcidPickerCompare,
    getPersonDetailsByTCID, getPaymentType, formRefreshCallBack, w2utils, reverse_confirm_options,
    getFormSubmitData, w2uiDateControlString, getGridReversalSymbolHTML, get2XReversalSymbolHTML,
    setDefaultFormFieldAsPreviousRecord, formRecDiffer, getBusinessReceiptRules, getReceiptInitRecord,
    handleReceiptRAID
*/
"use strict";
window.getReceiptInitRecord = function (BID, BUD, ptInit, previousFormRecord){
    var y = new Date();
    var defaultFormData = {
        recid: 0,
        RCPTID: 0,
        PRCPTID: 0,
        ARID: 0,
        PMTID: 0,
        RAID: 0,
        PmtTypeName: ptInit,
        BID: BID,
        BUD: BUD,
        DID: 0,
        Dt: w2uiDateControlString(y),
        LastModTime: y.toISOString(),
        CreateTS: y.toISOString(),
        DocNo: '',
        Payor: '',
        TCID: 0,
        Amount: 0,
        Comment: '',
        OtherPayorName: '',
        FLAGS: 0,
        LastModBy: 0,
        CreateBy: 0
    };

    // if it called after 'save and add another' action there previous form record is passed as Object
    // else it is null
    if ( previousFormRecord ) {
        defaultFormData = setDefaultFormFieldAsPreviousRecord(
            [ 'DocNo', 'Payor', 'Amount', 'OtherPayorName', 'Comment', 'RAID'], // Fields to Reset
            defaultFormData,
            previousFormRecord
        );
    }

    return defaultFormData;
};

//-----------------------------------------------------------------------------
// getBusinessReceiptRules - return the promise object of request to get latest
//                           receipt rules for given BID.
//                           It updates the "app.ReceiptRules" variable for requested BUD
// @params  - BID : Business ID (expected current one)
//          - BUD : Business Unit Designation
// @return  - promise object from $.get
//-----------------------------------------------------------------------------
window.getBusinessReceiptRules = function (BID, BUD) {
    // if not BUD in app.ReceiptRules then initialize it with blank list
    if (!(BUD in app.ReceiptRules)) {
        app.ReceiptRules[BUD] = [];
    }

    // return promise
    return $.get("/v1/uival/" + BID + "/app.ReceiptRules", null, null, "json").done(function(data) {
            // if it doesn't meet this condition, then save the data
            if (!('status' in data && data.status !== "success")) {
                app.ReceiptRules[BUD] = data[BUD];
            }
        });
};

window.buildReceiptElements = function () {
    //------------------------------------------------------------------------
    //          receiptsGrid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'receiptsGrid',
        url: '/v1/receipts',
        multiSelect: false,
        postData: {searchDtStart: app.D1, searchDtStop: app.D2},
        show: {
            toolbar        : true,
            footer         : true,
            toolbarAdd     : true,    // indicates if toolbar add new button is visible
            toolbarDelete  : false,   // indicates if toolbar delete button is visible
            toolbarSave    : false,   // indicates if toolbar save button is visible
            selectColumn   : false,
            expandColumn   : false,
            toolbarEdit    : false,
            toolbarSearch  : false,
            toolbarInput   : true,
            searchAll      : false,
            toolbarReload  : true,
            toolbarColumns : true,
        },
        columns: [
            {field: 'recid', hidden: true, caption: 'recid',  size: '40px', sortable: true},
            {field: 'reversed', size: '10px', style: 'text-align: center', sortable: true,
                    render: function (record /*, index, col_index*/) {
                        if (typeof record === "undefined") {
                            return;
                        }
                        if ( (record.FLAGS & app.rcptFLAGS.REVERSED) !== 0 ) { // if reversed then
                            return getGridReversalSymbolHTML();
                        }
                        return '';
                    },
            },
            {field: 'RCPTID',      caption: 'Receipt ID',     size: '80px',  hidden: false, sortable: true, style: 'text-align: right'},
            {field: 'Dt',          caption: 'Date',           size: '80px',  hidden: false, sortable: true, style: 'text-align: right'},
            {field: 'ARID',        caption: 'ARID',           size: '150px', hidden: true,  sortable: false},
            {field: 'DID',         caption: 'DID',            size: '150px', hidden: false, sortable: false},
            {field: 'AcctRule',    caption: 'Account Rule',   size: '150px', hidden: false, sortable: true},
            {field: 'Amount',      caption: 'Amount',         size: '100px', hidden: false, sortable: true, render: 'money', style: 'text-align: right'},
            {field: 'BID',         caption: 'BUD',            size: '40px',  hidden: true,  sortable: false},
            {field: 'TCID',        caption: 'TCID',           size: '40px',  hidden: true,  sortable: false},
            {field: 'PMTID',       caption: 'PMTID',                         hidden: true,  sortable: false},
            {field: 'PmtTypeName', caption: 'Payment Type',   size: '100px', hidden: false, sortable: true},
            {field: 'DocNo',       caption: 'Document Number',size: '150px', hidden: false, sortable: true, style: 'text-align: right'},
            {field: 'Payor',       caption: 'Payor',          size: '150px', hidden: false, sortable: true},
        ],
        searches : [
            { field: 'Amount', caption: 'Amount', type: 'string' },
            // { field: 'DocNo', caption: 'Document Number', type: 'string' },
            { field: 'Payor', caption: 'Payor', type: 'string' },
            { field: 'PmtTypeName', caption: 'Payment Type', type: 'string' },
            { field: 'AcctRule', caption: 'Account Rule', type: 'string' },
        ],
        onClick: function(event) {
            event.onComplete = function () {
                var yes_args = [this, event.recid],
                    no_args = [this],
                    no_callBack = function(grid) {
                        grid.select(app.last.grid_sel_recid);
                        return false;
                    },
                    yes_callBack = function(grid, recid) {
                        var BID = getCurrentBID(),
                            BUD = getBUDfromBID(BID);

                        app.last.grid_sel_recid = parseInt(recid);
                        grid.select(app.last.grid_sel_recid);// keep highlighting current row in any case

                        var rec = grid.get(recid),
                            f = w2ui.receiptForm;

                        // get the latest receipt rules and feed the list in "ARID" form field
                        getBusinessReceiptRules(BID, BUD)
                        .done(function(data) {
                            if ('status' in data && data.status !== 'success') {
                                f.message(data.message);
                            } else {
                                f.get('ARID').options.items = app.ReceiptRules[BUD];
                                f.refresh();
                                setToForm('receiptForm', '/v1/receipt/' + BID + '/' + rec.RCPTID, 400, true);
                            }
                        })
                        .fail( function() {
                            console.log('Error getting /v1/uival/' + BID + '/app.ReceiptRules');
                         });
                    };
                form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);  // warn user if form content has been changed
            };
        },
        onRequest: function(/*event*/) {
            w2ui.receiptsGrid.postData = {searchDtStart: app.D1, searchDtStop: app.D2};
        },
        onRefresh: function(event) {
            event.onComplete = function() {
                if (app.active_grid == this.name) {
                    if (app.new_form_rec) {
                        this.selectNone();
                    }
                    else{
                        this.select(app.last.grid_sel_recid);
                    }
                }

                if (event.target == 'monthfwd') {  // we do these tasks after monthfwd is refreshed so we know that the 2 date controls exist
                    setDateControlsInToolbar('receipts');
                    w2ui.receiptsGrid.postData = {searchDtStart: app.D1, searchDtStop: app.D2};
                }
            };
        },
        onAdd: function (/*event*/) {
            var yes_args = [this],
                no_callBack = function() { return false; },
                yes_callBack = function(grid) {
                    var BID = getCurrentBID(),
                        BUD = getBUDfromBID(BID);

                    // reset it
                    app.last.grid_sel_recid = -1;
                    grid.selectNone();

                    var f = w2ui.receiptForm;

                    // get the latest receipt rules
                    getBusinessReceiptRules(BID, BUD)
                    .done(function(data) {
                        if ('status' in data && data.status !== 'success') {
                            f.message(data.message);
                        } else {
                            var pmt_options = buildPaymentTypeSelectList(BUD);
                            var ptInit = (pmt_options.length > 0) ? pmt_options[0] : '';
                            f.get("PmtTypeName").options.items = pmt_options;
                            f.get("ARID").options.items = app.ReceiptRules[BUD];
                            f.record = getReceiptInitRecord(BID, BUD, ptInit, null);
                            f.header =  "Edit Receipt (new)";
                            f.refresh();
                            setToForm('receiptForm', '/v1/receipt/' + BID + '/0', 400);
                        }
                    })
                    .fail( function() {
                        console.log('Error getting /v1/uival/'+BUD+'/app.ReceiptRules');
                    });
                };

            // warn user if form content has been changed
            form_dirty_alert(yes_callBack, no_callBack, yes_args);
        },
    });

    addDateNavToToolbar('receipts');

    //------------------------------------------------------------------------
    //          receiptForm
    //------------------------------------------------------------------------
    $().w2form({
        name: 'receiptForm',
        style: 'border: 0px; background-color: transparent;',
        header: 'Receipt Detail',
        url: '/v1/receipt',
        formURL: '/webclient/html/formrcpt.html',
        postData: {client: app.client},
        fields: [
            { field: 'PmtTypeName',    type: 'list', required: true, options: { items: [], selected: {} }, html: { caption: "BUD", page: 0 } }, // keep this at position 0 as the list changes and we need to update it
            { field: 'ARID',           type: 'list',  required: true, options:  {items: app.ReceiptRules} },  // 1
            { field: 'recid',          type: 'int',   required: false },                                     // 2
            { field: "BID", required: false, type: 'int', html: { caption: "BID", page: 0, column: 0 } },
            { field: "BUD", required: true, options: { items: app.businesses, maxDropHeight: 350 }, type: 'list', html: { caption: "BUD", page: 0, column: 0 } },
            { field: 'RCPTID',         type: 'int',   required: true },     // 4
            { field: 'PRCPTID',        type: 'int',   required: false },    // 5
            { field: 'PMTID',          type: 'int',   required: false },    // 6
            { field: 'Dt',             type: 'date',  required: true },     // 7
            { field: 'DocNo',          type: 'text',  required: true },    // 8
            { field: 'Payor', required: true,                               // 9   <<<<<<********
                type: 'enum',
                options: {
                    url:        '/v1/transactantstd/',
                    max:        1,
                    renderItem: tcidReceiptPayorPickerRender,
                    renderDrop: tcidPickerDropRender,
                    compare:    tcidPickerCompare,
                    onNew: function (event) {
                        //console.log('++ New Item: Do not forget to submit it to the server too', event);
                        $.extend(event.item, { FirstName: '', LastName : event.item.text });
                    },
                    onRemove: function(event) {
                        event.onComplete = function() {
                            var f = w2ui.receiptForm;
                            // reset payor field related data when removed
                            f.record.TCID = 0;
                            f.record.Payor = "";

                            // NOTE: have to trigger manually, b'coz we manually change the record,
                            // otherwise it triggers the change event but it won't get change (Object: {})
                            var event = f.trigger({ phase: 'before', target: f.name, type: 'change', event: event }); // event before
                            if (event.cancelled === true) return false;
                            f.trigger($.extend(event, { phase: 'after' })); // event after
                        };
                    }
                },
            },
            { field: 'TCID',           type: 'w2int',  required: false },
            { field: 'RAID',           type: 'w2int',  required: false },
            { field: 'Amount',         type: 'money',  required: true },
            { field: 'Comment',        type: 'text',   required: false },
            { field: 'OtherPayorName', type: 'text',   required: false },
            { field: 'FLAGS',          type: 'w2int',  required: false },
            { field: 'DID',            type: 'int',    required: false },
            { field: 'LastModTime',    type: 'hidden', required: false },
            { field: 'LastModBy',      type: 'hidden', required: false },
            { field: 'LastModByUser',  type: 'hidden', required: false },
            { field: 'CreateTS',       type: 'hidden', required: false },
            { field: 'CreateBy',       type: 'hidden', required: false },
            { field: 'CreateByUser',   type: 'hidden', required: false },
        ],
        toolbar: {
            items: [
                { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
                { id: 'bt3', type: 'spacer' },
                { id: 'btnClose', type: 'button', icon: 'fas fa-times' },
            ],
            onClick: function (event) {
                switch(event.target) {
                case 'btnClose':
                    var no_callBack = function() { return false; },
                        yes_callBack = function() {
                            w2ui.toplayout.hide('right',true);
                            w2ui.receiptsGrid.render();
                        };
                    form_dirty_alert(yes_callBack, no_callBack);
                    break;
                }
            },
        },
        onRender: function(event) { // when form is loaded first time in toplayout right panel
            event.onComplete = function() {
                var f = this,
                    r = f.record,
                    BID = getCurrentBID();

                // enable/disable RAID based on Account Rule
                var arid;
                if (typeof r.ARID === "object") {
                    arid = r.ARID.id;
                } else {
                    arid = r.ARID;
                }
                if (arid) { // if it has Account Rule then only
                    var url = '/v1/ar/' + r.BID +'/' + arid;
                    handleReceiptRAID(url, f);
                }

                if (r.TCID) { // if it has Payor then only
                    var record = {};
                    getPersonDetailsByTCID(BID, r.TCID)
                    .done(function(data) {
                        record = data.record;
                        var item = {
                            CompanyName: record.CompanyName,
                            IsCompany: record.IsCompany,
                            FirstName: record.FirstName,
                            LastName: record.LastName,
                            MiddleName: record.MiddleName,
                            TCID: record.TCID,
                            recid: 0,
                        };
                        if ($(f.box).find("input[name=Payor]").length > 0) {
                            $(f.box).find("input[name=Payor]").data('selected', [item]).data('w2field').refresh();
                        }
                    })
                    .fail(function() {
                        f.message("Couldn't get person details for TCID: ", r.TCID);
                        console.log("couldn't get person details for TCID: ", r.TCID);
                    });
                }
            };
        },
        onLoad: function(event) { // when form data is loaded without rendering/refreshing event then
            event.onComplete = function() {
                var f = this,
                    r = f.record,
                    BID = getCurrentBID();

                // enable/disable RAID based on Account Rule
                var arid;
                if (typeof r.ARID === "object") {
                    arid = r.ARID.id;
                } else {
                    arid = r.ARID;
                }
                if (arid) { // if it has Account Rule then only
                    var url = '/v1/ar/' + r.BID +'/' + arid;
                    handleReceiptRAID(url, f);
                }

                if (r.TCID) { // if it has Payor then only
                    var record = {};
                    getPersonDetailsByTCID(BID, r.TCID)
                    .done(function(data) {
                        record = data.record;
                        var item = {
                            CompanyName: record.CompanyName,
                            IsCompany: record.IsCompany,
                            FirstName: record.FirstName,
                            LastName: record.LastName,
                            MiddleName: record.MiddleName,
                            TCID: record.TCID,
                            recid: 0,
                        };
                        if ($(f.box).find("input[name=Payor]").length > 0) {
                            $(f.box).find("input[name=Payor]").data('selected', [item]).data('w2field').refresh();
                        }
                    })
                    .fail(function() {
                        f.message("Couldn't get person details for TCID: ", r.TCID);
                        console.log("couldn't get person details for TCID: ", r.TCID);
                    });
                }
            };
        },
        onRefresh: function(event) {
            event.onComplete = function() {
                var f = this,
                    r = f.record,
                    x = getCurrentBusiness(),
                    BID=parseInt(x.value),
                    BUD = getBUDfromBID(BID),
                    header = "Edit Receipt ({0})";

                f.get("PmtTypeName").options.items = buildPaymentTypeSelectList( BUD );
                f.get("PmtTypeName").options.selected = getPaymentType(BUD, r.PMTID);
                f.get("ARID").options.items = app.ReceiptRules[BUD];
                f.get("Payor").options.url = '/v1/transactantstd/'+ BUD;
                // $("#receiptForm").find("input[name=Dt]").prop("disabled", r.RCPTID !== 0);

                formRefreshCallBack(f, "RCPTID", header);

                // ==================================
                // SPECIAL CASE
                // ==================================
                if (r.RCPTID === 0) { // if new record then do not worry about reversed thing
                    $(f.box).find("button[name=reverse]").addClass("hidden");
                    $(f.box).find("button[name=save]").removeClass("hidden");
                    $(f.box).find("button[name=saveadd]").removeClass("hidden");
                    $(f.box).find("button[name=close]").addClass("hidden");
                    $(f.box).find("#FLAGReport").addClass("hidden");

                    // ENABLE ALL INPUTS IF ALL OF THOSE HAVE BEEN DISABLED FOR REVERSED PREVIOUSLY
                    $(f.box).find('input,button').not('input[name=BUD], input[name=DID]').prop("disabled", false);
                    return;
                } else {
                    $(f.box).find("#FLAGReport").removeClass("hidden");
                }
                // this one is a special case, where also have to take care of reverse button
                // FLAG reports
                var flag = r.FLAGS,
                    flagHTML = "";

                // check if it is reversed or not
                if ( (flag & app.rcptFLAGS.REVERSED) !== 0 ) { // if reversed then
                    flagHTML += "<p><strong>{0}</strong> ({1})</p>".format("REVERSED", r.Comment);
                    // reversed indication icon
                    flagHTML += get2XReversalSymbolHTML();
                    // if reversed then do not show reverse, save, saveadd button
                    $(f.box).find("button[name=reverse]").addClass("hidden");
                    $(f.box).find("button[name=save]").addClass("hidden");
                    $(f.box).find("button[name=saveadd]").addClass("hidden");
                    // if reversed then we need to show close button
                    $(f.box).find("button[name=close]").removeClass("hidden");

                    // ********************************************************
                    // IF REVERSED THEN DISABLE ALL INPUTS, BUTTONS EXCEPT close button
                    // ********************************************************
                    $(f.box).find('input,button:not([name=close])').prop("disabled", true);

                } else {
                    // IF NOT REVERSED THEN ONLY SHOW PAID STATUS IN FOOTER
                    // unpaid, partial paid or fully paid
                    if ( (flag | app.rcptFLAGS.UNALLOCATED) === 0 || (flag & (app.rcptFLAGS.PARTIALALLOCATED | app.rcptFLAGS.FULLYALLOCATED)) === 0 ) {
                        flagHTML += "<p><strong>{0}</strong></p>".format("Unallocated");
                    }
                    else if ( (flag & app.rcptFLAGS.PARTIALALLOCATED) !== 0 ) {
                        flagHTML += "<p><strong>{0}</strong></p>".format("Partially allocated");
                    }
                    else if ( (flag & app.rcptFLAGS.FULLYALLOCATED) !== 0 ) {
                        flagHTML += "<p><strong>{0}</strong></p>".format("Fully allocated");
                    }

                    // show save, saveadd, reverse button, hide close button
                    $(f.box).find("button[name=reverse]").removeClass("hidden");
                    $(f.box).find("button[name=save]").removeClass("hidden");
                    $(f.box).find("button[name=saveadd]").removeClass("hidden");
                    $(f.box).find("button[name=close]").addClass("hidden");

                    // ********************************************************
                    // IF not REVERSED THEN ENABLE ALL INPUTS, BUTTONS
                    // ********************************************************
                    $(f.box).find('input,button').not('input[name=BUD], input[name=DID]').prop("disabled", false);
                }

                // finally append
                flagHTML += "<p>Last Update: {0} by {1}</p>".format(r.LastModTime, r.LastModByUser);
                flagHTML += "<p>Created: {0} by {1}</p>".format(r.CreateTS, r.CreateByUser);
                $(f.box).find("#FLAGReport").html(flagHTML);
            };
        },
        onValidate: function (event) {
            if (this.record.Amount === 0.0) {
                event.errors.push({
                    field: this.get('Amount'),
                    error: 'Amount must be something other than $0.00'
                });
            }
            if (this.record.PMTID === 0) {
                event.errors.push({
                    field: this.get('PmtTypeName'),
                    error: 'Please select the payment type'
                });
            }
            if (this.record.ARID.id === 0) {
                event.errors.push({
                    field: this.get('ARID'),
                    error: 'Please select the receipt rule'
                });
            }
        },
        onSubmit: function(target, data) {
            delete data.postData.record.LastModTime;
            delete data.postData.record.LastModBy;
            delete data.postData.record.CreateTS;
            delete data.postData.record.CreateBy;
            // modify form data for server request
            w2ui.receiptForm.postData = {client: app.client};
            getFormSubmitData(data.postData.record);
        },
        onChange: function(event) {
            event.onComplete = function() {
                var f = this,
                    r = f.record;
                switch (event.target) {
                case "PmtTypeName":
                    r.PMTID = event.value_new.id;
                    break;
                case "ARID":
                    var url = '/v1/ar/' + r.BID +'/' + event.value_new.id;
                    handleReceiptRAID(url, f);
                    break;
                }
                // formRecDiffer: 1=current record, 2=original record, 3=diff object
                var diff = formRecDiffer(f.record, app.active_form_original, {});
                // if diff == {} then make dirty flag as false, else true
                if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                    app.form_is_dirty = false;
                } else {
                    app.form_is_dirty = true;
                }
            };
        },
        actions: {
            close: function() {
                var no_callBack = function() { return false; },
                    yes_callBack = function() {
                        w2ui.toplayout.hide('right',true);
                        w2ui.receiptsGrid.render();
                    };
                form_dirty_alert(yes_callBack, no_callBack);
            },
            saveadd: function() {
                var f = this,
                    r = f.record,
                    grid = w2ui.receiptsGrid,
                    x = getCurrentBusiness(),
                    BID=parseInt(x.value),
                    BUD = getBUDfromBID(BID);

                if (typeof r.RAID === "string") {
                    r.RAID = parseInt(r.RAID);
                }
                // clean dirty flag of form
                app.form_is_dirty = false;
                // clear the grid select recid
                app.last.grid_sel_recid  =-1;

                // select none if you're going to add new record
                grid.selectNone();

                f.save({client: app.client}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }

                    // JUST RENDER THE GRID ONLY
                    grid.render();

                    var url = '/v1/ar/' + r.BID +'/' + f.record.ARID.id;
                    handleReceiptRAID(url, f);

                    // add new empty record and just refresh the form, don't need to do CLEAR form
                    var pmt_options = buildPaymentTypeSelectList(BUD);
                    var ptInit = (pmt_options.length > 0) ? pmt_options[0] : '';
                    f.get("PmtTypeName").options.items = pmt_options;
                    f.get("ARID").options.items = app.ReceiptRules[BUD];
                    f.record = getReceiptInitRecord(BID, BUD, ptInit, f.record);
                    f.header = "Edit Receipt (new)"; // have to provide header here, otherwise have to call refresh method twice to get this change in form
                    f.url = '/v1/receipt/' + BID + '/0';
                    f.refresh();
                });
            },
            save: function () {
                var f = this,
                    r = f.record,
                    // x = getCurrentBusiness(),
                    // BID=parseInt(x.value),
                    grid = w2ui.receiptsGrid;

                if (typeof r.RAID === "string") {
                    r.RAID = parseInt(r.RAID);
                }
                grid.selectNone();

                f.save({client: app.client}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }
                    w2ui.toplayout.hide('right',true);
                    grid.render();
                });
            },
            reverse: function() {
                var form = this;

                w2confirm(reverse_confirm_options)
                .yes(function() {
                    var tgrid = w2ui.receiptsGrid;
                    var params = {cmd: 'delete', formname: form.name, RCPTID: form.record.RCPTID };
                    var dat = JSON.stringify(params);
                    // Reverse receipt request
                    $.post(form.url, dat, null, "json")
                    .done(function(data) {
                        if (data.status === "error") {
                            form.error(w2utils.lang(data.message));
                            return;
                        }
                        w2ui.toplayout.hide('right',true);
                        // reversed items should not be deleted!
                        tgrid.render();
                    })
                    .fail(function(/*data*/){
                        form.error("Reverse Receipt failed.");
                        return;
                    });
                })
                .no(function() {
                    return;
                });
            },
        },
   });
};

window.handleReceiptRAID = function (url, f) {
    var params = {"cmd":"get","recid":0,"name":"receiptForm","client": app.client};
    var dat = JSON.stringify(params);
    $.post(url, dat, null, "json")
    .done(function(data) {
        if (data.status === "error") {
            f.error(w2utils.lang(data.message));
            return;
        }
        var b = (data.record.FLAGS & 4 !== 0);
        $(f.box).find("input[name=RAID]").prop( "disabled", !b);
    })
    .fail(function(/*data*/){
        f.error(url + " failed to get Receipt Rule details.");
    });
};

/*global
    setDefaultFormFieldAsPreviousRecord, w2uiDateControlString, $, w2ui, app, getCurrentBusiness, parseInt, getBUDfromBID,
    getRentableTypes, setToForm, form_dirty_alert, console, getFormSubmitData, addDateNavToToolbar, setRentableLayout,
    getRentableInitRecord
*/
"use strict";
window.getRentableInitRecord = function (BID, BUD, previousFormRecord) {
    var y = new Date();
    var defaultFormData = {
        recid: 0,
        BID: BID,
        BUD: BUD,
        RID: 0,
        RentableName: "",
        RARID: 0,
        RAID: 0,
        RARDtStart: w2uiDateControlString(y),
        RARDtStop: "1/1/9999",
        RTID: {id: 0, text: ''},
        RTRID: 0,
        RTRefDtStart: w2uiDateControlString(y),
        RTRefDtStop: "1/1/9999",
        RSID: 0,
        RentableStatus: "unknown",
        RentableLeaseStatus: "unknown",//add by lina
        RSDtStart: w2uiDateControlString(y),
        RSDtStop: "1/1/9999",
        AssignmentTime: 0,
        Comment: ""
    };

    // if it called after 'save and add another' action there previous form record is passed as Object
    // else it is null
    if (previousFormRecord) {
        defaultFormData = setDefaultFormFieldAsPreviousRecord(
            [],//['RentableName'], // Fields to Reset
            defaultFormData,
            previousFormRecord
        );
    }

    return defaultFormData;
};

//-----------------------------------------------------------------------------
// getRentableTypes - return the RentableTypes list with respect of BUD
// @params
//      - BUD: current business designation
// @return  the Rentable Types List
//-----------------------------------------------------------------------------
window.getRentableTypes = function (BUD) {
    return jQuery.ajax({
        type: "GET",
        url: "/v1/rtlist/" + BUD,
        dataType: "json",
    }).done(function (data) {
        if (data.status == "success") {
            if (data.records) {
                app.rt_list[BUD] = data.records;
            } else {
                app.rt_list[BUD] = [];
            }
        }
    });
};

window.buildRentableElements = function () {
    // inside rentable part, we need this items
    app.cycleFreqItems = []; // cycle freq items
    app.cycleFreq.forEach(function (item, index) {
        app.cycleFreqItems.push({id: index, text: item});
    });

    app.RSUseStatusItems = []; // rentable use status items
    app.RSUseStatus.forEach(function (item, index) {
        app.RSUseStatusItems.push({id: index, text: item});
    });

    app.RSLeaseStatusItems = []; // rentable lease status items
    app.RSLeaseStatus.forEach(function (item, index) {
        app.RSLeaseStatusItems.push({id: index, text: item});
    });

    //------------------------------------------------------------------------
    //          rentablesGrid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'rentablesGrid',
        url: '/v1/rentable',
        multiSelect: false,
        show: {
            header: false,
            toolbar: true,
            toolbarAdd: true,
            searches: true,
            footer: true,
            lineNumbers: false,
            selectColumn: false,
            expandColumn: false
        },
        columns: [
            {field: 'recid', caption: 'recid', size: '50px', hidden: true, sortable: true},
            {field: 'RID', caption: 'RID', size: '50px', sortable: true},
            {field: 'RentableName', caption: 'Rentable Name', size: '150px', sortable: true},
            {field: 'RTRID', caption: 'RTRID', hidden: true, sortable: true},
            {field: 'RTID', caption: 'Rentable Type ID', hidden: true, sortable: true},
            {field: 'RentableType', caption: 'Rentable Type', size: '200px', sortable: true},
            {field: 'RSID', caption: 'RSID', hidden: true, sortable: true},
            {
                field: 'UseStatus', caption: 'Rentable <br>Use Status', size: '100px', sortable: true,
                render: function (record/*, index, col_index*/) {
                    var text = '';
                    if (record) {
                        app.RSUseStatus.forEach(function (item, index) {
                            if (record.UseStatus == index) {
                                text = item;
                                return false;
                            }
                        });
                    }
                    return text;
                },
            },
            {
                field: 'LeaseStatus', caption: 'Rentable <br>Lease Status', size: '100px', sortable: true,
                render: function (record/*, index, col_index*/) {
                    var text = '';
                    if (record) {
                        app.RSLeaseStatus.forEach(function (item, index) {
                            if (record.LeaseStatus == index) {
                                text = item;
                                return false;
                            }
                        });
                    }
                    return text;
                },
            },
            {field: 'RARID', caption: 'RARID', hidden: true, sortable: true},
            {field: 'RAID', caption: 'RAID', size: '70px', sortable: true},
            {field: 'RentalAgreementStart', caption: 'Rental Agreement <br>Start', size: '120px', sortable: true},
            {field: 'RentalAgreementStop', caption: 'Rental Agreement <br>Stop', size: '120px', sortable: true},
        ],
        onRefresh: function (event) {
            event.onComplete = function () {
                var sel_recid = parseInt(this.last.sel_recid);
                if (app.active_grid == this.name && sel_recid > -1) {
                    if (app.new_form_rec) {
                        this.selectNone();
                    } else {
                        this.select(app.last.grid_sel_recid);
                    }
                }
            };
        },
        onClick: function (event) {
            event.onComplete = function () {
                var yes_args = [this, event.recid],
                    no_args = [this],
                    no_callBack = function (grid) {
                        grid.select(app.last.grid_sel_recid);
                        return false;
                    },
                    yes_callBack = function (grid, recid) {
                        app.last.grid_sel_recid = parseInt(recid);

                        // keep highlighting current row in any case
                        grid.select(app.last.grid_sel_recid);

                        var rec = grid.get(recid),
                            x = getCurrentBusiness(),
                            BID = parseInt(x.value),
                            BUD = getBUDfromBID(BID);

                        getRentableTypes(BUD)
                            .done(function (data) {
                                if ('status' in data && data.status !== 'success') {
                                    w2ui.rentableForm.message(data.message);
                                } else {
                                    // get "RTID" column index and set rentable types list in editable items
                                    var RTIDColIndex = w2ui.rentableTypeRefGrid.getColumn("RTID", true);
                                    w2ui.rentableTypeRefGrid.columns[RTIDColIndex].editable.items = app.rt_list[BUD];
                                    setRentableLayout(BID, rec.RID);
                                }
                            })
                            .fail(function () {
                                console.log('Error getting /v1/uival/' + BID + '/app.ReceiptRules');
                            });
                    };

                // warn user if form content has been chagned
                form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
            };
        },
        onAdd: function (/*event*/) {
            var yes_args = [this],
                no_callBack = function () {
                    return false;
                },
                yes_callBack = function (grid) {
                    // reset it
                    app.last.grid_sel_recid = -1;
                    grid.selectNone();

                    var x = getCurrentBusiness(),
                        BID = parseInt(x.value),
                        BUD = getBUDfromBID(BID);

                    w2ui.rentableForm.record = getRentableInitRecord(BID, BUD, null);
                    w2ui.rentableForm.refresh();

                    getRentableTypes(BUD)
                        .done(function (data) {
                            if ('status' in data && data.status !== 'success') {
                                w2ui.rentableForm.message(data.message);
                            } else {
                                // get "RTID" column index and set rentable types list in editable items
                                var RTIDColIndex = w2ui.rentableTypeRefGrid.getColumn("RTID", true);
                                w2ui.rentableTypeRefGrid.columns[RTIDColIndex].editable.items = app.rt_list[BUD];
                                setRentableLayout(BID, 0);
                            }
                        })
                        .fail(function () {
                            console.log('Error getting /v1/uival/' + BID + '/app.ReceiptRules');
                        });
                };

            // warn user if form content has been chagned
            form_dirty_alert(yes_callBack, no_callBack, yes_args);
        },
    });
    addDateNavToToolbar('rentables');

    //------------------------------------------------------------------------
    //          rentable detailed layout with form in main panel
    //------------------------------------------------------------------------
    $().w2layout({
        name: 'rentableDetailLayout',
        panels: [
            {
                type: 'top',
                size: 35,
                style: 'border: 1px solid silver;',
                content: "",
                toolbar: {
                    style: "height: 35px; background-color: #eee; border: 0px;",
                    items: [
                        {id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note'},
                        {id: 'bt3', type: 'spacer'},
                        {id: 'btnClose', type: 'button', icon: 'fas fa-times'},
                    ],
                    onClick: function (event) {
                        switch (event.target) {
                            case 'btnClose':
                                var no_callBack = function () {
                                        return false;
                                    },
                                    yes_callBack = function () {
                                        w2ui.toplayout.hide('right', true);
                                        w2ui.rentablesGrid.render();
                                    };
                                form_dirty_alert(yes_callBack, no_callBack);
                                break;
                        }
                    },
                },
            },
            {
                type: 'main',
                overflow: "hidden",
                style: 'background-color: white; border: 1px solid silver; padding: 0px;',
                tabs: {
                    style: "padding-top: 10px;",
                    active: 'rentableForm',
                    tabs: [
                        {id: 'rentableForm', caption: 'Rentable Detail'},
                        {id: 'rentableStatusGrid', caption: 'Rentable Use Status'},
                        {id: 'rentableLeaseStatusGrid', caption: 'Rentable Lease Status'},//add by lina
                        {id: 'rentableTypeRefGrid', caption: 'Rentable Type Ref'},
                    ],
                    onClick: function (event) {
                        if (event.target === "rentableForm") {
                            w2ui.rentableDetailLayout.html('main', w2ui.rentableForm);
                        } else if (event.target === "rentableStatusGrid") {
                            w2ui.rentableDetailLayout.html('main', w2ui.rentableStatusGrid);
                        } else if (event.target === "rentableLeaseStatusGrid") {//add by lina
                            w2ui.rentableDetailLayout.html('main', w2ui.rentableLeaseStatusGrid);
                        } else if (event.target === "rentableTypeRefGrid") {
                            w2ui.rentableDetailLayout.html('main', w2ui.rentableTypeRefGrid);
                        }
                    }
                }
            },
            {
                type: 'bottom',
                size: 60,
                // style: 'background-color: white;  border-top: 1px solid silver; text-align: center; padding: 15px;',
            },
        ],
    });

    //------------------------------------------------------------------------
    //          rentableForm
    //------------------------------------------------------------------------
    $().w2form({
        name: 'rentableForm',
        style: 'border: 0px; background-color: transparent;',
        url: '/v1/rentable',
        formURL: '/webclient/html/formr.html',
        fields: [
            {field: 'recid', type: 'int', required: false, html: {page: 0, column: 0}},
            {field: 'RID', type: 'int', required: false, html: {page: 0, column: 0}},
            {field: 'BID', type: 'int', required: true, html: {page: 0, column: 0}},
            {field: 'BUD', type: 'list', required: true, options: {items: app.businesses}, html: {page: 0, column: 0}},
            {field: 'RentableName', type: 'text', required: true, html: {page: 0, column: 0}},
            {field: 'AssignmentTime', type: 'list', required: false, html: {page: 0, column: 0}},
            {field: 'Comment', type: 'text', required: false, html: {page: 0, column: 0}},
            {field: 'LastModTime', type: 'hidden', required: false},
            {field: 'LastModBy', type: 'hidden', required: false},
            {field: 'CreateTS', type: 'hidden', required: false},
            {field: 'CreateBy', type: 'hidden', required: false}
        ],
        onSubmit: function (target, data) {
            // server request form data
            delete data.postData.record.LastModTime;
            delete data.postData.record.LastModBy;
            delete data.postData.record.CreateTS;
            delete data.postData.record.CreateBy;
            getFormSubmitData(data.postData.record);
            app.form_is_dirty = false;
        },
        onRefresh: function (event) {
            event.onComplete = function () {
                var f = this;
                var r = f.record;
                var x = getCurrentBusiness();
                var BID = parseInt(x.value);
                //var BUD = getBUDfromBID(BID);
                var header = "";

                /*// custom header, not common one!!
                if (r.RID) {
                    header = "Edit {0} - {1} ({2})".format(app.sRentable, r.RentableName, r.RID);
                } else {
                    header = "Edit {0} ({1})".format(app.sRentable, "new");
                }*/

                // assignmentTime selected and items for w2field
                var assignmentItems = [], assignSelected = {};
                app.assignmentTimeList.forEach(function (item, index) {
                    if (index == r.AssignmentTime) {
                        assignSelected = {id: index, text: item};
                    }
                    assignmentItems.push({id: index, text: item});
                });

                f.get("AssignmentTime").options.items = assignmentItems;
                f.get("AssignmentTime").options.selected = assignSelected;

                formRefreshCallBack(f, "RID", header);
            };
        },
        onChange: function (event) {
            event.onComplete = function () {
                // formRecDiffer: 1=current record, 2=original record, 3=diff object
                var diff = formRecDiffer(this.record, app.active_form_original, {});
                // if diff == {} then make dirty flag as false, else true
                if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                    app.form_is_dirty = false;
                } else {
                    app.form_is_dirty = true;
                }
            };
        },
    });

    //------------------------------------------------------------------------
    //          rentable Use Status Grid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'rentableStatusGrid',
        style: 'padding: 0px',
        show: {
            header: false,
            toolbar: true,
            toolbarReload: false,
            toolbarColumns: false,
            toolbarSearch: true,
            toolbarAdd: true,
            toolbarDelete: true,
            toolbarSave: false,
            searchAll: true,
            footer: true,
            lineNumbers: false,
            selectColumn: false,
            expandColumn: false
        },
        columns: [
            {field: 'recid', caption: 'recid', hidden: true},
            {field: 'RID', caption: 'RID', hidden: true},
            {field: 'BID', caption: 'BID', hidden: true},
            {field: 'BUD', caption: 'BUD', hidden: true},
            {field: 'DtNoticeToVacate', caption: 'DtNoticeToVacate', hidden: true},
            {field: 'DtNoticeToVacateIsSet', caption: 'DtNoticeToVacateIsSet', hidden: true},
            {field: 'RSID', caption: 'RSID', size: '50px'},
            {
                field: 'UseStatus', caption: 'UseStatus', size: '150px',
                editable: {type: 'select', align: 'left', items: app.RSUseStatusItems},
                render: function (record, index, col_index) {
                    var html = '';
                    for (var s in app.RSUseStatusItems) {
                        if (app.RSUseStatusItems[s].id == this.getCellValue(index, col_index)) {
                            html = app.RSUseStatusItems[s].text;
                        }
                    }
                    return html;
                },
            },
            /*{
                field: 'LeaseStatus', caption: 'LeaseStatus', size: '150px',
                editable: {type: 'select', align: 'left', items: app.RSLeaseStatusItems},
                render: function (record, index, col_index) {
                    var html = '';
                    for (var s in app.RSLeaseStatusItems) {
                        if (app.RSLeaseStatusItems[s].id == this.getCellValue(index, col_index)) {
                            html = app.RSLeaseStatusItems[s].text;
                        }
                    }
                    return html;
                },
            },*/
            {
                field: 'DtStart',
                caption: 'DtStart',
                size: "50%",
                sortable: true,
                style: 'text-align: right',
                editable: {type: 'date'}
            },
            {
                field: 'DtStop',
                caption: 'DtStop',
                size: "50%",
                sortable: true,
                style: 'text-align: right',
                editable: {type: 'date'}
            },
            {field: 'CreateBy', caption: 'CreateBy', hidden: true},
            {field: 'LastModBy', caption: 'LastModBy', hidden: true},
        ],
        onLoad: function (event) {
            event.onComplete = function () {
                this.url = '';
            };
        },
        onAdd: function (/*event*/) {
            var x = getCurrentBusiness(),
                BID = parseInt(x.value),
                BUD = getBUDfromBID(BID),
                fr = w2ui.rentableForm.record,
                g = this,
                ndStart;

            // get lastest date among all market rate object's stopDate for new MR's StartDate
            if (g.records.length === 0) {
                ndStart = new Date();
            } else {
                g.records.forEach(function (rec) {
                    if (ndStart === undefined) {
                        ndStart = new Date(rec.DtStop);
                    }
                    if (rec.DtStop) {
                        var rdStop = new Date(rec.DtStop);
                        if (ndStart < rdStop) {
                            ndStart = rdStop;
                        }
                    }
                });
            }

            var newRec = {
                recid: g.records.length,
                BID: BID,
                BUD: BUD,
                RID: fr.RID,
                RSID: 0,
                UseStatus: 0,
                //LeaseStatus: 0,
                DtStart: dateFmtStr(ndStart),
                DtStop: "12/31/9999"
            };
            g.add(newRec);
        },
        onSave: function (event) {
            // if url is set then only take further actions, for local save just ignore those
            if (this.url === "") {
                return false;
            }

            // TODO(Sudip): validation on values before sending these to server

            // get "Unknown" status value from the map, as well as for "Inactive" from Use Status items
            var UseUnknownStatus, UseInactiveStatus;
            app.RSUseStatusItems.forEach(function (status) {
                switch (status.text) {
                    case "Unknown":
                        UseUnknownStatus = status.id;
                        break;
                    case "Inactive":
                        UseInactiveStatus = status.id;
                        break;
                }
            });

            // get "Unknown" status value from the map, as well as for "Inactive" from Lease Status items
            /*var LeaseUnknownStatus, LeaseInactiveStatus;
            app.RSLeaseStatusItems.forEach(function (status) {
                switch (status.text) {
                    case "Unknown":
                        LeaseUnknownStatus = status.id;
                        break;
                    case "Inactive":
                        LeaseInactiveStatus = status.id;
                        break;
                }
            });*/

            this.records.forEach(function (item, index, arr) {
                arr[index].UseStatus = parseInt(arr[index].UseStatus);
                //arr[index].LeaseStatus = parseInt(arr[index].LeaseStatus);

                if (arr[index].UseStatus === UseUnknownStatus /*&& arr[index].LeaseStatus === LeaseUnknownStatus*/) {
                    // if UseStatus and LeaseStatus both kept as "unknown" then it doesn't
                    // make sense to send this entry to server, remove it
                    arr.splice(index, 1);
                } else if (arr[index].UseStatus === UseInactiveStatus /*|| arr[index].LeaseStatus === LeaseInactiveStatus*/) {
                    // if "Inactive" set in any of UseStatus, LeaseStatus, then set "Inactive"
                    // in both status field
                    arr[index].UseStatus = UseInactiveStatus;
                    //arr[index].LeaseStatus = LeaseInactiveStatus;
                }
            });
            event.changes = this.records;
        },
        onDelete: function (event) {
            var selected = this.getSelection(),
                RSIDList = [],
                grid = this;

            // if not selected then return
            if (selected.length < 0) {
                return;
            }
            // collect RMRID
            selected.forEach(function (id) {
                RSIDList.push(grid.get(id).RSID);
            });

            event.onComplete = function () {
                var x = getCurrentBusiness(),
                    BID = parseInt(x.value),
                    BUD = getBUDfromBID(BID),
                    RID = w2ui.rentableForm.record.RID;

                var payload = {"cmd": "delete", "RSIDList": RSIDList};
                $.ajax({
                    type: "POST",
                    url: "/v1/rentablestatus/" + BID + "/" + RID,
                    data: JSON.stringify(payload),
                    contentType: "application/json",
                    dataType: "json",
                    success: function (data) {
                        grid.reload();
                    },
                });
            };
        },
        onChange: function (event) {
            event.preventDefault();
            var g = this,
                field = g.columns[event.column].field,
                chgRec = g.get(event.recid),
                changeIsValid = true;

            switch (field) {
                case "UseStatus":
                    // in local save check if use status is unknown for existing instance
                    // if yes, then don't allow that change
                    app.RSUseStatusItems.forEach(function (status) {
                        switch (status.text) {
                            case "Unknown":
                                if (chgRec.RSID > 0) { // only for existing instance
                                    changeIsValid = false;
                                }
                        }
                    });
                    break;
                /*case "LeaseStatus":
                    // in local save check if lease status is unknown for existing instance
                    // if yes, then don't allow that change
                    app.RSLeaseStatusItems.forEach(function (status) {
                        switch (status.text) {
                            case "Unknown":
                                if (chgRec.RSID > 0) { // only for existing instance
                                    changeIsValid = false;
                                }
                        }
                    });
                    break;*/
                case "DtStart":
                case "DtStop":
                    // get the changed value if field, otherwise take the record saved date value
                    var chgDStart = field === "DtStart" ? new Date(event.value_new) : new Date(chgRec.DtStart),
                        chgDStop = field === "DtStop" ? new Date(event.value_new) : new Date(chgRec.DtStop);

                    // Stop date should not before Start Date
                    if (chgDStop <= chgDStart) {
                        changeIsValid = false;
                    } else {
                        // make sure date values don't overlap with other market rate dates
                        for (var i in g.records) {
                            var rec = g.records[i];
                            if (rec.recid === chgRec.recid) { // if same record then continue to next one
                                continue;
                            }

                            var rDStart = new Date(rec.DtStart),
                                rDStop = new Date(rec.DtStop);

                            // return if changed record startDate falls in other MR time span
                            if (rDStart < chgDStart && chgDStart < rDStop) {
                                changeIsValid = false;
                            } else if (rDStart < chgDStop && chgDStop < rDStop) {
                                changeIsValid = false;
                            } else if (chgDStart < rDStart && rDStop < chgDStop) {
                                changeIsValid = false;
                            }
                        }
                    }
                    break;
            }

            if (changeIsValid) {
                // if everything is ok, then mark this as false
                event.isCancelled = false;
            } else {
                event.isCancelled = true;
            }

            event.onComplete = function () {
                if (!event.isCancelled) { // if event not cancelled then invoke save method
                    // save automatically locally
                    this.save();
                }
            };
        }
    });

//-------------------add by lina -----begin----------------------------------
 //------------------------------------------------------------------------
    //          rentable Lease Status Grid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'rentableLeaseStatusGrid',
        style: 'padding: 0px',
        show: {
            header: false,
            toolbar: true,
            toolbarReload: false,
            toolbarColumns: false,
            toolbarSearch: true,
            toolbarAdd: true,
            //toolbarDelete: true,
            toolbarDelete: false,// update by lina, we dont need delete for Rentable Lease Status records
            toolbarSave: false,
            searchAll: true,
            footer: true,
            lineNumbers: false,
            selectColumn: false,
            expandColumn: false
        },
        columns: [
            {field: 'recid', caption: 'recid', hidden: true},
            {field: 'RID', caption: 'RID', hidden: true},
            {field: 'BID', caption: 'BID', hidden: true},
            {field: 'BUD', caption: 'BUD', hidden: true},
            {field: 'DtNoticeToVacate', caption: 'DtNoticeToVacate', hidden: true},
            {field: 'DtNoticeToVacateIsSet', caption: 'DtNoticeToVacateIsSet', hidden: true},
            {field: 'RLID', caption: 'RLID', size: '50px'},
            /*{
                field: 'UseStatus', caption: 'UseStatus', size: '150px',
                editable: {type: 'select', align: 'left', items: app.RSUseStatusItems},
                render: function (record, index, col_index) {
                    var html = '';
                    for (var s in app.RSUseStatusItems) {
                        if (app.RSUseStatusItems[s].id == this.getCellValue(index, col_index)) {
                            html = app.RSUseStatusItems[s].text;
                        }
                    }
                    return html;
                },
            },*/
            {
                field: 'LeaseStatus', caption: 'LeaseStatus', size: '150px',
                editable: {type: 'select', align: 'left', items: app.RSLeaseStatusItems},
                render: function (record, index, col_index) {
                    var html = '';
                    for (var s in app.RSLeaseStatusItems) {
                        if (app.RSLeaseStatusItems[s].id == this.getCellValue(index, col_index)) {
                            html = app.RSLeaseStatusItems[s].text;
                        }
                    }
                    return html;
                },
            },
            {
                field: 'DtStart',
                caption: 'DtStart',
                size: "50%",
                sortable: true,
                style: 'text-align: right',
                editable: {type: 'date'}
            },
            {
                field: 'DtStop',
                caption: 'DtStop',
                size: "50%",
                sortable: true,
                style: 'text-align: right',
                editable: {type: 'date'}
            },
            {field: 'CreateBy', caption: 'CreateBy', hidden: true},
            {field: 'LastModBy', caption: 'LastModBy', hidden: true},
        ],
        onLoad: function (event) {
            event.onComplete = function () {
                this.url = '';
            };
        },
        onAdd: function (/*event*/) {
            var x = getCurrentBusiness(),
                BID = parseInt(x.value),
                BUD = getBUDfromBID(BID),
                fr = w2ui.rentableForm.record,
                g = this,
                ndStart;

            // get lastest date among all market rate object's stopDate for new MR's StartDate
            if (g.records.length === 0) {
                ndStart = new Date();
            } else {
                g.records.forEach(function (rec) {
                    if (ndStart === undefined) {
                        ndStart = new Date(rec.DtStop);
                    }
                    if (rec.DtStop) {
                        var rdStop = new Date(rec.DtStop);
                        if (ndStart < rdStop) {
                            ndStart = rdStop;
                        }
                    }
                });
            }

            var newRec = {
                recid: g.records.length,
                BID: BID,
                BUD: BUD,
                RID: fr.RID,
                RLID: 0,
                //UseStatus: 0,
                LeaseStatus: 0,
                DtStart: dateFmtStr(ndStart),
                DtStop: "12/31/9999"
            };
            g.add(newRec);
        },
        onSave: function (event) {
            // if url is set then only take further actions, for local save just ignore those
            if (this.url === "") {
                return false;
            }

            // TODO(Sudip): validation on values before sending these to server

            // get "Unknown" status value from the map, as well as for "Inactive" from Use Status items
            /*var UseUnknownStatus, UseInactiveStatus;
            app.RSUseStatusItems.forEach(function (status) {
                switch (status.text) {
                    case "Unknown":
                        UseUnknownStatus = status.id;
                        break;
                    case "Inactive":
                        UseInactiveStatus = status.id;
                        break;
                }
            });*/

            // get "Unknown" status value from the map, as well as for "Inactive" from Lease Status items
            var LeaseUnknownStatus, LeaseInactiveStatus;
            app.RSLeaseStatusItems.forEach(function (status) {
                switch (status.text) {
                    case "Unknown":
                        LeaseUnknownStatus = status.id;
                        break;
                    case "Inactive":
                        LeaseInactiveStatus = status.id;
                        break;
                }
            });

            this.records.forEach(function (item, index, arr) {
                //arr[index].UseStatus = parseInt(arr[index].UseStatus);
                arr[index].LeaseStatus = parseInt(arr[index].LeaseStatus);

                if (/*arr[index].UseStatus === UseUnknownStatus &&*/ arr[index].LeaseStatus === LeaseUnknownStatus) {
                    // if UseStatus and LeaseStatus both kept as "unknown" then it doesn't
                    // make sense to send this entry to server, remove it
                    arr.splice(index, 1);
                } else if (/*arr[index].UseStatus === UseInactiveStatus || */arr[index].LeaseStatus === LeaseInactiveStatus) {
                    // if "Inactive" set in any of UseStatus, LeaseStatus, then set "Inactive"
                    // in both status field
                    //arr[index].UseStatus = UseInactiveStatus;
                    arr[index].LeaseStatus = LeaseInactiveStatus;
                }
            });
            event.changes = this.records;
        },
        /*onDelete: function (event) {
            var selected = this.getSelection(),
                RSIDList = [],
                grid = this;

            // if not selected then return
            if (selected.length < 0) {
                return;
            }
            // collect RMRID
            selected.forEach(function (id) {
                RSIDList.push(grid.get(id).RSID);
            });

            event.onComplete = function () {
                var x = getCurrentBusiness(),
                    BID = parseInt(x.value),
                    BUD = getBUDfromBID(BID),
                    RID = w2ui.rentableForm.record.RID;

                var payload = {"cmd": "delete", "RSIDList": RSIDList};
                $.ajax({
                    type: "POST",
                    url: "/v1/rentablestatus/" + BID + "/" + RID,
                    data: JSON.stringify(payload),
                    contentType: "application/json",
                    dataType: "json",
                    success: function (data) {
                        grid.reload();
                    },
                });
            };
        },*/
        onChange: function (event) {
            event.preventDefault();
            var g = this,
                field = g.columns[event.column].field,
                chgRec = g.get(event.recid),
                changeIsValid = true;

            switch (field) {
                /*case "UseStatus":
                    // in local save check if use status is unknown for existing instance
                    // if yes, then don't allow that change
                    app.RSUseStatusItems.forEach(function (status) {
                        switch (status.text) {
                            case "Unknown":
                                if (chgRec.RSID > 0) { // only for existing instance
                                    changeIsValid = false;
                                }
                        }
                    });
                    break;*/
                case "LeaseStatus":
                    // in local save check if lease status is unknown for existing instance
                    // if yes, then don't allow that change
                    app.RSLeaseStatusItems.forEach(function (status) {
                        switch (status.text) {
                            case "Unknown":
                                if (chgRec.RLID > 0) { // only for existing instance
                                    changeIsValid = false;
                                }
                        }
                    });
                    break;
                case "DtStart":
                case "DtStop":
                    // get the changed value if field, otherwise take the record saved date value
                    var chgDStart = field === "DtStart" ? new Date(event.value_new) : new Date(chgRec.DtStart),
                        chgDStop = field === "DtStop" ? new Date(event.value_new) : new Date(chgRec.DtStop);

                    // Stop date should not before Start Date
                    if (chgDStop <= chgDStart) {
                        changeIsValid = false;
                    } else {
                        // make sure date values don't overlap with other market rate dates
                        for (var i in g.records) {
                            var rec = g.records[i];
                            if (rec.recid === chgRec.recid) { // if same record then continue to next one
                                continue;
                            }

                            var rDStart = new Date(rec.DtStart),
                                rDStop = new Date(rec.DtStop);

                            // return if changed record startDate falls in other MR time span
                            if (rDStart < chgDStart && chgDStart < rDStop) {
                                changeIsValid = false;
                            } else if (rDStart < chgDStop && chgDStop < rDStop) {
                                changeIsValid = false;
                            } else if (chgDStart < rDStart && rDStop < chgDStop) {
                                changeIsValid = false;
                            }
                        }
                    }
                    break;
            }

            if (changeIsValid) {
                // if everything is ok, then mark this as false
                event.isCancelled = false;
            } else {
                event.isCancelled = true;
            }

            event.onComplete = function () {
                if (!event.isCancelled) { // if event not cancelled then invoke save method
                    // save automatically locally
                    this.save();
                }
            };
        }
    });
//----------------------------add by lina -----------end-----------------------

    //------------------------------------------------------------------------
    //          rentable Type Ref Grid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'rentableTypeRefGrid',
        style: 'padding: 0px',
        show: {
            header: false,
            toolbar: true,
            toolbarReload: false,
            toolbarColumns: false,
            toolbarSearch: true,
            toolbarAdd: true,
            toolbarDelete: true,
            toolbarSave: false,
            searchAll: true,
            footer: true,
            lineNumbers: false,
            selectColumn: false,
            expandColumn: false
        },
        columns: [
            {field: 'recid', caption: 'recid', hidden: true},
            {field: 'RID', caption: 'RID', hidden: true},
            {field: 'BID', caption: 'BID', hidden: true},
            {field: 'BUD', caption: 'BUD', hidden: true},
            {field: 'RTRID', caption: 'RTRID', size: '50px'},
            {
                field: 'RTID', caption: 'Rentable Type', size: '150px',
                editable: {type: 'select', align: 'left', items: []},
                render: function (record, index, col_index) {
                    var html = '';
                    var BID = getCurrentBID(),
                        BUD = getBUDfromBID(BID);
                    for (var rt in app.rt_list[BUD]) {
                        if (app.rt_list[BUD][rt].id == this.getCellValue(index, col_index)) {
                            html = app.rt_list[BUD][rt].text;
                        }
                    }
                    return html;
                },
            },
            {
                field: 'OverrideRentCycle', caption: 'OverrideRentCycle', size: "150px",
                editable: {type: 'select', align: 'left', items: app.cycleFreqItems},
                render: function (record, index, col_index) {
                    var html = '';
                    for (var f in app.cycleFreqItems) {
                        if (app.cycleFreqItems[f].id == this.getCellValue(index, col_index)) {
                            html = app.cycleFreqItems[f].text;
                        }
                    }
                    return html;
                },
            },
            {
                field: 'OverrideProrationCycle', caption: 'OverrideProrationCycle', size: "150px",
                editable: {type: 'select', align: 'left', items: app.cycleFreqItems},
                render: function (record, index, col_index) {
                    var html = '';
                    for (var f in app.cycleFreqItems) {
                        if (app.cycleFreqItems[f].id == this.getCellValue(index, col_index)) {
                            html = app.cycleFreqItems[f].text;
                        }
                    }
                    return html;
                },
            },
            {
                field: 'DtStart',
                caption: 'DtStart',
                size: "50%",
                sortable: true,
                style: 'text-align: right',
                editable: {type: 'date'}
            },
            {
                field: 'DtStop',
                caption: 'DtStop',
                size: "50%",
                sortable: true,
                style: 'text-align: right',
                editable: {type: 'date'}
            },
            {field: 'CreateBy', caption: 'CreateBy', hidden: true},
            {field: 'LastModBy', caption: 'LastModBy', hidden: true},
        ],
        onLoad: function (event) {
            event.onComplete = function () {
                this.url = '';
            };
        },
        onAdd: function (event) {
            var x = getCurrentBusiness(),
                BID = parseInt(x.value),
                BUD = getBUDfromBID(BID),
                g = this,
                ndStart;

            // get lastest date among all market rate object's stopDate for new MR's StartDate
            if (g.records.length === 0) {
                ndStart = new Date();
            } else {
                g.records.forEach(function (rec) {
                    if (ndStart === undefined) {
                        ndStart = new Date(rec.DtStop);
                    }
                    if (rec.DtStop) {
                        var rdStop = new Date(rec.DtStop);
                        if (ndStart < rdStop) {
                            ndStart = rdStop;
                        }
                    }
                });
            }

            var newRec = {
                recid: g.records.length,
                BID: BID,
                BUD: BUD,
                RID: w2ui.rentableForm.record.RID,
                RTID: 0,
                RTRID: 0,
                OverrideRentCycle: 0,
                OverrideProrationCycle: 0,
                DtStart: dateFmtStr(ndStart),
                DtStop: "12/31/9999"
            };
            g.add(newRec);
        },
        onSave: function (event) {
            // TODO(Sudip): validation on values before sending these to server

            this.records.forEach(function (item, index, arr) {
                arr[index].OverrideRentCycle = parseInt(arr[index].OverrideRentCycle);
                arr[index].OverrideProrationCycle = parseInt(arr[index].OverrideProrationCycle);
                arr[index].RTID = parseInt(arr[index].RTID);
            });
            event.changes = this.records;
        },
        onDelete: function (event) {
            var selected = this.getSelection(),
                RTRIDList = [],
                grid = this;

            // if not selected then return
            if (selected.length < 0) {
                return;
            }
            // collect RTRID
            selected.forEach(function (id) {
                RTRIDList.push(grid.get(id).RTRID);
            });

            event.onComplete = function () {
                var x = getCurrentBusiness(),
                    BID = parseInt(x.value),
                    BUD = getBUDfromBID(BID),
                    RID = w2ui.rentableForm.record.RID;

                var payload = {"cmd": "delete", "RTRIDList": RTRIDList};
                $.ajax({
                    type: "POST",
                    url: "/v1/rentabletyperef/" + BID + "/" + RID,
                    data: JSON.stringify(payload),
                    contentType: "application/json",
                    dataType: "json",
                    success: function (data) {
                        grid.reload();
                    },
                });
            };
        },
        onChange: function (event) {
            event.preventDefault();
            var g = this,
                field = g.columns[event.column].field,
                chgRec = g.get(event.recid),
                changeIsValid = true;

            // if fields are DtStart or DtStop
            if (field === "DtStart" || field === "DtStop") {

                var chgDStart = field === "DtStart" ? new Date(event.value_new) : new Date(chgRec.DtStart),
                    chgDStop = field === "DtStop" ? new Date(event.value_new) : new Date(chgRec.DtStop);

                // Stop date should not before Start Date
                if (chgDStop <= chgDStart) {
                    changeIsValid = false;
                } else {
                    // make sure date values don't overlap with other market rate dates
                    for (var i in g.records) {
                        var rec = g.records[i];
                        if (rec.recid === chgRec.recid) { // if same record then continue to next one
                            continue;
                        }

                        var rDStart = new Date(rec.DtStart),
                            rDStop = new Date(rec.DtStop);

                        // return if changed record startDate falls in other MR time span
                        if (rDStart < chgDStart && chgDStart < rDStop) {
                            changeIsValid = false;
                        } else if (rDStart < chgDStop && chgDStop < rDStop) {
                            changeIsValid = false;
                        } else if (chgDStart < rDStart && rDStop < chgDStop) {
                            changeIsValid = false;
                        }
                    }
                }
            }

            if (changeIsValid) {
                // if everything is ok, then mark this as false
                event.isCancelled = false;
            } else {
                event.isCancelled = true;
            }

            event.onComplete = function () {
                if (!event.isCancelled) { // if event not cancelled then invoke save method
                    // save automatically locally
                    this.save();
                }
            };
        }
    });

    //------------------------------------------------------------------------
    //          Rentable Form Buttons
    //------------------------------------------------------------------------
    $().w2form({
        name: 'rentableFormBtns',
        style: 'border: 0px; background-color: transparent;',
        formURL: '/webclient/html/formrbtns.html',
        url: '',
        fields: [],
        actions: {
            save: function () {
                var BID = getCurrentBID();

                // unselect record from
                w2ui.rentablesGrid.selectNone();

                // hit save
                w2ui.rentableForm.save({}, function (data) {
                    if (data.status === 'error') {
                        console.log('ERROR: ' + data.message);
                        return;
                    }

                    // in case if record is new then we've to update RID that saved on server side
                    w2ui.rentableForm.record.RID = data.recid;

                    var i;
                    // update RID in grid records (Use status)
                    for (i = 0; i < w2ui.rentableStatusGrid.records.length; i++) {
                        w2ui.rentableStatusGrid.records[i].RID = w2ui.rentableForm.record.RID;
                    }

                    // update RID in grid records (Lease status)
                    for (i = 0; i < w2ui.rentableLeaseStatusGrid.records.length; i++) {//add by lina
                        w2ui.rentableLeaseStatusGrid.records[i].RID = w2ui.rentableForm.record.RID;
                    }

                    // update RID in grid records (typeRef)
                    for (i = 0; i < w2ui.rentableTypeRefGrid.records.length; i++) {
                        w2ui.rentableTypeRefGrid.records[i].RID = w2ui.rentableForm.record.RID;
                    }

                    // now set the url of status grid so that it can save the record on server side
                    w2ui.rentableStatusGrid.url = '/v1/rentablestatus/' + BID + '/' + w2ui.rentableForm.record.RID;
                    w2ui.rentableStatusGrid.save(function (data) {
                        // no matter, if it was succeed or not, just reset it, we already setting it before save call
                        w2ui.rentableStatusGrid.url = ""; // after save, remove it

                        if (data.status == "success") {///add by lina 
                            w2ui.rentableLeaseStatusGrid.url = '/v1/rentableleasestatus/' + BID + '/' + w2ui.rentableForm.record.RID;
                            w2ui.rentableLeaseStatusGrid.save(function (data) {
                                w2ui.rentableLeaseStatusGrid.url = "";
                                if (data.status == "success"){
                                    // next save rentable type ref
                                    // now set the url of type ref grid so that it can save the record on server side
                                    w2ui.rentableTypeRefGrid.url = '/v1/rentabletyperef/' + BID + '/' + w2ui.rentableForm.record.RID;
                                    w2ui.rentableTypeRefGrid.save(function (data) {
                                    // no matter, if it was succeed or not, just reset it, we already setting it before save call
                                        w2ui.rentableTypeRefGrid.url = ""; // after save, remove it

                                        if (data.status === "success") {
                                            w2ui.toplayout.hide('right', true);
                                            w2ui.rentablesGrid.render();
                                        }
                                    });
                                }
                            });
                        }
                    });
                });
            },
            saveadd: function () {
                var BID = getCurrentBID(),
                    BUD = getBUDfromBID(BID);

                // clean dirty flag of form
                app.form_is_dirty = false;

                // clear the grid select recid
                app.last.grid_sel_recid = -1;

                // select none if you're going to add new record
                w2ui.rentablesGrid.selectNone();

                w2ui.rentableForm.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: ' + data.message);
                        return;
                    }

                    // now set the url of market Rate grid so that it can save the record on server side
                    w2ui.rentableStatusGrid.url = '/v1/rentablestatus/' + BID + '/' + w2ui.rentableForm.record.RID;
                    w2ui.rentableStatusGrid.save(function (data) {
                        // no matter, if it was succeed or not, just reset it, we already setting it before save call
                        //w2ui.rentableStatusGrid.url = ""; // after save, remove it

                        if (data.status === "success") {

                            // clear grid as we're going to add new Form
                            //w2ui.rentableStatusGrid.clear();
                            w2ui.rentableStatusGrid.url = '/v1/rentablestatus/' + BID + '/' + w2ui.rentableForm.record.RID;
                            w2ui.rentableStatusGrid.reload();

                            w2ui.rentableLeaseStatusGrid.url = '/v1/rentableleasestatus/' + BID + '/' + w2ui.rentableForm.record.RID;
                            w2ui.rentableLeaseStatusGrid.save(function (data) {
                                if (data.status == "success") {
                                    w2ui.rentableLeaseStatusGrid.url = '/v1/rentableleasestatus/' + BID + '/' + w2ui.rentableForm.record.RID;
                                    w2ui.rentableLeaseStatusGrid.reload();
                                    // next save rentable type ref
                                    // now set the url of type ref grid so that it can save the record on server side
                                    w2ui.rentableTypeRefGrid.url = '/v1/rentabletyperef/' + BID + '/' + w2ui.rentableForm.record.RID;
                                    w2ui.rentableTypeRefGrid.save(function (data) {
                                        // no matter, if it was succeed or not, just reset it, we already setting it before save call
                                        //w2ui.rentableTypeRefGrid.url = ""; // after save, remove it

                                        if (data.status === "success") {

                                            // clear the rentabletyperef grid, as we're going to add new record
                                            //w2ui.rentableTypeRefGrid.clear();
                                            w2ui.rentableTypeRefGrid.url = '/v1/rentabletyperef/' + BID + '/' + w2ui.rentableForm.record.RID;
                                            w2ui.rentableTypeRefGrid.reload();

                                            // JUST RENDER THE MAIN GRID ONLY
                                            w2ui.rentablesGrid.render();

                                            w2ui.rentableForm.record = getRentableInitRecord(BID, BUD, w2ui.rentableForm.record);
                                            // w2ui.rentableForm.header = "Edit {0} ({1}) as of {2}".format(app.sRentable, "new", w2uiDateControlString(w2ui.rentableForm.record.CurrentDate));
                                            w2ui.rentableForm.url = '/v1/rentable/' + BID + '/0';
                                            w2ui.rentableForm.refresh();
                                        }
                                    });
                                }
                            })
                        }
                    });
                });
            }
        },
    });
};

window.setRentableLayout = function (BID, RID) {

    // set the url for rentableForm
    w2ui.rentableForm.url = '/v1/rentable/' + BID + '/' + RID;

    // load bottom panels with action buttons panel
    w2ui.rentableDetailLayout.content("bottom", w2ui.rentableFormBtns);

    // if form has tabs then click the first one
    if (typeof w2ui.rentableForm.tabs.name == "string") {
        w2ui.rentableForm.tabs.click('tab1');
    }

    // mark this flag as is this new record
    app.new_form_rec = RID ? true : false;

    // as new content will be loaded for this form
    // mark form dirty flag as false
    app.form_is_dirty = false;

    if (RID) {

        // if rentable available then load the Use status grid
        w2ui.rentableStatusGrid.load('/v1/rentablestatus/' + BID + '/' + RID);
        console.log("rentable status grid load data: {0}".format('/v1/rentablestatus/' + BID + '/' + RID));

        // if rentable available then load the Lease status grid
        w2ui.rentableLeaseStatusGrid.load('/v1/rentableleasestatus/' + BID + '/' + RID);
        console.log("rentable status grid load data: {0}".format('/v1/rentableleasestatus/' + BID + '/' + RID));//add by lina

        // // if rentable available then load the type ref grid
        w2ui.rentableTypeRefGrid.load('/v1/rentabletyperef/' + BID + '/' + RID);
        console.log("rentable type ref grid load data: {0}".format('/v1/rentabletyperef/' + BID + '/' + RID));

        // change the text of form tab
        w2ui.rentableDetailLayout.get("main").tabs.get("rentableForm").text = "Rentable Details ({0})".format(RID);
        w2ui.rentableDetailLayout.get("main").tabs.refresh();

        // load form content from server
        w2ui.rentableForm.request(function (event) {
            if (event.status === "success") {
                // only render the toplayout after server has sent down data
                // so that w2ui can bind values with field's html control,
                // otherwise it is unable to find html controls
                showForm();
                return true;
            }
            else {
                showForm();
                w2ui.rentableForm.message("Could not get form data from server...!!");
                return false;
            }
        });
    }
    else {
        // if new RentableType then clear the status, type ref grid first
        w2ui.rentableStatusGrid.clear();
        w2ui.rentableTypeRefGrid.clear();

        // change the text of form tab
        w2ui.rentableDetailLayout.get("main").tabs.get("rentableForm").text = "Rentable Details ({0})".format("new");
        w2ui.rentableDetailLayout.get("main").tabs.refresh();

        // unselect the previous selected row
        var sel_recid = parseInt(w2ui.rentablesGrid.last.sel_recid);
        if (sel_recid > -1) {
            // if new record is being added then unselect {{the selected record}} from the grid
            w2ui.rentablesGrid.unselect(w2ui.rentablesGrid.last.sel_recid);
        }

        showForm();
        return true;
    }

    function showForm() {
        // SHOW the right panel now
        w2ui.toplayout.content('right', w2ui.rentableDetailLayout);
        w2ui.toplayout.sizeTo('right', 700);
        // w2ui.rentableDetailLayout.render();
        w2ui.rentableDetailLayout.get("main").tabs.click("rentableForm");
        w2ui.toplayout.show('right', true);
    }
};

/*global
    app, w2ui, popupPDFCustomDimensions, getCurrentBusiness, $, console, genDateRangeNavigator,
    handleDateToolbarAction, dateFromString, dateControlString, exportReportCSV, exportReportPDF,
    w2uiDateControlString
*/
"use strict";
window.showReport = function (rptname, elToFocus) {
    if (rptname === '') {
        return;
    }

    w2ui.toplayout.content('main', w2ui.reportslayout);
    w2ui.toplayout.hide('right',true);

    // check EDI mode for this business and set app.D2 accordingly
    var BID = getCurrentBID();
    var BUD = getBUDfromBID(BID);
    var bizEDIEnabled = EDIEnabledForBUD(BUD);
    var edi = bizEDIEnabled ? 1 : 0;

    var url = '/v1/report/' + String(BID) + '?r=' + rptname +'&dtstart=' + app.D1 + '&dtstop=' + app.D2 + '&edi=' + String(edi);

    // var callBack;
    // if (elToFocus) {
    //     callBack = function() {
    //         // $("input[name="+elToFocus+"]").prop('readonly', true).focus().prop('readonly', false);
    //         // elToFocus.focus();
    //         // document.getElementsByName(elToFocus)[0].focus(); // arrr..... does not found element, WHY!!
    //     };
    // }
    w2ui.reportslayout.load('main', url, null, null /*callBack*/);
};

window.buildReportElements = function (){
    //------------------------------------------------------------------------
    //          reportslayout
    //------------------------------------------------------------------------
    $().w2layout({
        name: 'reportslayout',
        padding: 0,
        panels: [
            { type: 'top',size: 34, content: 'reports toolbar'},
            { type: 'left', size: 20, style: app.prefmt, hidden: false },
            { type: 'main',  size: 100, style: app.prefmt},
            { type: 'preview', size: 0, hidden: true, content: 'reports preview' },
            { type: 'right', size: 200, hidden: true, content: 'reports - detail' },
            { type: 'bottom', size: 20, hidden: true, content: 'reports - bottom' },
        ]
    });

    //------------------------------------------------------------------------
    //          reportstoolbar
    //------------------------------------------------------------------------
    var tmp = genDateRangeNavigator('date');
    tmp.push.apply(tmp, [
        { type: 'spacer',},
        { type: 'button', id: 'csvexport', icon: 'fas fa-table', tooltip: 'export to CSV' },
        { type: 'button', id: 'printreport', icon: 'far fa-file-pdf', tooltip: 'export to PDF' },
        { type: 'break', id: 'break2' },
        { type: 'menu-radio', id: 'page_size', icon: 'fas fa-print',
            tooltip: 'exported PDF page size',
            text: function (item) {
            //var text = item.selected;
            var el   = this.get('page_size:' + item.selected);
            if (item.selected == "Custom") {
                popupPDFCustomDimensions();
            }
            return 'Page Size: ' + el.text;
            },
            selected: 'USLetter',
            items: [
                { id: 'USLetter', text: 'US Letter (8.5 x 11 in)'},
                { id: 'Legal', text: 'Legal (8.5 x 14 in)'},
                { id: 'Ledger', text: 'Ledger (11 x 17 in)'},
                { id: 'Custom', text: 'Custom'},
            ]
        },
        { type: 'menu-radio', id: 'orientation', icon: 'far fa-clone fa-rotate-90',
            tooltip: 'exported PDF orientation',
            text: function (item) {
            //var text = item.selected;
            var el   = this.get('orientation:' + item.selected);
            var pageSize = w2ui.reportstoolbar.get('page_size').selected;
            if (pageSize != "Custom" && item.selected == "Portrait") {
                app.pdfPageWidth = app.pageSizes[pageSize].w;
                app.pdfPageHeight = app.pageSizes[pageSize].h;
            }
            else if (pageSize != "Custom" && item.selected == "LandScape") {
                app.pdfPageWidth = app.pageSizes[pageSize].h;
                app.pdfPageHeight = app.pageSizes[pageSize].w;
            }
            return 'Orientation: ' + el.text;
            },
            selected: 'LandScape',
            items: [
                { id: 'LandScape', text: 'LandScape'},
                { id: 'Portrait', text: 'Portrait'},
            ]
        },
    ]);

    w2ui.reportslayout.content('top', $().w2toolbar({
        name: 'reportstoolbar',
        items: tmp,
        onClick: function (event) {
            // var d1, d2; // start date, stop date

            if (event.target == "page_size") {
                console.log("Page size selected");
            }
            else if (event.target == "orientation") {
                console.log("orientation selected");
            }
            else if (event.target == "csvexport") {
                // now call to export csv report function with start and stop date
                exportReportCSV(app.last.report, app.D1, app.D2);
            }
            else if (event.target == "printreport") {
                // call to export pdf report function with start and stop date
                exportReportPDF(app.last.report, app.D1, app.D2);
            }
            else{
                handleDateToolbarAction(event,'date');
                showReport(app.last.report);
            }
            // TODO: prevent refresh, why toolbar needs to be refreshed when user just selects
            // paper size, orientation? That refresh must be prevented.
        },
        onRefresh: function (event) {
            if (event.target == 'monthfwd') {  // we do these tasks after monthfwd is refreshed so we know that the 2 date controls exist
                var x = document.getElementsByName("dateD1");
                x[0].value = app.D1;
                x = document.getElementsByName("dateD2");
                x[0].value = app.D2;
            }
        }
    }));

    // bind onchange event for date input control for reports
    $(document).on("keypress change", "input[name=dateD1]", function(e) {
        // if event type is keypress then
        if (e.type == 'keypress'){
            // do not procedd further untill user press the Enter key
            if (e.which != 13) {
                return;
            }
        }
        var xd1 = document.getElementsByName('dateD1')[0].value;
        var xd2 = document.getElementsByName('dateD2')[0].value;
        var d1 = dateFromString(xd1);
        var d2 = dateFromString(xd2);

        // check that it is valid or not
        if (isNaN(Date.parse(xd1))) {
            return;
        }
        // check that year is not behind 2000
        if (d1.getFullYear() < 2000) {
            return;
        }
        // check that from date does not have value greater then To date
        if (d1.getTime() >= d2.getTime()) {
            d1 = new Date(d2.getTime() - 24 * 60 * 60 * 1000); //one day back from To date
        }
        app.D1 = dateControlString(d1);
        app.D2 = dateControlString(d2);
        showReport(app.last.report, "dateD1");
    }).on("keypress change", "input[name=dateD2]", function(e) {
        // if event type is keypress then
        if (e.type == 'keypress'){
            // do not procedd further untill user press the Enter key
            if (e.which != 13) {
                return;
            }
        }
        var xd1 = document.getElementsByName('dateD1')[0].value;
        var xd2 = document.getElementsByName('dateD2')[0].value;
        var d1 = dateFromString(xd1);
        var d2 = dateFromString(xd2);

        xd2 = w2uiDateControlString(d2);
        // check that it is valid or not
        if (isNaN(Date.parse(xd2))) {
            return;
        }
        // check that year is not behind 2000
        if (d2.getFullYear() < 2000) {
            return;
        }
        // check that from date does not have value greater then To date
        if (d2.getTime() <= d1.getTime()) {
            d2 = new Date(d1.getTime() + 24 * 60 * 60 * 1000); //one day forward from From date
        }
        app.D1 = dateControlString(d1);
        app.D2 = dateControlString(d2);
        showReport(app.last.report, "dateD2");
    });
};

/*global
    w2ui, $, app, w2confirm, getBUDfromBID, getCurrentBusiness, setToForm,
    console, form_dirty_alert, buildPaymentTypeSelectList, setDateControlsInToolbar,
    addDateNavToToolbar,
    getPersonDetailsByTCID, getPaymentType, formRefreshCallBack, w2utils, reverse_confirm_options,
    getFormSubmitData, w2uiDateControlString, getGridReversalSymbolHTML, get2XReversalSymbolHTML,
    setDefaultFormFieldAsPreviousRecord, formRecDiffer, getCurrentBID, getBUDfromBID,
    exportItemReportCSV, exportItemReportPDF, exportReportCSV, exportReportPDF, getROVReceiptInitRecord, popupReceiptPrintChoice,
    doRcptSave, receiptChoicePrint, loadReceiptChoiceForm
*/
"use strict";
window.getROVReceiptInitRecord = function (BID, BUD, ptInit, previousFormRecord){
    var y = new Date();
    var defaultFormData = {
        recid: 0,
        RCPTID: 0,
        PRCPTID: 0,
        ARID: 0,
        PMTID: 0,
        RAID: 0,
        PmtTypeName: ptInit,
        BID: BID,
        BUD: BUD,
        DID: 0,
        Dt: w2uiDateControlString(y),
        LastModTime: y.toISOString(),
        CreateTS: y.toISOString(),
        DocNo: '',
        Payor: '',
        TCID: 0,
        Amount: 0,
        Comment: '',
        OtherPayorName: '',
        RentableName: '',
        FLAGS: 0,
        LastModBy: 0,
        CreateBy: 0
    };

    // if it called after 'save and add another' action there previous form record is passed as Object
    // else it is null
    if ( previousFormRecord ) {
        defaultFormData = setDefaultFormFieldAsPreviousRecord(
            [ 'DocNo', 'Payor', 'Amount', 'OtherPayorName', 'Comment', 'RAID'], // Fields to Reset
            defaultFormData,
            previousFormRecord
        );
    }

    return defaultFormData;
};


window.buildROVReceiptElements = function () {
    //------------------------------------------------------------------------
    //          receiptsGrid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'receiptsGrid',
        url: '/v1/receipts',
        multiSelect: false,
        postData: {searchDtStart: app.D1, searchDtStop: app.D2, client: app.client},
        show: {
            toolbar        : true,
            footer         : true,
            toolbarAdd     : true,    // indicates if toolbar add new button is visible
            toolbarDelete  : false,   // indicates if toolbar delete button is visible
            toolbarSave    : false,   // indicates if toolbar save button is visible
            selectColumn   : false,
            expandColumn   : false,
            toolbarEdit    : false,
            toolbarSearch  : false,
            toolbarInput   : true,
            searchAll      : false,
            toolbarReload  : true,
            toolbarColumns : true,
        },
        columns: [
            {field: 'recid', hidden: true, caption: 'recid',  size: '40px', sortable: true},
            {field: 'reversed', size: '10px', style: 'text-align: center', sortable: true,
                    render: function (record /*, index, col_index*/) {
                        if (typeof record === "undefined") {
                            return;
                        }
                        if ( (record.FLAGS & app.rcptFLAGS.REVERSED) !== 0 ) { // if reversed then
                            return getGridReversalSymbolHTML();
                        }
                        return '';
                    },
            },
            {field: 'RCPTID',        caption: 'Receipt ID',      size: '80px',  hidden: false, sortable: true, style: 'text-align: right'},
            {field: 'Dt',            caption: 'Date',            size: '80px',  hidden: false, sortable: true, style: 'text-align: right'},
            {field: 'ARID',          caption: 'ARID',            size: '150px', hidden: true,  sortable: false},
            {field: 'DID',           caption: 'DID',             size: '150px', hidden: true,  sortable: false},
            {field: 'AcctRule',      caption: 'Account Rule',    size: '150px', hidden: true,  sortable: true},
            {field: 'Amount',        caption: 'Amount',          size: '100px', hidden: false, sortable: true, render: 'money', style: 'text-align: right'},
            {field: 'BID',           caption: 'BUD',             size: '40px',  hidden: true,  sortable: false},
            {field: 'TCID',          caption: 'TCID',            size: '40px',  hidden: true,  sortable: false},
            {field: 'PMTID',         caption: 'PMTID',                          hidden: true,  sortable: false},
            {field: 'PmtTypeName',   caption: 'Payment Type',    size: '100px', hidden: false, sortable: true},
            {field: 'DocNo',         caption: 'Document Number', size: '150px', hidden: false, sortable: true, style: 'text-align: right'},
            {field: 'OtherPayorName',caption: 'Payor',           size: '150px', hidden: false, sortable: true},
            {field: 'RentableName',  caption: 'Resident Address',size: '150px', hidden: false, sortable: true},
            {field: 'Comment',       caption: 'Comment',         size: '150px', hidden: false, sortable: true},
        ],
        toolbar: {
            onClick: function (event) {
                switch(event.target) {
                case 'csvexport':
                    exportReportCSV("RPTrcptlist", app.D1, app.D2);
                    break;
                case 'printreport':
                    exportReportPDF("RPTrcptlist", app.D1, app.D2);
                    break;
                }
            },
        },
        searches : [
            { field: 'Amount', caption: 'Amount', type: 'string' },
            // { field: 'DocNo', caption: 'Document Number', type: 'string' },
            { field: 'OtherPayorName', caption: 'Payor', type: 'string' },
            { field: 'PmtTypeName', caption: 'Payment Type', type: 'string' },
            { field: 'AcctRule', caption: 'Account Rule', type: 'string' },
        ],
        onClick: function(event) {
            event.onComplete = function () {
                var yes_args = [this, event.recid],
                    no_args = [this],
                    no_callBack = function(grid) {
                        grid.select(app.last.grid_sel_recid);
                        return false;
                    },
                    yes_callBack = function(grid, recid) {
                        var BID = getCurrentBID();
                            // var BUD = getBUDfromBID(BID);

                        app.last.grid_sel_recid = parseInt(recid);
                        grid.select(app.last.grid_sel_recid);// keep highlighting current row in any case

                        var rec = grid.get(recid);
                        var f = w2ui.receiptForm;
                        var j = f.get('ERentableName',true); // index of the enumerated RentableName field
                        f.fields[j].options.url = '/v1/rentablestd/' + BID;
                        f.postData = {searchDtStart: app.D1, searchDtStop: app.D2, client: app.client};
                        setToForm('receiptForm', '/v1/receipt/' + BID + '/' + rec.RCPTID, 400, true);
                    };
                form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);  // warn user if form content has been changed
            };
        },
        onRequest: function(/*event*/) {
            w2ui.receiptsGrid.postData = {searchDtStart: app.D1, searchDtStop: app.D2, client: app.client};
        },
        onRefresh: function(event) {
            event.onComplete = function() {
                if (app.active_grid == this.name) {
                    if (app.new_form_rec) {
                        this.selectNone();
                    }
                    else{
                        this.select(app.last.grid_sel_recid);
                    }
                }

                if (event.target == 'monthfwd') {  // we do these tasks after monthfwd is refreshed so we know that the 2 date controls exist
                    setDateControlsInToolbar('receipts');
                    w2ui.receiptsGrid.postData = {searchDtStart: app.D1, searchDtStop: app.D2, client: app.client};
                }
            };
        },
        onAdd: function (/*event*/) {
            var BID = getCurrentBID();
            var BUD = getBUDfromBID(BID);

            // reset it
            app.last.grid_sel_recid = -1;
            // grid.selectNone();

            var f = w2ui.receiptForm;
            var j = f.get('ERentableName',true); // index of the enumerated RentableName field
            f.fields[j].options.url = '/v1/rentablestd/' + BID;
            var pmt_options = buildPaymentTypeSelectList(BUD);
            var ptInit = (pmt_options.length > 0) ? pmt_options[0] : '';
            f.record = getROVReceiptInitRecord(BID, BUD, ptInit, null);
            f.header = "Edit Receipt (new)";
            f.postData = {client: app.client};
            f.refresh();
            setToForm('receiptForm', '/v1/receipt/' + BID + '/0', 400);
        },
    });

    addDateNavToToolbar('receipts');
    w2ui.receiptsGrid.toolbar.add([
        { type: 'spacer',},
        { type: 'button', id: 'csvexport', icon: 'fas fa-table', tooltip: 'export to CSV' },
        { type: 'button', id: 'printreport', icon: 'far fa-file-pdf', tooltip: 'export to PDF' },
        ]);

    //------------------------------------------------------------------------
    //          receiptForm
    //------------------------------------------------------------------------
    $().w2form({
        name: 'receiptForm',
        style: 'border: 0px; background-color: transparent;',
        header: 'Receipt Detail',
        url: '/v1/receipt',
        formURL: '/webclient/html/formrovrcpt.html',
        fields: [
            { field: 'PmtTypeName',type: 'list', required: true, options: { items: [], selected: {} }, html: { caption: "BUD", page: 0 } },
            // { field: 'ARID',    type: 'list', required: true, options:  {items: app.ReceiptRules} },
            { field: 'recid',      type: 'int',  required: false },
            { field: "BID",        type: 'int',  required: false, html: { caption: "BID", page: 0, column: 0 } },
            { field: "BUD",        type: 'list', required: true, options: { items: app.businesses, maxDropHeight: 350 }, html: { caption: "BUD", page: 0, column: 0 } },
            { field: 'RCPTID',     type: 'int',  required: true },
            { field: 'PRCPTID',    type: 'int',  required: false },
            { field: 'PMTID',      type: 'int',  required: false },
            { field: 'Dt',         type: 'date', required: true },
            { field: 'DocNo',      type: 'text', required: true },
            { field: 'ERentableName',
                type: 'combo',
                options: {
                    url:           '/v1/rentablestd/',
                    max:           1,
                    cacheMax:      50,
                    maxDropHeight: 350,
                    maxDropWidth:  300,
                    compare:       ridRentableCompare,
                    recId:         'recid',
                    recText:       'RentableName',
                },
            },
            { field: 'ARID',           type: 'hidden', required: false },
            { field: 'Payor',          type: 'hidden', required: false },
            { field: 'TCID',           type: 'hidden', required: false },
            { field: 'RAID',           type: 'hidden', required: false },
            { field: 'Amount',         type: 'money',  required: true },
            { field: 'Comment',        type: 'text',   required: false },
            { field: 'OtherPayorName', type: 'text',   required: false },
            { field: 'FLAGS',          type: 'w2int',  required: false },
            { field: 'DID',            type: 'hidden', required: false },
            { field: 'LastModTime',    type: 'hidden', required: false },
            { field: 'LastModBy',      type: 'hidden', required: false },
            { field: 'LastModByUser',  type: 'hidden', required: false },
            { field: 'CreateTS',       type: 'hidden', required: false },
            { field: 'CreateBy',       type: 'hidden', required: false },
            { field: 'CreateByUser',   type: 'hidden', required: false },
            { field: 'RentableName',   type: 'hidden', required: false },
        ],
        toolbar: {
            items: [
                // { id: 'btnNotes',    type: 'button', icon: 'far fa-sticky-note' },
                { id: 'print',       type: 'button', icon: 'fas fa-print',        tooltip: 'print receipt' },
                { id: 'bt3',         type: 'spacer' },
                { id: 'btnClose',    type: 'button', icon: 'fas fa-times' },
            ],
            onClick: function (event) {
                switch(event.target) {
                case 'btnClose':
                    var no_callBack = function() { return false; },
                        yes_callBack = function() {
                            w2ui.toplayout.hide('right',true);
                            w2ui.receiptsGrid.render();
                        };
                    form_dirty_alert(yes_callBack, no_callBack);
                    break;
                case "print":
                    if (w2ui.receiptForm.record.RCPTID === 0) {
                        return;
                    }
                    popupReceiptPrintChoice();
                    break;
                }
            },
        },
        onRender: function(event) { // when form is loaded first time in toplayout right panel
            event.onComplete = function() {
                var f = this;
                var r = f.record;

                // Create the RentableName element if rentable name exists...
                if (r.RentableName.length > 0) {
                    r.ERentableName = r.RentableName;
                }
            };
        },
        onRefresh: function(event) {
            //w2ui.ridRentablePicker.fields[0].options.url = '/v1/rentablestd/' + app.ridRentablePicker.BID;
            event.onComplete = function() {
                var f      = this;
                var r      = f.record;
                var x      = getCurrentBusiness();
                var BID    = parseInt(x.value);
                var BUD    = getBUDfromBID(BID);
                var header = "Edit Receipt ({0})";

                if (f.record.RCPTID === 0) {
                    header = "Edit Receipt (new)";
                }

                if (r.RentableName.length > 0) {
                    r.ERentableName = r.RentableName;
                }

                f.get("PmtTypeName").options.items = buildPaymentTypeSelectList( BUD );
                f.get("PmtTypeName").options.selected = getPaymentType(BUD, r.PMTID);

                formRefreshCallBack(f, "RCPTID", header);

                // ==================================
                // SPECIAL CASE
                // ==================================
                if (r.RCPTID === 0) { // if new record then do not worry about reversed thing
                    $(f.box).find("button[name=reverse]").addClass("hidden");
                    $(f.box).find("button[name=save]").removeClass("hidden");
                    $(f.box).find("button[name=saveadd]").removeClass("hidden");
                    $(f.box).find("button[name=close]").addClass("hidden");
                    $(f.box).find("#FLAGReport").addClass("hidden");

                    // ENABLE ALL INPUTS IF ALL OF THOSE HAVE BEEN DISABLED FOR REVERSED PREVIOUSLY
                    $(f.box).find('input,button').not('input[name=BUD]').prop("disabled", false);
                    return;
                } else {
                    $(f.box).find("#FLAGReport").removeClass("hidden");
                }
                // this one is a special case, where also have to take care of reverse button
                // FLAG reports
                var flag = r.FLAGS,
                    flagHTML = "";

                // check if it is reversed or not
                if ( (flag & app.rcptFLAGS.REVERSED) !== 0 ) { // if reversed then
                    flagHTML += "<p><strong>{0}</strong> ({1})</p>".format("REVERSED", r.Comment);
                    // reversed indication icon
                    flagHTML += get2XReversalSymbolHTML();
                    // if reversed then do not show reverse, save, saveadd button
                    $(f.box).find("button[name=reverse]").addClass("hidden");
                    $(f.box).find("button[name=save]").addClass("hidden");
                    $(f.box).find("button[name=saveadd]").addClass("hidden");
                    // if reversed then we need to show close button
                    $(f.box).find("button[name=close]").removeClass("hidden");

                    // ********************************************************
                    // IF REVERSED THEN DISABLE ALL INPUTS, BUTTONS EXCEPT close button
                    // ********************************************************
                    $(f.box).find('input,button:not([name=close])').prop("disabled", true);

                } else {
                    // IF NOT REVERSED THEN ONLY SHOW PAID STATUS IN FOOTER
                    // unpaid, partial paid or fully paid
                    if ( (flag | app.rcptFLAGS.UNALLOCATED) === 0 || (flag & (app.rcptFLAGS.PARTIALALLOCATED | app.rcptFLAGS.FULLYALLOCATED)) === 0 ) {
                        flagHTML += "<p><strong>{0}</strong></p>".format("Unallocated");
                    }
                    else if ( (flag & app.rcptFLAGS.PARTIALALLOCATED) !== 0 ) {
                        flagHTML += "<p><strong>{0}</strong></p>".format("Partially allocated");
                    }
                    else if ( (flag & app.rcptFLAGS.FULLYALLOCATED) !== 0 ) {
                        flagHTML += "<p><strong>{0}</strong></p>".format("Fully allocated");
                    }

                    // show save, saveadd, reverse button, hide close button
                    $(f.box).find("button[name=reverse]").removeClass("hidden");
                    $(f.box).find("button[name=save]").removeClass("hidden");
                    // $(f.box).find("button[name=saveadd]").removeClass("hidden");
                    $(f.box).find("button[name=close]").addClass("hidden");

                    // ********************************************************
                    // IF not REVERSED THEN ENABLE ALL INPUTS, BUTTONS
                    // ********************************************************
                    $(f.box).find('input,button').not('input[name=BUD]').prop("disabled", false);
                }

                // finally append
                flagHTML += "<p>Last Update: {0} by {1}</p>".format(r.LastModTime, r.LastModByUser);
                flagHTML += "<p>Created: {0} by {1}</p>".format(r.CreateTS, r.CreateByUser);
                $(f.box).find("#FLAGReport").html(flagHTML);
            };
        },
        onValidate: function (event) {
            if (this.record.Amount === 0.0) {
                event.errors.push({
                    field: this.get('Amount'),
                    error: 'Amount must be something other than $0.00'
                });
            }
            if (this.record.PMTID === 0) {
                event.errors.push({
                    field: this.get('PmtTypeName'),
                    error: 'Please select the payment type'
                });
            }
            if (this.record.ARID.id === 0) {
                event.errors.push({
                    field: this.get('ARID'),
                    error: 'Please select the receipt rule'
                });
            }
        },
        onSubmit: function(target, data) {
            delete data.postData.record.LastModTime;
            delete data.postData.record.LastModBy;
            delete data.postData.record.CreateTS;
            delete data.postData.record.CreateBy;
            // modify form data for server request
            w2ui.receiptForm.postData = {client: app.client};
            getFormSubmitData(data.postData.record);
        },
        onChange: function(event) {
            event.onComplete = function() {
                var f = this,
                    r = f.record;
                switch (event.target) {
                case "PmtTypeName":
                    r.PMTID = event.value_new.id;
                    break;
                case "ERentableName":
                    // if ERentableName changed then also update RentableName field
                    r.RentableName = r.ERentableName;
                }
                // formRecDiffer: 1=current record, 2=original record, 3=diff object
                var diff = formRecDiffer(f.record, app.active_form_original, {});
                // if diff == {} then make dirty flag as false, else true
                if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                    app.form_is_dirty = false;
                } else {
                    app.form_is_dirty = true;
                }
            };
        },
        actions: {
            close: function() {
                var no_callBack = function() { return false; },
                    yes_callBack = function() {
                        w2ui.toplayout.hide('right',true);
                        w2ui.receiptsGrid.render();
                    };
                form_dirty_alert(yes_callBack, no_callBack);
            },
            saveprint: function() {
                doRcptSave(this,true);
            },
            save: function () {
                doRcptSave(this,false);
            },
            reverse: function() {
                var form = this;

                w2confirm(reverse_confirm_options)
                .yes(function() {
                    var tgrid = w2ui.receiptsGrid;
                    var params = {cmd: 'delete', formname: form.name, RCPTID: form.record.RCPTID, client: app.client };
                    var dat = JSON.stringify(params);
                    // Reverse receipt request
                    $.post(form.url, dat, null, "json")
                    .done(function(data) {
                        if (data.status === "error") {
                            form.error(w2utils.lang(data.message));
                            return;
                        }
                        w2ui.toplayout.hide('right',true);
                        // reversed items should not be deleted!
                        tgrid.render();
                    })
                    .fail(function(/*data*/){
                        form.error("Reverse Receipt failed.");
                        return;
                    });
                })
                .no(function() {
                    return;
                });
            },
        },
        onResize: function(event) {
            event.onComplete = function() {
                // HACK: set the height of right panel of toplayout box div and form's box div
                // this is how w2ui set the content inside box of toplayout panel, and form's main('div.w2ui-form-box')
                // so that footer content get placed at correct position
                var h = w2ui.toplayout.get("right").height;
                $(w2ui.toplayout.get("right").content.box).height(h);
                $(this.box).find("div.w2ui-form-box").height(h);
            };
        },

   });
};

window.doRcptSave = function (f, prnt) {
    var r = f.record;
    var grid = w2ui.receiptsGrid;

    if (typeof r.RAID === "string") {
        r.RAID = parseInt(r.RAID);
    }
    grid.selectNone();

    f.postData = {client: app.client, RentableName: f.record.RentableName};
    f.save(null, function (data) {
        if (data.status == 'error') {
            console.log('ERROR: '+ data.message);
            return;
        }

        // save the id in record, in case form record is new
        f.record.RCPTID = data.recid;

        w2ui.toplayout.hide('right',true);
        grid.render();
        if (prnt) {
            popupReceiptPrintChoice();
        }
    });
};

//--------------------------------------------------------------------------------
// This contains the definition part of receiptChoiceForm, loads the form on call
//--------------------------------------------------------------------------------
window.loadReceiptChoiceForm = function () {
    $().w2form({
        name: 'receiptChoiceForm',
        style: 'border: 0px; background-color: transparent;',
        focus: -1,
        formHTML:
            '<div class="w2ui-page page-0">'+
            '    <div class="w2ui-field">'+
            '        <label>Format:</label>'+
            '        <div>'+
            '           <input name="report_format" type="list" />'+
            '        </div>'+
            '    </div>'+
            '    <div class="w2ui-field">'+
            '        <label>Type:</label>'+
            '        <div>'+
            '           <label>'+
            '               <input name="report_type" type="radio" value="permanent_resident" /> Permanent Resident'+
            '           </label>'+
            '           </br>'+
            '           <label>'+
            '               <input name="report_type" type="radio" value="hotel" /> Hotel'+
            '           </label>'+
            '        </div>'+
            '    </div>'+
            '</div>'+
            '<div class="w2ui-buttons">'+
            '    <button class="w2ui-btn" name="print" >Print</button>'+
            '    <button class="w2ui-btn" name="close">Close</button>'+
            '</div>',
        fields: [
            { field: 'report_format', type: 'list' , options: { items: ['PDF', 'CSV'] } },
            { field: 'report_type'  , type: 'radio' },
        ],
        record: {
            report_format : "PDF",
            report_type   : "permanent_resident",
        },
        actions: {
            close: function () {
                w2popup.close();
            },
            print: function() {
                receiptChoicePrint();
            },
        }
    });
};

//--------------------------------------------------------------------------------
// Pops up dialog to get print choice for the receipt (permanent resident / hotel)
//--------------------------------------------------------------------------------
window.popupReceiptPrintChoice = function () {

    // if receipt form is not loaded then load it first
    if (!w2ui.receiptChoiceForm) {
        loadReceiptChoiceForm();
    }

    w2popup.open({
        title     : 'Print Receipt',
        body      : '<div id="form" style="width: 100%; height: 100%;"></div>',
        style     : 'padding: 15px 0px 0px 0px',
        width     : 360,
        height    : 220,
        overflow  : 'hidden',
        color     : '#333',
        speed     : '0.3',
        opacity   : '0.5',
        modal     : true,
        showClose : true,
        onOpen    : function(event) {
            event.onComplete = function() {
                // specifying an onOpen handler instead is equivalent to specifying an onBeforeOpen handler, which would make this code execute too early and hence not deliver.
                $('#w2ui-popup #form').w2render('receiptChoiceForm');
            };
        }
    });
};

//--------------------------------------------------------------------------------------------
// Sends the request to print receipt based upon a choice by user (permanent resident / hotel)
//--------------------------------------------------------------------------------------------
window.receiptChoicePrint = function () {
    // decide function call based on format first
    var exportFormatFunc;
    switch(w2ui.receiptChoiceForm.record.report_format.id) {
    case "PDF":
        exportFormatFunc = exportItemReportPDF;
        break;
    case "CSV":
        exportFormatFunc = exportItemReportCSV;
        break;
    default:
        alert("Invalid export format for receipt print");
        return false;
    }

    // choose type of report based on user selection
    switch(w2ui.receiptChoiceForm.record.report_type){
    case "permanent_resident":
        exportFormatFunc("RPTrcpt", w2ui.receiptForm.record.RCPTID, app.D1, app.D2);
        break;
    case "hotel":
        exportFormatFunc("RPTrcpthotel", w2ui.receiptForm.record.RCPTID, app.D1, app.D2);
        break;
    }

    // close the dialog after 500ms
    setTimeout(function() {
        w2popup.close();
        // TODO(Sudip): should we close the right panel after save/print succeed?
    }, 500);
};


/*global
    $,w2ui,console,app,form_dirty_alert,addDateNavToToolbar,exportReportCSV,
    exportReportPDF, popupPDFCustomDimensions, w2utils, calculateRRPagination
*/

//
// NOTE:  w2ui.grid.recordHeight default height is 24.  Change it to 40 or something to show 2 lines of text in a single cell
//

"use strict";

window.getRentRollViewInitRecord = function (){
    return {
        recid: 0,
        BID: 0,
        RID: 0,
        RentableName: "",
        RTID: 0,
        RentableType: "",
        SqFt: "",
        Description: "",
        Users: "",
        Payors: "",
        RAID: 0,
        RAIDREP: "",
        UsePeriod: "",
        PossessionStart: "",
        PossessionStop: "",
        RentPeriod: "",
        RentStart: "",
        RentStop: "",
        AgreementPeriod: "",
        AgreementStart: "",
        AgreementStop: "",
        RentCycle: "",
        RentCycleREP: "",
        RentCycleGSR: "",
        PeriodGSR: "",
        IncomeOffsets: "",
        AmountDue: "",
        PaymentsApplied: "",
        BeginReceivable: "",
        DeltaReceivable: "",
        EndReceivable: "",
        BeginSecDep: "",
        DeltaSecDep: "",
        EndSecDep: "",
        FLAGS: -1,
    };
};

var grey_fields = [
    "BeginReceivable", "DeltaReceivable", "EndReceivable",
    "BeginSecDep","DeltaSecDep","EndSecDep"
];

window.buildRentRollElements = function () {
    //------------------------------------------------------------------------
    //  rr  -  lists all the assessments and receipts for
    //                     the selected Payors
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'rrGrid',
        url: '/v1/rentroll',
        multiSelect: false,
        postData: {searchDtStart: app.D1, searchDtStop: app.D2, limit: 15},
        show: {
            toolbar         : true,
            footer          : true,
            toolbarAdd      : false,   // indicates if toolbar add new button is visible
            toolbarDelete   : false,   // indicates if toolbar delete button is visible
            toolbarSave     : false,   // indicates if toolbar save button is visible
            selectColumn    : false,
            expandColumn    : false,
            toolbarEdit     : false,
            toolbarSearch   : false,
            toolbarInput    : false,    // the text area for searches
            searchAll       : false,
            toolbarReload   : false,
            toolbarColumns  : false,
        },
        columns: [
            {field: 'recid',                    caption: 'recid',                            size: '35px',  sortable: true,  hidden: true},
            {field: 'BID',                      caption: 'BID',                              size: '75px',  sortable: true,  hidden: true},
            {field: 'RID',                      caption: 'RID',                              size: '75px',  sortable: true,  hidden: true},
            {field: 'RentableName',             caption: app.sRentable,                      size: '110px', sortable: true},
            {field: 'RTID',                     caption: 'RTID',                             size: '75px',  sortable: true,  hidden: true},
            {field: 'RentableType',             caption: 'Rentable Type',                    size: '100px', sortable: true},
            {field: 'SqFt',                     caption: 'Sqft',                             size:  '50px', sortable: true,                                    style: 'text-align: right'},
            {field: 'Description',              caption: 'Description',                      size: '150px', sortable: true},
            {field: 'Users',                    caption: 'Users',                            size: '150px', sortable: true},
            {field: 'Payors',                   caption: 'Payors',                           size: '150px', sortable: true},
            {field: 'RAID',                     caption: app.sRentalAgreement,               size: '85px',  sortable: true,  hidden: true},
            {field: 'RAIDREP',                  caption: app.sRentalAgreement,               size: '85px',  sortable: true},
            {field: 'UsePeriod',                caption: 'Use Period',                       size: '85px',  sortable: true,                                    style: 'text-align: right',
                render: function(record/*, index, col_index*/) {
                    if (typeof record === "undefined") {
                        return;
                    }
                    if (record.PossessionStart && record.PossessionStop) {
                        return record.PossessionStart + '<br>- ' + record.PossessionStop;
                    }
                    return '';
                }
            },
            {field: 'PossessionStart',          caption: 'PossessionStart',                  size: '80px',  sortable: true,  hidden: true},
            {field: 'PossessionStop',           caption: 'PossessionStop',                   size: '80px',  sortable: true,  hidden: true},
            {field: 'RentPeriod',               caption: 'Rent<br>Period',                   size: '85px',  sortable: true,                                    style: 'text-align: right',
                render: function(record/*, index, col_index*/) {
                    if (typeof record === "undefined") {
                        return;
                    }
                    if (record.RentStart && record.RentStop) {
                        return record.RentStart + '<br>- ' + record.RentStop;
                    }
                    return '';
                }
            },
            {field: 'RentStart',                caption: 'RentStart',                        size: '80px',  sortable: true,  hidden: true},
            {field: 'RentStop',                 caption: 'RentStop',                         size: '80px',  sortable: true,  hidden: true},
            {field: 'AgreementPeriod',          caption: 'Agreement Period',                 size: '200px', sortable: true,  hidden: true,                     style: 'text-align: right',
                render: function(record/*, index, col_index*/) {
                    if (typeof record === "undefined") {
                        return;
                    }
                    if (record.AgreementStart && record.AgreementStop) {
                        return record.AgreementStart + '<br>- ' + record.AgreementStop;
                    }
                    return '';
                }
            },
            {field: 'AgreementStart',           caption: 'AgreementStart',                   size: '80px',  sortable: true,  hidden: true},
            {field: 'AgreementStop',            caption: 'AgreementStop',                    size: '80px',  sortable: true,  hidden: true},
            {field: 'RentCycle',                caption: 'Rent Cycle',                       size: '75px',  sortable: true,  hidden: true},
            {field: 'RentCycleREP',             caption: 'Rent Cycle',                       size: '85px',  sortable: true},
            {field: 'RentCycleGSR',             caption: 'GSR',                              size: '85px',  sortable: true,                render: 'float:2'},
            {field: 'PeriodGSR',                caption: 'Period<br>GSR',                    size: '85px',  sortable: true,                render: 'float:2'},
            {field: 'IncomeOffsets',            caption: 'Income<br>Offsets',                size: '85px',  sortable: true,                render: 'float:2'},
            {field: 'AmountDue',                caption: 'Amount<br>Due',                    size: '85px',  sortable: true,                render: 'float:2'},
            {field: 'PaymentsApplied',          caption: 'Payments<br>Applied',              size: '85px',  sortable: true,                render: 'float:2'},
            {field: 'BeginReceivable',          caption: 'Beginning<br>Receivable',          size: '100px', sortable: false,               render: 'float:2'},
            {field: 'DeltaReceivable',          caption: 'Change in<br>Receivable',          size: '100px', sortable: false,               render: 'float:2'},
            {field: 'EndReceivable',            caption: 'Ending<br>Receivable',             size: '100px', sortable: false,               render: 'float:2'},
            {field: 'BeginSecDep',              caption: 'Beginning<br>Security<br>Deposit', size: '100px', sortable: false,               render: 'float:2'},
            {field: 'DeltaSecDep',              caption: 'Change in<br>Security<br>Deposit', size: '100px', sortable: false,               render: 'float:2'},
            {field: 'EndSecDep',                caption: 'Ending<br>Security<br>Deposit',    size: '100px', sortable: false,               render: 'float:2'},
            {field: 'FLAGS',                    caption: 'FLAGS',                                                             hidden: true}
        ],
        onLoad: function(event) {
            var g = this;
            var data = JSON.parse(event.xhr.responseText);

            // set up some custom flags
            if (!("_total_main_rows" in g)) {
                g._total_main_rows = 0;
            }
            if (!("_main_rows_offset" in g.last)) {
                g.last._main_rows_offset = 0;
            }
            if (!("_rrIndexMap" in g.last)) {
                g.last._rrIndexMap = {};
            }

            // total main rows count
            if (data.total_main_rows) {
                g._total_main_rows = data.total_main_rows;
            }

            // everytime you have to assign limit here, otherwise you'll get alert message of differed count
            // see: https://github.com/vitmalina/w2ui/blob/master/src/w2grid.js#L2488 and 2481
            if (data.records) {
                g.limit = data.records.length;
            }

            event.onComplete = function() {

                var record, i;
                if (data.records) {
                    for (i = 0; i < data.records.length; i++) {

                        // get record from grid to apply css
                        record = g.get(data.records[i].recid);

                        if (!("w2ui" in record)) {
                            record.w2ui = {}; // init w2ui if not present
                        }
                        if (!("class" in record.w2ui)) {
                            record.w2ui.class = ""; // init class string
                        }
                        if (!("style" in record.w2ui)) {
                            record.w2ui.style = {}; // init style object
                        }

                        // if main row then
                        if ((record.FLAGS & app.rrFLAGS.RentRollMainRow) > 0) {
                            var rec_index = g.get(record.recid, true);
                            g.last._rrIndexMap[rec_index] = g.last._main_rows_offset;
                            g.last._main_rows_offset++;
                        }

                        // if sub total row then
                        if ((record.FLAGS & app.rrFLAGS.RentRollSubTotalRow) > 0) {
                            record.w2ui.class = "subTotalRow";
                        }

                        // if blank row then
                        if ((record.FLAGS & app.rrFLAGS.RentRollBlankRow) > 0) {
                            record.w2ui.class = "blankRow";
                            for (var j = 0; j < grey_fields.length; j++) {
                                var jColIndex = g.getColumn(grey_fields[j], true);
                                record[g.columns[jColIndex].field] = "";
                            }
                        }

                        // if normal row then
                        if ( // if not subtotal or not blank row then render grey field
                            ((record.FLAGS & app.rrFLAGS.RentRollBlankRow) === 0) &&
                            ((record.FLAGS & app.rrFLAGS.RentRollSubTotalRow) === 0)
                        ) {
                            // apply greyish cell backgroud color to some cells
                            for (var k = 0; k < grey_fields.length; k++) {
                                var kColIndex = g.getColumn(grey_fields[k], true);
                                record.w2ui.style[kColIndex] = "background-color: #CCC;";
                                record[g.columns[kColIndex].field] = "";
                            }
                        }

                        // redraw row
                        g.refreshRow(data.records[i].recid);
                    }
                }

                // summary rows
                if (data.summary) {
                    for (i = 0; i < data.summary.length; i++) {

                        // get record from grid to apply css
                        record = g.get(data.summary[i].recid);

                        if (!("w2ui" in record)) {
                            record.w2ui = {}; // init w2ui if not present
                        }
                        if (!("class" in record.w2ui)) {
                            record.w2ui.class = ""; // init class string
                        }
                        if (!("style" in record.w2ui)) {
                            record.w2ui.style = {}; // init style object
                        }

                        if (record.IsGrandTotalRow) {
                            record.w2ui.class = "grandTotalRow";
                        }

                        // redraw row
                        g.refreshRow(data.summary[i].recid);
                    }
                }

                // stop request if all rows have been loaded
                if(g.total <= g.records.length) {
                    g.last.pull_more = false;
                }

                // need to redraw grid after loading data
                setTimeout(function() {
                    calculateRRPagination();
                }, 0);
            };
        },
        onRefresh: function(event) {
            var g = this;
            event.onComplete = function() {
                $("#grid_"+g.name+"_records").on("scroll", function() {
                    calculateRRPagination();
                });
            };
        },
        onRequest: function(event) {
            var g = this;
            if (g.records.length === 0) { // if grid is empty then reset all flags
                g._total_main_rows = 0;
                g.last._main_rows_offset = 0;
                g.last._rrIndexMap = {};
            }
            event.postData.main_rows_offset = g.last._main_rows_offset;
        },
        onClick: function(event) {
            event.onComplete = function () {
                var yes_args = [this, event.recid],
                    no_args = [this],
                    no_callBack = function(grid) {
                        grid.select(app.last.grid_sel_recid);
                        return false;
                    },
                    yes_callBack = function(grid, recid) {
                        app.last.grid_sel_recid = parseInt(recid);

                        // keep highlighting current row in any case
                        grid.select(app.last.grid_sel_recid);

                        var rec = grid.get(recid);
                        console.log( 'BID = ' + rec.BID + ',   RAID = ' + rec.RAID);
                        //setToForm('rr', '', 800);
                    };

                // warn user if form content has been changed
                form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
            };
        },
    });

    addDateNavToToolbar('rr');

    // now add items for csv/pdf export report options
    w2ui.rrGrid.toolbar.add([
        { type: 'spacer',},
        { type: 'button', id: 'csvexport', icon: 'fas fa-table', tooltip: 'export to CSV' },
        { type: 'button', id: 'printreport', icon: 'far fa-file-pdf', tooltip: 'export to PDF' },
        { type: 'break', id: 'break2' },
        { type: 'menu-radio', id: 'page_size', icon: 'fas fa-print',
            tooltip: 'exported PDF page size',
            text: function (item) {
            //var text = item.selected;
            var el   = this.get('page_size:' + item.selected);
            if (item.selected == "Custom") {
                popupPDFCustomDimensions();
            }
            return 'Page Size: ' + el.text;
            },
            selected: 'USLetter',
            items: [
                { id: 'USLetter', text: 'US Letter (8.5 x 11 in)'},
                { id: 'Legal', text: 'Legal (8.5 x 14 in)'},
                { id: 'Ledger', text: 'Ledger (11 x 17 in)'},
                { id: 'Custom', text: 'Custom'},
            ]
        },
        { type: 'menu-radio', id: 'orientation', icon: 'far fa-clone fa-rotate-90',
            tooltip: 'exported PDF orientation',
            text: function (item) {
            //var text = item.selected;
            var el   = this.get('orientation:' + item.selected);
            var pageSize = w2ui.reportstoolbar.get('page_size').selected;
            if (pageSize != "Custom" && item.selected == "Portrait") {
                app.pdfPageWidth = app.pageSizes[pageSize].w;
                app.pdfPageHeight = app.pageSizes[pageSize].h;
            }
            else if (pageSize != "Custom" && item.selected == "LandScape") {
                app.pdfPageWidth = app.pageSizes[pageSize].h;
                app.pdfPageHeight = app.pageSizes[pageSize].w;
            }
            return 'Orientation: ' + el.text;
            },
            selected: 'LandScape',
            items: [
                { id: 'LandScape', text: 'LandScape'},
                { id: 'Portrait', text: 'Portrait'},
            ]
        },
    ]);

    // handle pdf/csv report download actions
    w2ui.rrGrid.toolbar.on('click', function(event) {
        if (event.target == "csvexport") {
            exportReportCSV("RPTrr", app.D1, app.D2);
        }
        else if (event.target == "printreport") {
            exportReportPDF("RPTrr", app.D1, app.D2);
        }
    });
};


window.calculateRRPagination = function () {
    // perform virtual scroll
    var g = w2ui.rrGrid;
    var url  = (typeof g.url != 'object' ? g.url : g.url.get);
    var records = $("#grid_" + g.name + "_records");
    var buffered = g.records.length;
    if (g.searchData.length !== 0 && !url) buffered = g.last.searchIds.length;
    if (buffered === 0 || records.length === 0 || records.height() === 0) return;
    if (buffered > g.vs_start) g.last.show_extra = g.vs_extra; else g.last.show_extra = g.vs_start;
    // need this to enable scrolling when g.limit < then a screen can fit
    if (records.height() < buffered * g.recordHeight && records.css('overflow-y') == 'hidden') {
        // TODO: is this needed?
        // if (g.total > 0) g.refresh();
        return;
    }
    // update footer
    var t1 = Math.round(records[0].scrollTop / g.recordHeight + 1);
    var t2 = t1 + (Math.round(records.height() / g.recordHeight) - 1);
    if (t1 > buffered) t1 = buffered - 1;
    if (t2 >= buffered) t2 = buffered - 1;
    // custom pagination number start - stop for rentroll report
    var startPageRec = 0, endPageRec = 0, i;
    for (i = t1; i >= 0; i--) {
        if((g.records[i].FLAGS&app.rrFLAGS.RentRollMainRow) > 0){
            startPageRec = i;
            break;
        }
    }

    for (i = t2; i >= t1; i--) {
        if((g.records[i].FLAGS&app.rrFLAGS.RentRollMainRow) > 0){
            endPageRec = i;
            break;
        }
    }

    var startPageNo = g.last._rrIndexMap[startPageRec] + 1;
    var endPageNo = g.last._rrIndexMap[endPageRec] + 1;

    $('#grid_'+ g.name + '_footer .w2ui-footer-right').html(
        (g.show.statusRange ? w2utils.formatNumber(startPageNo) + '-' + w2utils.formatNumber(endPageNo) +
        (g._total_main_rows != -1 ? ' ' + w2utils.lang('of') + ' ' +    w2utils.formatNumber(g._total_main_rows) : '') : '')
    );
};
/*global
    w2ui, app, $, console, form_dirty_alert, formRefreshCallBack, formRecDiffer,
    getFormSubmitData, w2confirm, delete_confirm_options, getBUDfromBID, getCurrentBusiness,
    addDateNavToToolbar, setRTLayout, getRTInitRecord, getRentASMARList
*/
"use strict";
window.getRTInitRecord = function (BID, BUD){
    var y = new Date();
    return {
        recid: 0,
        BID: BID,
        BUD: BUD,
        RTID: 0,
        Style: "",
        Name: "",
        RentCycle: 0,
        Proration: 0,
        GSRPC: 0,
        ManageToBudget: false,
        IsActive: true,
        IsChildRentable: false,
        RMRID: 0,
        LastModTime: y.toISOString(),
        LastModBy: 0,
        ARID: 0
    };
};

window.getRentASMARList = function() {
    var BID = getCurrentBID();
    var data = {
        type: "FLAGS",
        FLAGS: 1 << app.arFLAGS.IsRentASM,
    };

    return $.ajax({
        url: "/v1/arslist/" + BID.toString() + "/",
        method: "POST",
        data: JSON.stringify(data),
        contentType: "application/json",
        dataType: "json"
    });
};

window.buildRentableTypeElements = function () {

    //------------------------------------------------------------------------
    //          rentable types Grid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'rtGrid',
        url: '/v1/rt',
        multiSelect: false,
        postData: {searchDtStart: app.D1, searchDtStop: app.D2},
        show: {
            header: false,
            toolbar: true,
            toolbarReload: false,
            toolbarColumns: false,
            toolbarSearch: true,
            toolbarAdd: true,
            toolbarDelete: false,
            toolbarSave: false,
            searchAll       : true,
            footer: true,
            lineNumbers: false,
            selectColumn: false,
            expandColumn: false
        },
        columns: [
            {field: 'recid', caption: 'recid', hidden: true},
            {field: 'RTID', caption: 'RTID', size: '50px', sortable: true},
            {field: 'Active', caption: 'Available', size: '120px', sortable: true,
                render: function(record) {
                    if (record) {
                        if (record.IsActive) {
                            return "YES";
                        } else {
                            return "NO (Out of service)";
                        }
                    }
                }
            },
            {field: 'Name', caption: 'Name', size: '150px', sortable: true},
            {field: 'Style', caption: 'Style', size: '100px', sortable: true},
            {field: 'BID', caption: 'BID', hidden: true},
            {field: 'BUD', caption: 'BUD', hidden: true},
            {field: 'RentCycle', caption: 'RentCycle', size: '75px', sortable: true,
                render: function (record/*, index, col_index*/) {
                    var text = '';
                    if (record) {
                        app.cycleFreq.forEach(function(itemText, itemIndex) {
                            if (record.RentCycle == itemIndex) {
                                text = itemText;
                                return false;
                            }
                        });
                    }
                    return text;
                },
            },
            {field: 'Proration', caption: 'Proration', size: '90px', sortable: true,
                render: function (record/*, index, col_index*/) {
                    var text = '';
                    if (record) {
                        app.cycleFreq.forEach(function(itemText, itemIndex) {
                            if (record.Proration == itemIndex) {
                                text = itemText;
                                return false;
                            }
                        });
                    }
                    return text;
                },
            },
            {field: 'GSRPC', caption: 'GSRPC', size: '65px', sortable: true,
                render: function (record/*, index, col_index*/) {
                    var text = '';
                    if (record) {
                        app.cycleFreq.forEach(function(itemText, itemIndex) {
                            if (record.GSRPC == itemIndex) {
                                text = itemText;
                                return false;
                            }
                        });
                    }
                    return text;
                },
            },
            {field: 'ManageToBudget', caption: 'Manage To Budget', size: '200px', sortable: true,
                render: function (record/*, index, col_index*/) {
                    var text = '';
                    if (record) {
                        if (record.ManageToBudget) {
                            return "YES (Market Rate required)";
                        } else {
                            return "NO";
                        }
                    }
                    return text;
                },
            },
            {field: 'LastModTime', caption: 'LastModTime', hidden: true},
            {field: 'LastModBy',   caption: 'LastModBy',   hidden: true},
            {field: 'RMRID',       caption: 'RMRID',       hidden: true},
        ],
        onRefresh: function(event) {
            event.onComplete = function() {
                if (app.active_grid == this.name) {
                    if (app.new_form_rec) {
                        this.selectNone();
                    }
                    else{
                        this.select(app.last.grid_sel_recid);
                    }
                }
            };
        },
        onClick: function(event) {
            event.onComplete = function () {
                var yes_args = [this, event.recid],
                    no_args = [this],
                    no_callBack = function(grid) {
                        grid.select(app.last.grid_sel_recid);
                        return false;
                    },
                    yes_callBack = function(grid, recid) {
                        app.last.grid_sel_recid = parseInt(recid);

                        // keep highlighting current row in any case
                        grid.select(app.last.grid_sel_recid);

                        var rec = grid.get(recid);
                        console.log('rentableType form url: ' + '/v1/rt/' + rec.BID + '/' + rec.RTID);
                        setRTLayout(rec.BID, rec.RTID);

                        getRentASMARList().
                        done(function(data) {
                            if(data.status != "success") {
                                w2ui.rtForm.error(data.message);
                            } else {
                                var list = data.records || [];
                                var w2ui_items = [{id: 0, text: " -- No ARID -- "}];
                                list.forEach(function(item) {
                                    w2ui_items.push({id: item.ARID, text: item.Name});
                                });

                                w2ui.rtForm.get("ARID").options.items = w2ui_items;
                                w2ui.rtForm.refresh();
                                w2ui.rtForm.refresh();
                            }
                        })
                        .fail(function() {
                            w2ui.rtForm.error("Error while getting latest RentASM account rules");
                        });

                    };

                // warn user if content has been changed
                form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
            };
        },
        onAdd: function(/*event*/) {
            var yes_args = [this],
                no_callBack = function() { return false; },
                yes_callBack = function(grid) {
                    // reset it
                    app.last.grid_sel_recid = -1;
                    grid.selectNone();

                    var BID = getCurrentBID(),
                        BUD = getBUDfromBID(BID);

                    // set the layout first, so it can render the form in DOM
                    setRTLayout(BID, 0);

                    getRentASMARList().
                    done(function(data) {
                        if(data.status != "success") {
                            w2ui.rtForm.error(data.message);
                        } else {
                            var list = data.records || [];
                            var w2ui_items = [{id: 0, text: " -- No ARID -- "}];
                            list.forEach(function(item) {
                                w2ui_items.push({id: item.ARID, text: item.Name});
                            });

                            w2ui.rtForm.get("ARID").options.items = w2ui_items;
                            var record = getRTInitRecord(BID, BUD);
                            w2ui.rtForm.record = record;
                            w2ui.rtForm.refresh();
                            w2ui.rtForm.refresh();
                        }
                    })
                    .fail(function() {
                        w2ui.rtForm.error("Error while getting latest RentASM account rules");
                    });
                };

            // warn user if content has been changed of form
            form_dirty_alert(yes_callBack, no_callBack, yes_args);
        },
    });

    addDateNavToToolbar('rt');

    //------------------------------------------------------------------------
    //          rentable Type Form
    //------------------------------------------------------------------------
    $().w2form({
        name: 'rtForm',
        style: 'border: 1px solid silver; background-color: transparent;',
        // header: app.sRentableType + ' Detail',
        url: '/v1/rentabletypes',
        formURL: '/webclient/html/formrt.html',
        fields: [
            { field: 'recid',           type: 'int',        required: false,    html: { page: 0, column: 0 } },
            { field: 'RTID',            type: 'int',        required: true,     html: { page: 0, column: 0 } },
            { field: 'BID',             type: 'int',        required: true,     html: { page: 0, column: 0 } },
            { field: 'BUD',             type: 'list',       required: true,     html: { page: 0, column: 0 },   options: {items: app.businesses} },
            { field: 'Style',           type: 'text',       required: true,     html: { page: 0, column: 0 } },
            { field: 'Name',            type: 'text',       required: true,     html: { page: 0, column: 0 } },
            { field: 'RentCycle',       type: 'list',       required: true,     html: { page: 0, column: 0 },   options: {items: app.w2ui.listItems.cycleFreq, selected: {}} },
            { field: 'Proration',       type: 'list',       required: true,     html: { page: 0, column: 0 },   options: {items: app.w2ui.listItems.cycleFreq, selected: {}} },
            { field: 'GSRPC',           type: 'list',       required: true,     html: { page: 0, column: 0 },   options: {items: app.w2ui.listItems.cycleFreq, selected: {}} },
            { field: 'ManageToBudget',  type: 'checkbox',   required: true,     html: { page: 0, column: 0 } },
            { field: 'IsActive',        type: 'checkbox',   required: true,     html: { page: 0, column: 0 } },
            { field: 'IsChildRentable', type: 'checkbox',   required: true,     html: { page: 0, column: 0 } },
            { field: 'ARID',            type: 'list',       required: true,     html: { page: 0, column: 0 },   options: {items: [], selected: {}} },
            { field: 'LastModTime',     type: 'time',       required: false,    html: { page: 0, column: 0 } },
            { field: 'LastModBy',       type: 'int',        required: false,    html: { page: 0, column: 0 } },
            { field: 'CreateTS',        type: 'time',       required: false,    html: { page: 0, column: 0 } },
            { field: 'CreateBy',        type: 'int',        required: false,    html: { page: 0, column: 0 } },
        ],
        onValidate: function(event) {
            event.onComplete = function() {
                // console.log(event);
                if (this.record.ManageToBudget) {
                    var grid = w2ui.rmrGrid;
                    var f = this;
                    var mainPanel = w2ui.rtDetailLayout.get("main");
                    var errMsg;
                    if (grid.records.length < 1) {
                        // if not form tab then show it in the form tab
                        if (mainPanel.tabs.active === f.name) {
                            errMsg = "At least one MarketRate should be exist when Mange To Budget is Yes.\n Please checkout MarketRates tab!";
                            f.message(errMsg);
                            /*event.errors.push({
                                field: f.get('ManageToBudget'),
                                error: errMsg
                            });*/
                            /*// show red-bordered error message and popup dialog too!
                            setTimeout(function() {
                                $($(f.get("ManageToBudget").el).parents("div")[0]).w2tag(errMsg);
                                $(f.get("ManageToBudget").el).addClass("w2ui-error");

                            }, 0);*/
                        } else {
                            errMsg = "At least one MarketRate should be exist when Mange To Budget is Yes.";
                            grid.message(errMsg);
                            // w2ui.rtDetailLayout.get("main").tabs.click(f.name);
                        }
                    }
                }
                if (this.record.Style === "") {
                    event.errors.push({
                        field: this.get('Style'),
                        error: 'Style cannot be blank'
                    });
                }
                if (this.record.Name === "") {
                    event.errors.push({
                        field: this.get('Name'),
                        error: 'Name cannot be blank'
                    });
                }
            };
        },
        onSubmit: function(target, data){
            delete data.postData.record.LastModTime;
            delete data.postData.record.LastModBy;
            delete data.postData.record.CreateTS;
            delete data.postData.record.CreateBy;

            data.postData.record.ManageToBudget = int_to_bool(data.postData.record.ManageToBudget);
            data.postData.record.IsActive = int_to_bool(data.postData.record.IsActive);
            data.postData.record.IsChildRentable = int_to_bool(data.postData.record.IsChildRentable);

            // server request form data
            getFormSubmitData(data.postData.record);
        },
        onRefresh: function(event) {
            event.onComplete = function() {
                var f = this,
                    r = f.record,
                    header = "Edit Rentable Type ({0})";

                // dropdown list items and selected variables
                var rentCycleSel = {}, prorationSel = {},
                    gsrpcSel = {},  ARIDSel = {};

                // select value for rentcycle, proration, gsrpc
                app.cycleFreq.forEach(function(itemText, itemIndex) {
                    if (itemIndex == r.RentCycle) {
                        rentCycleSel = { id: itemIndex, text: itemText };
                    }
                    if (itemIndex == r.Proration) {
                        prorationSel = { id: itemIndex, text: itemText };
                    }
                    if (itemIndex == r.GSRPC) {
                        gsrpcSel = { id: itemIndex, text: itemText };
                    }
                });

                // select value for rentable type account rule
                f.get("ARID").options.items.forEach(function(item) {
                    if (item.id == r.ARID) {
                        ARIDSel = {id: item.id, text: item.text};
                    }
                });

                // fill the field with values
                f.get("RentCycle").options.selected = rentCycleSel;
                f.get("Proration").options.selected = prorationSel;
                f.get("GSRPC").options.selected = gsrpcSel;
                f.get("ARID").options.selected = ARIDSel;

                // if manageToBudget set then enable market rate grid
                if (f.record.ManageToBudget) {
                    w2ui.rtDetailLayout.get("main").tabs.enable("rmrGrid");
                } else {
                    w2ui.rtDetailLayout.get("main").tabs.disable("rmrGrid");
                }

                formRefreshCallBack(f, "RTID", header);
            };
        },
        onChange: function(event) {
            var f = this;
            event.onComplete = function() {
                switch (event.target) {
                    case "ManageToBudget":
                        if (event.value_new) {
                            w2ui.rtDetailLayout.get("main").tabs.enable("rmrGrid");
                        } else {
                            w2ui.rtDetailLayout.get("main").tabs.disable("rmrGrid");
                        }
                        break;
                }

                // formRecDiffer: 1=current record, 2=original record, 3=diff object
                var diff = formRecDiffer(this.record, app.active_form_original, {});
                // if diff == {} then make dirty flag as false, else true
                if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                    app.form_is_dirty = false;
                } else {
                    app.form_is_dirty = true;
                }
            };
        },
        onResize: function(event) {
            event.onComplete = function() {
                // HACK: set the height of right panel of toplayout box div and form's box div
                // this is how w2ui set the content inside box of toplayout panel, and form's main('div.w2ui-form-box')
                var h = w2ui.toplayout.get("right").height;
                $(w2ui.toplayout.get("right").content.box).height(h);
                $(this.box).find("div.w2ui-form-box").height(h);
            };
        }
    });

    //------------------------------------------------------------------------
    //          rtFormBtns
    //------------------------------------------------------------------------
    $().w2form({
        name: 'rtFormBtns',
        style: 'border: 0px; background-color: transparent;',
        formURL: '/webclient/html/formrtbtns.html',
        url: '',
        fields: [],
        actions: {
            save: function() {
                var rtG = w2ui.rtGrid,
                    rmrG = w2ui.rmrGrid,
                    rtF = w2ui.rtForm,
                    x = getCurrentBusiness(),
                    BID=parseInt(x.value);

                // unselect record from
                rtG.selectNone();

                // hit save
                rtF.save({}, function (data) {
                    if (data.status === 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }

                    // in case if record is new then we've to update RTID that saved on server side
                    rtF.record.RTID = data.recid;

                    // what to do after save action - common code
                    var postSaveAction = function() {
                        w2ui.toplayout.hide('right',true);
                        rtG.render();
                    };

                    // only if manage to budget is set then call
                    if (rtF.record.ManageToBudget) {
                        // update RTID in grid records
                        for (var i = 0; i < rmrG.records.length; i++) {
                            rmrG.records[i].RTID = rtF.record.RTID;
                        }

                        // now set the url of market Rate grid so that it can save the record on server side
                        rmrG.url = '/v1/rmr/' + BID + '/' + rtF.record.RTID;
                        rmrG.save(function(data) {
                            // no matter, if it was succeed or not, just reset it, we already setting it before save call
                            rmrG.url = ""; // after save, remove it

                            if (data.status == "success") {
                                postSaveAction();
                            }
                        });
                    } else {
                        postSaveAction();
                    }
                });
            },
            saveadd: function() {
                var rtF = w2ui.rtForm,
                    rtG = w2ui.rtGrid,
                    rmrG = w2ui.rmrGrid,
                    x = getCurrentBusiness(),
                    BID=parseInt(x.value),
                    BUD=getBUDfromBID(BID);

                // clean dirty flag of form
                app.form_is_dirty = false;

                // clear the grid select recid
                app.last.grid_sel_recid  =-1;

                // select none if you're going to add new record
                rtG.selectNone();

                rtF.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }

                    // what to do after save/add -- common code
                    var postSaveAddAction = function() {
                        // clear grid as we're going to add new Form
                        rmrG.clear();

                        // dropdown list items and selected variables
                        var rentCycleSel = {}, prorationSel = {}, gsrpcSel = {},
                            cycleFreqItems = [];

                        // select value for rentcycle, proration, gsrpc
                        app.cycleFreq.forEach(function(itemText, itemIndex) {
                            if (itemIndex == rtF.record.RentCycle) {
                                rentCycleSel = { id: itemIndex, text: itemText };
                            }
                            if (itemIndex == rtF.record.Proration) {
                                prorationSel = { id: itemIndex, text: itemText };
                            }
                            if (itemIndex == rtF.record.GSRPC) {
                                gsrpcSel = { id: itemIndex, text: itemText };
                            }
                            cycleFreqItems.push({ id: itemIndex, text: itemText });
                        });

                        rtF.get("RentCycle").options.items = cycleFreqItems;
                        rtF.get("RentCycle").options.selected = rentCycleSel[0];
                        rtF.get("Proration").options.items = cycleFreqItems;
                        rtF.get("Proration").options.selected = prorationSel[0];
                        rtF.get("GSRPC").options.items = cycleFreqItems;
                        rtF.get("GSRPC").options.selected = gsrpcSel[0];

                        // JUST RENDER THE GRID ONLY
                        rtG.render();

                        var record = getRTInitRecord(BID, BUD);
                        rtF.record = record;
                        rtF.header = "Edit Rentable Type (new)"; // have to provide header here, otherwise have to call refresh method twice to get this change in form
                        rtF.url = '/v1/rt/' + BID+'/0';
                        rtF.refresh();
                    };

                    if (rtF.record.ManageToBudget) {
                        // now set the url of market Rate grid so that it can save the record on server side
                        rmrG.url = '/v1/rmr/' + BID + '/' + rtF.record.RTID;
                        rmrG.save(function(data) {
                            // no matter, if it was succeed or not, just reset it, we already setting it before save call
                            rmrG.url = ""; // after save, remove it

                            if (data.status != "success") {
                                return false;
                            }
                            else {
                                postSaveAddAction();
                            }
                        });
                    } else {
                        postSaveAddAction();
                    }
                });
            },
            deactivate: function() {
                var rtF = w2ui.rtForm;

                // extend rest of the options
                var confirm_dialog_options = $.extend(true, {}, delete_confirm_options);
                confirm_dialog_options.msg = "<p>Are you sure you want to deactivate this record?</p>";

                // confirm before deactivate
                w2confirm(confirm_dialog_options)
                .yes(function() {
                    var rtG = w2ui.rtGrid;
                    var params = {cmd: 'deactivate', formname: rtF.name, ID: rtF.record.RTID };
                    var dat = JSON.stringify(params);

                    // deactivate rentable type request
                    $.post(rtF.url, dat, null, "json")
                    .done(function(data) {
                        if (data.status === "error") {
                            return;
                        }

                        w2ui.toplayout.hide('right',true);
                        rtG.render();
                    })
                    .fail(function(/*data*/){
                        rtF.error("deactivate rentabletype failed.");
                        return;
                    });
                })
                .no(function() {
                    return;
                });
            },
            reactivate: function() {
                var rtF = w2ui.rtForm;
                var rtG = w2ui.rtGrid;
                var params = {cmd: 'reactivate', formname: rtF.name, ID: rtF.record.RTID };
                var dat = JSON.stringify(params);

                // reactive rentabletype request
                $.post(rtF.url, dat, null, "json")
                .done(function(data) {
                    if (data.status === "error") {
                        return;
                    }

                    w2ui.toplayout.hide('right',true);
                    rtG.render();
                })
                .fail(function(/*data*/){
                    rtF.error("Reactivate Rentable Type failed.");
                    return;
                });
            },
         },
         onRefresh: function(event) {
            event.onComplete = function() {
                var rtActive = w2ui.rtForm.record.IsActive;
                if (!rtActive) {
                    $("#rtFormBtns").find("button[name=save]").addClass("hidden");
                    $("#rtFormBtns").find("button[name=saveadd]").addClass("hidden");
                    $("#rtFormBtns").find("button[name=deactivate]").addClass("hidden");
                    $("#rtFormBtns").find("button[name=reactivate]").removeClass("hidden");
                } else {
                    $("#rtFormBtns").find("button[name=save]").removeClass("hidden");
                    $("#rtFormBtns").find("button[name=saveadd]").removeClass("hidden");
                    $("#rtFormBtns").find("button[name=deactivate]").removeClass("hidden");
                    $("#rtFormBtns").find("button[name=reactivate]").addClass("hidden");
                }
            };
         },
    });

    //------------------------------------------------------------------------
    //          rentable Type Detailed Layout
    //------------------------------------------------------------------------
    $().w2layout({
        name: 'rtDetailLayout',
        panels: [
            {
                type: 'top',
                size: 35,
                style: 'border: 1px solid silver;',
                content: "",
                toolbar: {
                    style: "height: 35px; background-color: #eee; border: 0px;",
                    items: [
                        { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
                        { id: 'bt3', type: 'spacer' },
                        { id: 'btnClose', type: 'button', icon: 'fas fa-times' },
                    ],
                    onClick: function (event) {
                        switch(event.target) {
                        case 'btnClose':
                            var no_callBack = function() { return false; },
                                yes_callBack = function() {
                                    w2ui.toplayout.hide('right',true);
                                    w2ui.rtGrid.render();
                                };
                            form_dirty_alert(yes_callBack, no_callBack);
                            break;
                        }
                    },
                },
            },
            {
                type: 'main',
                overflow: "hidden",
                style: 'background-color: white; border: 1px solid silver; padding: 0px;',
                tabs: {
                    style: "padding-top: 10px;",
                    active: 'rtForm',
                    tabs: [
                        { id: 'rtForm', caption: 'Rentable Type Detail' },
                        { id: 'rmrGrid', caption: 'Market Rates' },
                    ],
                    onClick: function (event) {
                        if (event.target === "rmrGrid") {
                            w2ui.rtDetailLayout.html('main', w2ui.rmrGrid);
                        }
                        if (event.target === "rtForm") {
                            w2ui.rtDetailLayout.html('main', w2ui.rtForm);
                        }

                        // if RentableType is not active then lock the content loaded in main panel
                        setTimeout(function() {
                            var rtActive = w2ui.rtForm.record.IsActive;
                            if (!rtActive) {
                                w2ui.rtDetailLayout.get("main").content.lock();
                            } else {
                                w2ui.rtDetailLayout.get("main").content.unlock();
                            }
                        }, 1000);
                    }
                }
            },
            {
                type: 'bottom',
                size: 60,
                // style: 'background-color: white;  border-top: 1px solid silver; text-align: center; padding: 15px;',
            },
        ],
    });

    //------------------------------------------------------------------------
    //          rentable Market Rates Grid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'rmrGrid',
        style: 'padding: 0px',
        show: {
            header: false,
            toolbar: true,
            toolbarReload: false,
            toolbarColumns: false,
            toolbarSearch: true,
            toolbarAdd: true,
            toolbarDelete: true,
            toolbarSave: false,
            searchAll       : true,
            footer: true,
            lineNumbers: false,
            selectColumn: false,
            expandColumn: false
        },
        columns: [
            {field: 'recid', caption: 'recid', hidden: true},
            {field: 'RMRID', caption: 'RMRID', size: '150px', sortable: true},
            {field: 'RTID', caption: 'RTID', size: '150px', hidden: true},
            {field: 'BID', caption: 'BID', hidden: true},
            {field: 'BUD', caption: 'BUD', hidden: true},
            {field: 'MarketRate',  caption: 'MarketRate',  size: '100px', sortable: true, render: 'money', editable: {type: 'money'} },
            {field: 'DtStart',     caption: 'DtStart', size: "50%",    sortable: true, style: 'text-align: right', editable: {type: 'date'} },
            {field: 'DtStop',      caption: 'DtStop', size: "50%",    sortable: true, style: 'text-align: right', editable: {type: 'date'} },
        ],
        onLoad: function(event) {
            event.onComplete = function() {
                this.url = '';
            };
        },
        onAdd: function(event) {
            var x = getCurrentBusiness(),
                BID=parseInt(x.value),
                BUD = getBUDfromBID(BID),
                fr = w2ui.rtForm.record,
                g = this,
                ndStart;

            // get lastest date among all market rate object's stopDate for new MR's StartDate
            if (g.records.length === 0) {
                ndStart = new Date();
            } else {
                g.records.forEach(function(rec) {
                    if (ndStart === undefined) {
                        ndStart = new Date(rec.DtStop);
                    }
                    if (rec.DtStop) {
                        var rdStop = new Date(rec.DtStop);
                        if (ndStart < rdStop) {
                            ndStart = rdStop;
                        }
                    }
                });
            }

            var newRec = { recid: g.records.length,
                BID: BID,
                BUD: BUD,
                RTID: fr.RTID,
                RMRID: 0,
                MarketRate: 0,
                DtStart: dateFmtStr(ndStart),
                DtStop: "12/31/9999" };
            g.add(newRec);
        },
        onSave: function(event) {
            event.changes = this.records;
        },
        onDelete: function(event) {
            var selected = this.getSelection(),
                RMRIDList = [],
                grid = this;

            // if not selected then return
            if (selected.length < 0) {
                return;
            }
            // collect RMRID
            selected.forEach(function(id) {
                RMRIDList.push(grid.get(id).RMRID);
            });

            event.onComplete = function() {
                var x = getCurrentBusiness(),
                    BID=parseInt(x.value),
                    BUD = getBUDfromBID(BID),
                    RTID = w2ui.rtForm.record.RTID;

                var payload = { "cmd": "delete", "RMRIDList": RMRIDList };
                $.ajax({
                    type: "POST",
                    url: "/v1/rmr/" + BID + "/" + RTID,
                    data: JSON.stringify(payload),
                    contentType: "application/json",
                    dataType: "json",
                    success: function(data) {
                        grid.reload();
                    },
                });
            };
        },
        onChange: function(event) {
            event.preventDefault();
            var g = this,
                field = g.columns[event.column].field,
                chgRec = g.get(event.recid),
                changeIsValid = true;

            if ( field === "MarketRate" ) { // if field is MarketRate
                if (event.value_new <= 0) {
                    changeIsValid = false;
                }
            }

            // if fields are DtStart or DtStop
            if ( field === "DtStart" || field === "DtStop") {

                var chgDStart = field === "DtStart" ? new Date(event.value_new) : new Date(chgRec.DtStart),
                    chgDStop = field === "DtStop" ? new Date(event.value_new) : new Date(chgRec.DtStop);

                // Stop date should not before Start Date
                if (chgDStop <= chgDStart) {
                        changeIsValid = false;
                } else {
                    // make sure date values don't overlap with other market rate dates
                    for(var i in g.records) {
                        var rec = g.records[i];
                        if (rec.recid === chgRec.recid) { // if same record then continue to next one
                            continue;
                        }

                        var rDStart = new Date(rec.DtStart),
                            rDStop = new Date(rec.DtStop);

                        // return if changed record startDate falls in other MR time span
                        if (rDStart < chgDStart && chgDStart < rDStop) {
                            changeIsValid = false;
                        } else if(rDStart < chgDStop && chgDStop < rDStop) {
                            changeIsValid = false;
                        } else if(chgDStart < rDStart && rDStop < chgDStop) {
                            changeIsValid = false;
                        }
                    }
                }
            }

            if(changeIsValid) {
                // if everything is ok, then mark this as false
                event.isCancelled = false;
            } else {
                event.isCancelled = true;
            }

            event.onComplete = function() {
                if (!event.isCancelled) { // if event not cancelled then invoke save method
                    // save automatically locally
                    this.save();
                }
            };
        }
    });
};

window.setRTLayout = function (BID, RTID) {
    var rtF = w2ui.rtForm,
        rtG = w2ui.rtGrid,
        rmrG = w2ui.rmrGrid;

    // set the url for rtForm
    rtF.url = '/v1/rt/' + BID + '/' + RTID;

    // load bottom panels with action buttons panel
    w2ui.rtDetailLayout.content("bottom", w2ui.rtFormBtns);

    // if form has tabs then click the first one
    if (typeof rtF.tabs.name == "string") {
        rtF.tabs.click('tab1');
    }

    // mark this flag as is this new record
    app.new_form_rec = RTID ? true : false;

    // as new content will be loaded for this form
    // mark form dirty flag as false
    app.form_is_dirty = false;

    if (RTID) {
        // if RentableType available then load the market rate grid
        rmrG.load('/v1/rmr/' + BID + '/' + RTID);

        // change the text of form tab
        w2ui.rtDetailLayout.get("main").tabs.get("rtForm").text = "Rentable Type Details ({0})".format(RTID);
        w2ui.rtDetailLayout.get("main").tabs.refresh();

        // load form content from server
        rtF.request(function(event) {
            if (event.status === "success") {
                // only render the toplayout after server has sent down data
                // so that w2ui can bind values with field's html control,
                // otherwise it is unable to find html controls
                showForm();
                return true;
            }
            else {
                showForm();
                rtF.message("Could not get form data from server...!!");
                return false;
            }
        });
    }
    else {
        // if new RentableType then clear the marketRate grid content first
        rmrG.clear();

        // change the text of form tab
        w2ui.rtDetailLayout.get("main").tabs.get("rtForm").text = "Rentable Type Details ({0})".format("new");
        w2ui.rtDetailLayout.get("main").tabs.refresh();

        // unselect the previous selected row
        var sel_recid = parseInt(rtG.last.sel_recid);
        if (sel_recid > -1) {
            // if new record is being added then unselect {{the selected record}} from the grid
            rtG.unselect(rtG.last.sel_recid);
        }

        showForm();
        return true;
    }

    function showForm() {
        // SHOW the right panel now
        w2ui.toplayout.content('right', w2ui.rtDetailLayout);
        w2ui.toplayout.sizeTo('right', 700);
        // w2ui.rtDetailLayout.render();
        w2ui.rtDetailLayout.get("main").tabs.click("rtForm");
        w2ui.toplayout.show('right', true);
    }
};
/*global
    app, w2ui, $, form_dirty_alert, jQuery, console, w2popup, number_format, getFullName, getTCIDName, finishReportCSV,
    finishReportPDF, UpdateCloseInfo
*/

"use strict";
// ---------------------------------------------------------------------------------
// String format: https://gist.github.com/tbranyen/1049426 (if want to format object, array as well)
// Reference: https://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format
// ---------------------------------------------------------------------------------
// > "{0} is awesome {1}".format("javascript", "!?")
// > "javascript is awesome !?"
// ---------------------------------------------------------------------------------
String.prototype.format = function() {
    var args = arguments;
    return this.replace(/{(\d+)}/g, function(match, number) {
        return typeof args[number] != 'undefined'? args[number] : match;
    });
};

//---------------------------------------------------------------------------------
// getCookieValue - looks for a cookie with the supplied name. If found it returns
//          the cookie value. Otherwise it returns null
//
// @params  name  - name of the cookie
// @returns the value of the cookie if found, null if not found
//---------------------------------------------------------------------------------
window.getCookieValue = function (name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(';');
    for(var i=0;i < ca.length;i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1,c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length,c.length);
    }
    return null;
};

//---------------------------------------------------------------------------------
// deleteCookie - looks for a cookie with the supplied name. If found it returns
//          the cookie value. Otherwise it returns null
//
// @params  name  - name of the cookie
// @returns nothing at this time
//---------------------------------------------------------------------------------
window.deleteCookie = function (name) {
  document.cookie = name +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
};

//---------------------------------------------------------------------------------
// ChangeBusiness updates the UI to the newly selected business.
// This routine is indeed used, in spite of what JSHint thinks. It
// is embedded in a string defining the OnClick handler for a button
// in the main toolbar.
// ---------------------------------------------------------------------------------
window.ChangeBusiness = function () {
    var bizName = $("select[name=BusinessSelect]").find(":selected").attr("name"),
        bizVal = $("select[name=BusinessSelect]").val();

    // if same business value then nothing to do
    if (bizName === app.last.BUD) {
        return;
    }

    w2ui.toplayout.content('main', ' ');
    w2ui.toplayout.hide('right',true);
    var s = w2ui.sidebarL1;
    var sel = s.selected;
    if (sel !== null) {
        s.unselect(sel);
    }

    var no_callBack = function() {
        // revert back to last one
        $("select[name=BusinessSelect] option[value="+app.last.BID+"]").prop("selected", true);
        return false;
    },
    yes_callBack = function() {
        w2ui.toplayout.content('main', ' ');
        w2ui.toplayout.hide('right',true);
        var s = w2ui.sidebarL1;
        var sel = s.selected;
        if (sel !== null) {
            s.unselect(sel);
        }
        w2ui.reportslayout.load('main','/webclient/html/blank.html');
        app.last.report = '';

        // check EDI mode for this business and set app.D2 accordingly
        // get last selected biz flags
        var d2 = dateFromString(app.D2);
        var lastBizEDIEnabled = EDIEnabledForBUD(app.last.BUD);
        var selBizEDIEnabled = EDIEnabledForBUD(bizName);

        // -> if EDI enabled for both then nothing to do
        // -> if EDI disabled for both then nothing to do
        // -> if EDI enabled for last and not for selected one then add one day in app.D2
        if (lastBizEDIEnabled && !selBizEDIEnabled) {
            d2.setDate(d2.getDate() + 1);
            app.D2 = dateControlString(d2);
        }
        // -> if EDI not enabled for last one and enabled for selected one then subtract one day in app.D2
        if (!lastBizEDIEnabled && selBizEDIEnabled) {
            d2.setDate(d2.getDate() - 1);
            app.D2 = dateControlString(d2);
        }

        app.last.BUD = bizName;
        app.last.BID = bizVal;

        s.collapse('reports');
        return true;
    };

    // warn user if active form has been changed
    form_dirty_alert(yes_callBack, no_callBack);
};

//---------------------------------------------------------------------------------
// getGridReversalSymbolHTML - returns the HTML to insert into a grid cell to
//          indicate that the record is reversed
//
// @params  <none>
// @returns a string with HTML
//---------------------------------------------------------------------------------
window.getGridReversalSymbolHTML = function () {
    return '<i class="fas fa-exclamation-triangle" title="reversed" aria-hidden="true" style="color: #FFA500;"></i>';
};

//---------------------------------------------------------------------------------
// get2XReversalSymbolHTML - returns the HTML to insert into a grid cell to
//          indicate that the record is reversed
//
// @params  <none>
// @returns a string with HTML
//---------------------------------------------------------------------------------
window.get2XReversalSymbolHTML = function () {
    return "<div class='reverseIconContainer'><i class='fas fa-exclamation-triangle fa-2x reverseIcon' aria-hidden='true'></i></div>";
};

//---------------------------------------------------------------------------------
// switchToGrid - changes the main view of the program to a grid with
//                variable name svc + 'Grid'
//
// @params  svc = prefix of grid name
//          svcOverride = name of webservice to call if the name does not
//                match the name of the svc
//
//---------------------------------------------------------------------------------
window.switchToGrid = function (svc, svcOverride) {
    var grid = svc + 'Grid'; // this builds the name of the w2ui grid we want
    var x = getCurrentBusiness();
    var websvc = svc;
    if (typeof svcOverride === "string") {
        websvc = svcOverride;
        if (svcOverride === "flow") {
            UpdateCloseInfo(x.value);
        }
    }
    var url = '/v1/' + websvc + '/';
    if (svc != 'business') {
        url += x.value;
    }
    w2ui[grid].url = url;
    w2ui[grid].last.sel_recid = null; // whenever switch grid, erase last selected record
    app.last.grid_sel_recid = -1;
    app.active_grid = grid; // mark active grid in app.active_grid
    w2ui.toplayout.content('main', w2ui[grid]);
    w2ui.toplayout.hide('right',true);
};

//---------------------------------------------------------------------------------
// opeinInNewTab simply opens a new tab in the browser and load the provided url
//---------------------------------------------------------------------------------
window.openInNewTab = function (url) {
    var win = window.open(url, '_blank');
    win.focus();
};

//-----------------------------------------------------------------------------
// GridMoneyFormat  - format comma-delimited money amount.
// @params  x   - value to be formatted
// @return  HTML string for the amount, suitable for render in w2ui grid cells
//-----------------------------------------------------------------------------
window.GridMoneyFormat = function (x) {
    var h = '';
    if (x !== 0) {
        h = '$ ' + number_format(x,2);
    }
    return h;
};

//-----------------------------------------------------------------------------
// getBIDfromBUD  - given the BUD return the associated BID. Returns
//                  undefined if BUD is not found
// @params  BUD   - the BUD for the business of interest
// @return  the BID (or `undefined` if not found)
//-----------------------------------------------------------------------------
window.getBIDfromBUD = function (BUD) {
    var BID;
    for (var i=0; i<app.BizMap.length; i++) {
        if (BUD == app.BizMap[i].BUD) {
            BID = app.BizMap[i].BID;
        }
    }
    return BID;
};

//-----------------------------------------------------------------------------
// getDepMeth     - searches BUD's Deposit Methods for id.  If found the
//                  then Deposit Method object is returned, otherwise an
//                  empty object is returned.
// @params  BUD   - the BUD for the business of interest
//          id - the Deposit Method id for which we want the name
// @return  the Deposit Method (or empty object if not found)
//-----------------------------------------------------------------------------
window.getDepMeth = function (BUD, id) {
    var dpm = {};
    if (typeof BUD === "undefined") {
        return dpm;
    }
    if (typeof app.depmeth[BUD].length == "undefined") { return; }
    for (var i = 0; i < app.depmeth[BUD].length; i++) {
        if (app.depmeth[BUD][i].id == id) {
            dpm = { id: id, text: app.depmeth[BUD][i].text };
            return dpm;
        }
    }
    return dpm;
};

//-----------------------------------------------------------------------------
// getDepository - searches BUD's Depositories for id.  If found the
//                 then Depository object is returned, otherwise an
//                 empty object is returned.
// @params  BUD  - the BUD for the business of interest
//          id   - the Depository id for which we want the name
// @return  the Depository (or empty object if not found)
//-----------------------------------------------------------------------------
window.getDepository = function (BUD, id) {
    var val = {};
    if (typeof BUD === "undefined") {
        return val;
    }
    if (typeof app.Depositories[BUD] !== "object") {
        return val;
    }
    for (var i = 0; i < app.Depositories[BUD].length; i++) {
        if (app.Depositories[BUD][i].id == id) {
            val = { id: id, text: app.Depositories[BUD][i].text };
            return val;
        }
    }
    return val;
};

//-----------------------------------------------------------------------------
// buildPaymentTypeSelectList - creates a list suitable for a dropdown menu
//                  with the payment types for the supplied BUD
// @params  BUD   - the BUD for the business of interest
// @return  the list of Payment Type Names (or empty list if BUD not found)
//-----------------------------------------------------------------------------
window.buildPaymentTypeSelectList = function (BUD) {

    var options = [{id:0, text: " -- Select Payment Type -- "}];
    if (typeof BUD == "undefined") {
        return options;
    }
    app.pmtTypes[BUD].forEach(function(pt) {
        options.push({ id: pt.PMTID, text: pt.Name });
    });
    return options;
};

//-----------------------------------------------------------------------------
// getCurrentBusiness - return the Business Unit currently slected in the
//                      main toolbar
// @params
// @return  the HTML elements of the currently selected business
//-----------------------------------------------------------------------------
window.getCurrentBusiness = function () {
    var x = document.getElementsByName("BusinessSelect");
    return x[0];
};

//-----------------------------------------------------------------------------
// getCurrentBID - return the BID for selected Business Unit currently in the
//                 main toolbar
// @params
// @return  - the BID of the currently selected business | "-1" if not exists
//-----------------------------------------------------------------------------
window.getCurrentBID = function () {
    var x = document.getElementsByName("BusinessSelect");
    if (x.length > 0) {
        return parseInt(x[0].value);
    }
    return -1;
};

//-----------------------------------------------------------------------------
// getBUDfromBID  - given the BID return the associated BUD. Returns
//                  an empty string if BID is not found
// @params  BUD   - the BUD for the business of interest
//          PMTID - the payment type id for which we want the name
// @return  the BUD (or empty string if not found)
//-----------------------------------------------------------------------------
window.getBUDfromBID = function (BID) {
    //
    var BUD = '';
    for (var i=0; i<app.BizMap.length; i++) {
        if (BID == app.BizMap[i].BID) {
            BUD = app.BizMap[i].BUD;
        }
    }
    return BUD;
};

//-----------------------------------------------------------------------------
// setToForm -  enable form sform in toplayout.  Also, set the forms url and
//              request data from the server
// @params
//   sform   = name of the form
//   url     = request URL for the form
//   [width] = optional, if specified it is the width of the form
//   doRequest =
//-----------------------------------------------------------------------------
window.setToForm = function (sform, url, width, doRequest) {
    // if not url defined then return
    var url_len=url.length > 0;
    if (!url_len) {
        return false;
    }

    // if form not found then return
    var f = w2ui[sform];
    if (!f) {
        return false;
    }

    // if current grid not found then return
    var g = w2ui[app.active_grid];
    if (!g) {
        return false;
    }

    // if doRequest is defined then take false as default one
    if (!doRequest) {
        doRequest = false;
    }

    if (url.length > 0 ) {
        f.url = url;
    }
    if (typeof f.tabs.name == "string") {
        f.tabs.click('tab1');
    }

    // mark this flag as is this new record
    app.new_form_rec = !doRequest;

    // as new content will be loaded for this form
    // mark form dirty flag as false
    app.form_is_dirty = false;

    var right_panel_content = w2ui.toplayout.get("right").content;

    // internal function
    var showForm = function() {
        // if the same content is there, then no need to render toplayout again
        if (f !== right_panel_content) {
            w2ui.toplayout.content('right', f);
            w2ui.toplayout.sizeTo('right', width);
            w2ui.toplayout.render();
        }
        else{
            // if same form is there then just refresh the form
            f.refresh();
        }
        // NOTE: remove any error tags bound to field from previous form
        $().w2tag();
        // SHOW the right panel now
        w2ui.toplayout.show('right', true);
    };

    if (doRequest) {
        f.request(function(event) {
            if (event.status === "success") {
                // only render the toplayout after server has sent down data
                // so that w2ui can bind values with field's html control,
                // otherwise it is unable to find html controls
                showForm();
                return true;
            }
            else {
                showForm();
                f.message("Could not get form data from server...!!");
                return false;
            }
        });
    } else {
        var sel_recid = parseInt(g.last.sel_recid);
        if (sel_recid > -1) {
            // if new record is being added then unselect {{the selected record}} from the grid
            g.unselect(g.last.sel_recid);
        }
        showForm();
        return true;
    }
};

//-----------------------------------------------------------------------------
// ridRentablePickerRender - renders a name during typedown.
// @params
//   item = an object with RentableName
// @return - true if the names match, false otherwise
//-----------------------------------------------------------------------------
window.ridRentablePickerRender = function (item) {
    w2ui.ridRentablePicker.record.RID = item.recid;
    return item.RentableName + '  (RID: ' + item.recid + ')';
};

//-----------------------------------------------------------------------------
// asmFormRentablePickerRender - renders a name during typedown.
// @params
//   item = Object with RentableName
// @return - true if the names match, false otherwise
//-----------------------------------------------------------------------------
window.asmFormRentablePickerRender = function (item) {
    w2ui.asmEpochForm.record.RID = item.recid;
    return item.RentableName + '  (RID: ' + item.recid + ')';
};

//-----------------------------------------------------------------------------
// ridRentableDropRender - renders a name during typedown.
// @params
//   item = an object with RentableName
// @return - the name to render
//-----------------------------------------------------------------------------
window.ridRentableDropRender = function (item) {
    return item.RentableName + '  (RID: ' + item.recid + ')';
};

//-----------------------------------------------------------------------------
// ridRentableCompare - Compare two items to see if they match
// @params
//   item = an object assumed to have a RentableName
// @return - true if the names match, false otherwise
//-----------------------------------------------------------------------------
window.ridRentableCompare = function (item, search) {
    var s = item.RentableName.toLowerCase();
    return s.includes(search.toLowerCase());
};

//-----------------------------------------------------------------------------
// tcidRAPayorPickerRender - renders a name during typedown.
// @params
//   item = an object assumed to have a FirstName and LastName
// @return - true if the names match, false otherwise
//-----------------------------------------------------------------------------
window.tcidRAPayorPickerRender = function (item) {

    var s="";
    if (item.IsCompany) {
        s = item.CompanyName;
    } else {
        s = item.FirstName + ' ' + item.LastName;
    }
    w2ui.tcidRAPayorPicker.record = {
        TCID: item.TCID,
        pickedName: s,
        DtStart: w2ui.tcidRAPayorPicker.record.DtStart,
        DtStop: w2ui.tcidRAPayorPicker.record.DtStop,
        FirstName: item.FirstName,
        LastName: item.LastName,
        IsCompany: item.IsCompany,
        CompanyName: item.CompanyName
    };
    return s;
};

//-----------------------------------------------------------------------------
// getFullName - returns a string with the full name based on the item supplied.
// @params
//   item = an object assumed to have a FirstName, MiddleName, and LastName
// @return - the full name concatenated together
//-----------------------------------------------------------------------------
window.getFullName = function (item) {

    var s = item.FirstName;
    if (item.MiddleName.length > 0) { s += ' ' + item.MiddleName; }
    if (item.LastName.length > 0 ) { s += ' ' + item.LastName; }
    return s;
};

//-----------------------------------------------------------------------------
// getTCIDName - returns an appropriate name for the supplied item. If
//          the item is a person, then the person's full name is returned.
//          If the item is a company, then the company name is returned.
// @params
//   item = an object assumed to have a FirstName, MiddleName, LastName,
//          IsCompany, and CompanyName.
// @return - the name to render
//-----------------------------------------------------------------------------
window.getTCIDName = function (item) {

    var s = (item.IsCompany) ? item.CompanyName : getFullName(item);

    if (item.TCID > 0) {
        s += ' (TCID: '+ String(item.TCID);
        if (typeof item.RAID == "number") {
            s += ', RAID: ' + item.RAID;
        }
        s += ')';
    }
    return s;
};

//-----------------------------------------------------------------------------
// tcidPickerCompare - Compare item to the search string. Verify that the
//          supplied search string can be found in item
// @params
//   item = an object assumed to have a FirstName and LastName
// @return - true if the search string is found, false otherwise
//-----------------------------------------------------------------------------
window.tcidPickerCompare = function (item, search) {

    var s = getTCIDName(item);
    s = s.toLowerCase();
    var srch = search.toLowerCase();
    var match = (s.indexOf(srch) >= 0);
    return match;
};

//-----------------------------------------------------------------------------
// tcidPickerDropRender - renders a name during typedown.
// @params
//   item = an object assumed to have a FirstName and LastName
// @return - the name to render
//-----------------------------------------------------------------------------
window.tcidPickerDropRender = function (item) {

    return getTCIDName(item);
};

//-----------------------------------------------------------------------------
// tcidReceiptPayorPickerRender - renders a name during typedown in the
//          receiptForm. It also sets the TCID for the record.
// @params
//   item = an object assumed to have a FirstName and LastName
// @return - true if the names match, false otherwise
//-----------------------------------------------------------------------------
window.tcidReceiptPayorPickerRender = function (item) {

    var s = getTCIDName(item);
    w2ui.receiptForm.record.TCID = item.TCID;
    w2ui.receiptForm.record.Payor = s;
    return s;
};

//-----------------------------------------------------------------------------
// tcidRUserPickerRender - renders a name during typedown.
// @params
//   item = an object assumed to have a FirstName and LastName
// @return - true if the names match, false otherwise
//-----------------------------------------------------------------------------
window.tcidRUserPickerRender = function (item) {

    var s;
    if (item.IsCompany) {
        s = item.CompanyName;
    } else {
        s = item.FirstName + ' ' + item.LastName;
    }

    w2ui.tcidRUserPicker.record = {
        TCID: item.TCID,
        pickedName: s,
        DtStart: w2ui.tcidRUserPicker.record.DtStart,
        DtStop: w2ui.tcidRUserPicker.record.DtStop,
        FirstName: item.FirstName,
        LastName: item.LastName,
        IsCompany: item.IsCompany,
        CompanyName: item.CompanyName
    };
    return s;
};


//-----------------------------------------------------------------------------
// plural - return the plural of the provided word.  Totally simplistic at
//          this point, it just adds an 's'.  It will need serious updates
//          going forward
// @params
//   s = the word to pluralize
// @return - the plural of word s
//-----------------------------------------------------------------------------
window.plural = function(s) {

    return s + 's';
};

//-----------------------------------------------------------------------------
// calcRarGridContractRent
//          - Sum the Contract Rent column of rarGrid and return the total.
//            used to set the control.
// @params
//          grid - The grid to work on
// @return  The total of the column
//-----------------------------------------------------------------------------
window.calcRarGridContractRent = function (grid) {

    grid = w2ui.rarGrid || grid;
    var chgs = grid.getChanges();
    var amts = [];
    //
    // Build up a list of amounts...
    //
    for (var i = 0; i < grid.records.length; i++) {
        if (typeof grid.records[i].ContractRent == "number") {
            amts.push({ recid: grid.records[i].recid, ContractRent: grid.records[i].ContractRent });
        }
    }
    //
    // Any changes override these ContractRents...
    //
    for (i = 0; i < chgs.length; i++) {
        if (typeof chgs[i].ContractRent == "number") {
            for (var j = 0; j < amts.length; j++) {
                if (chgs[i].recid == amts[j].recid) {
                    amts[j] = { recid: chgs[i].recid, ContractRent: chgs[i].ContractRent };
                    break;
                }
            }
        }
    }
    // now total everything...
    var total = 0.0;
    for (i = 0; i < amts.length; i++) {
        total += amts[i].ContractRent;
    }
    grid.set('s-1', { ContractRent: total });
};

//-----------------------------------------------------------------------------
// getAccountsList - return the GLAccounts list with respect of BUD
// @params
// @return the list of accounts
//-----------------------------------------------------------------------------
window.getAccountsList = function (BID) {

    return jQuery.ajax({
        type: "GET",
        url: "/v1/accountlist/"+BID,
        dataType: "json",
    }).done(function(data) {
        if (data.status == "success") {
            var BUD = getBUDfromBID(BID);
            if (data.records) {
                app.gl_accounts[BUD] = data.records;
            } else{
                app.gl_accounts[BUD] = [];
            }
        }
    });
};

//-----------------------------------------------------------------------------
// getPostAccounts - return the list of post accounts with respect of BUD
// @params
// @return the list of post accounts
//-----------------------------------------------------------------------------
window.getPostAccounts = function (BID) {

    return jQuery.ajax({
        type: "GET",
        url: "/v1/postaccounts/"+BID,
        dataType: "json",
    }).done(function(data) {
        if (data.status == "success") {
            var BUD = getBUDfromBID(BID);
            if (data.records) {
                app.post_accounts[BUD] = data.records;
            } else{
                app.post_accounts[BUD] = [];
            }
        }
    });
};

//-----------------------------------------------------------------------------
// getParentAccounts - return the list of Parent accounts with respect of BUD
// @params
//      - BID: current Business ID
//      - delLID: account id which needs to be substracted from the return list
// @return the list of parent accounts excluding delLID (current account ID from accountForm)
//-----------------------------------------------------------------------------
window.getParentAccounts = function (BID, delLID) {

    return jQuery.ajax({
        type: "GET",
        url: "/v1/parentaccounts/"+BID,
        dataType: "json",
    }).done(function(data) {
        if (data.status == "success") {
            var BUD = getBUDfromBID(BID);
            if (data.records) {
                var dft = {id: 0, text: ' -- No Parent LID -- '};
                var temp = [];
                data.records.forEach(function(item) {
                    if (item.id != delLID) {
                        temp.push(item);
                    }
                });
                // we don't need to exclude the default one from the list
                temp.unshift(dft);
                app.parent_accounts[BUD] = temp;
            } else{
                app.parent_accounts[BUD] = [];
            }
        }
    });
};


//-----------------------------------------------------------------------------
// int_to_bool converts int to bool.
// @params
//   i = integer to convert
// @return
//   boolean:  returns false if i == 0
//             otherwise it returns true
// This method needed to convert 1/0 value back to bool
// source: https://github.com/vitmalina/w2ui/blob/master/src/w2form.js#L368
//-----------------------------------------------------------------------------
window.int_to_bool = function (i){
    if (i>0) {
        return true;
    } else {
        return false;
    }
};


//-----------------------------------------------------------------------------
// getFormSubmitData - get form submit data
// @params, w2ui form record object
//          returnClone = true/false
// @return
// @description Helps to build form submit data, it modify record object so that each
// item in record has just a value instead of another object
//-----------------------------------------------------------------------------
window.getFormSubmitData = function (record, returnClone) {
    // check that it is typeof object or not
    if (typeof record !== "object") {
        return;
    }

    var cloneData = $.extend(true, {}, record);

    // iterate over each record
    for(var key in cloneData) {
        if (typeof cloneData[key] === "object" && cloneData[key] !== null && "id" in cloneData[key]) {
            cloneData[key] = cloneData[key].id;
        }
    }

    // if returnClone is not passed or false then
    // override cloned data into record
    if (!returnClone) {
        $.extend(record, cloneData);
        return record;
    }

    return cloneData;
};

//-----------------------------------------------------------------------------
// formRefreshCallBack -  callBack for form refresh event
// need to take several actions on refresh complete event
// @params
//   w2form   = w2form object
//   is_new     = true / false
//   id_name  = form's primary Id
//   form_header = header (title) of form
//-----------------------------------------------------------------------------
window.formRefreshCallBack = function (w2frm, primary_id, form_header, disable_header) {

    var record = w2frm.record;

    // mark active things of form
    app.active_form = w2frm.name;

    // keep active form original record
    app.active_form_original = $.extend(true, {}, record);

    var header = "";
    if (form_header) { // if form_header passed then

        var id = record[primary_id];

        // id should be defined
        if (id === undefined) {
            console.log("given id_name '{0}' does not exist in form's '{1}' record".format(primary_id, w2frm.name));
            return false;
        }

        // if new record then disable delete button
        // and format the equivalent header
        if (id > 0) {
            header = form_header.format(id);
            $(w2frm.box).find("button[name=delete]").removeClass("hidden");
            $(w2frm.box).find("button[name=reverse]").removeClass("hidden");
        } else {
            header = form_header.format("new");
            $(w2frm.box).find("button[name=delete]").addClass("hidden");
            $(w2frm.box).find("button[name=reverse]").addClass("hidden");
        }
    }

    if (typeof disable_header !== "undefined") {
        if (!disable_header) {
            w2frm.header = header;
        }
    }
};


window.number_format = function (number, decimals, dec_point, thousands_sep) {
    // http://kevin.vanzonneveld.net
    // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +     bugfix by: Michael White (http://getsprink.com)
    // +     bugfix by: Benjamin Lupton
    // +     bugfix by: Allan Jensen (http://www.winternet.no)
    // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
    // +     bugfix by: Howard Yeend
    // +    revised by: Luke Smith (http://lucassmith.name)
    // +     bugfix by: Diogo Resende
    // +     bugfix by: Rival
    // +      input by: Kheang Hok Chin (http://www.distantia.ca/)
    // +   improved by: davook
    // +   improved by: Brett Zamir (http://brett-zamir.me)
    // +      input by: Jay Klehr
    // +   improved by: Brett Zamir (http://brett-zamir.me)
    // +      input by: Amir Habibi (http://www.residence-mixte.com/)
    // +     bugfix by: Brett Zamir (http://brett-zamir.me)
    // +   improved by: Theriault
    // +   improved by: Drew Noakes
    // *     example 1: number_format(1234.56);
    // *     returns 1: '1,235'
    // *     example 2: number_format(1234.56, 2, ',', ' ');
    // *     returns 2: '1 234,56'
    // *     example 3: number_format(1234.5678, 2, '.', '');
    // *     returns 3: '1234.57'
    // *     example 4: number_format(67, 2, ',', '.');
    // *     returns 4: '67,00'
    // *     example 5: number_format(1000);
    // *     returns 5: '1,000'
    // *     example 6: number_format(67.311, 2);
    // *     returns 6: '67.31'
    // *     example 7: number_format(1000.55, 1);
    // *     returns 7: '1,000.6'
    // *     example 8: number_format(67000, 5, ',', '.');
    // *     returns 8: '67.000,00000'
    // *     example 9: number_format(0.9, 0);
    // *     returns 9: '1'
    // *    example 10: number_format('1.20', 2);
    // *    returns 10: '1.20'
    // *    example 11: number_format('1.20', 4);
    // *    returns 11: '1.2000'
    // *    example 12: number_format('1.2000', 3);
    // *    returns 12: '1.200'
    var n = !isFinite(+number) ? 0 : +number,
        prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
        sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
        dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
        toFixedFix = function (n, prec) {
            // Fix for IE parseFloat(0.55).toFixed(0) = 0;
            var k = Math.pow(10, prec);
            return Math.round(n * k) / k;
        },
        s = (prec ? toFixedFix(n, prec) : Math.round(n)).toString().split('.');
    if (s[0].length > 3) {
        s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
    }
    if ((s[1] || '').length < prec) {
        s[1] = s[1] || '';
        s[1] += new Array(prec - s[1].length + 1).join('0');
    }
    return s.join(dec);
};

// var exampleNumber = 1;
// function test(expected, number, decimals, dec_point, thousands_sep)
// {
//     var actual = number_format(number, decimals, dec_point, thousands_sep);
//     var result = document.createElement('div');
//     if (actual !== expected)
//     {
//         debugger;
//         result.textContent =
//             'Test case ' + exampleNumber + ' failed. ' +
//             'Expected "' + expected + '" but got "' + actual + '"';
//     } else {
//         result.textContent = 'Test case ' + exampleNumber + ' passed.'
//     }
//     document.getElementById('container').appendChild(result);
//     exampleNumber++;
// }

// test('1,235',    1234.56);
// test('1 234,56', 1234.56, 2, ',', ' ');
// test('1234.57',  1234.5678, 2, '.', '');
// test('67,00',    67, 2, ',', '.');
// test('1,000',    1000);
// test('67.31',    67.311, 2);
// test('1,000.6',  1000.55, 1);
// test('67.000,00000', 67000, 5, ',', '.');
// test('1',        0.9, 0);
// test('1.20',     '1.20', 2);
// test('1.2000',   '1.20', 4);
// test('1.200',    '1.2000', 3);


//-----------------------------------------------------------------------------
// Save last form value entered as default for next form record
//
// @params
//   formFields         : array of form fields which needs to be reset, other fields are kept same as previous form record
//                        if array is empty then new form record will be same as previous form record
//                        if array is ['*'] then  new form record will be same as default(reset) form record
//   defaultFormRecord  : Object
//   previousFormRecord : Object
// @returns
//   defaultFormRecord  : Object
//-----------------------------------------------------------------------------
window.setDefaultFormFieldAsPreviousRecord = function (formFields, defaultFormRecord, previousFormRecord) {
    if (formFields.length === 0) {
        return previousFormRecord;
    }
    if (formFields[0] === '*') {
        return defaultFormRecord;
    }
    for ( var i = 0; i < formFields.length; i++) {
        previousFormRecord[formFields[i]] = defaultFormRecord[formFields[i]];
    }
    return previousFormRecord;
};

//-------------------------------------------------------------------------------
// Download the CSV report for given report name, date range
//
// @params
//   rptname    : report name to be downloaded
//   dtStart    : Start Date
//   dtStop     : Stop Date
//   returnURL  : it true then returns the url otherwise
//                downloads the report from built url in separate window
//   id         : id for the report to detail
//-------------------------------------------------------------------------------
window.exportItemReportCSV = function (rptname,id,dtStart,dtStop,returnURL) {
    var BID = getCurrentBID();
    var BUD = getBUDfromBID(BID);
    var bizEDIEnabled = EDIEnabledForBUD(BUD);
    var edi = bizEDIEnabled ? 1 : 0;

    var url = '/v1/report/' + String(BID) + '/' + id + '?r=' + rptname + '&edi=' + String(edi);
    if (returnURL) {
        return finishReportCSV(url,rptname, dtStart, dtStop, returnURL);
    }
    finishReportCSV(url,rptname, dtStart, dtStop, returnURL);
};

//-------------------------------------------------------------------------------
// Download the CSV report for given report name, date range
//
// @params
//   rptname   : report name to be downloaded
//   dtStart   : Start Date
//   dtStop    : Stop Date
//   returnURL : it true then returns the url otherwise
//               downloads the report from built url in separate window
//-------------------------------------------------------------------------------
window.exportReportCSV = function (rptname, dtStart, dtStop, returnURL){
    if (rptname === '') {
        return;
    }

    var BID = getCurrentBID();
    var BUD = getBUDfromBID(BID);
    var bizEDIEnabled = EDIEnabledForBUD(BUD);
    var edi = bizEDIEnabled ? 1 : 0;

    var url = '/v1/report/' + String(BID) + '?r=' + rptname + '&edi=' + String(edi);

    if (returnURL) { // if retrunURL is set then we need to return it
        return finishReportCSV(url,rptname, dtStart, dtStop, returnURL);
    }
    finishReportCSV(url,rptname, dtStart, dtStop, returnURL);
};

window.finishReportCSV = function (url,rptname, dtStart, dtStop, returnURL) {
    // if both dates are available then only append dtstart and dtstop in query params
    if (dtStart && dtStop) {
        url += '&dtstart=' + dtStart; // StartDate
        url += '&dtstop=' + dtStop; // stopDate
    }

    // now append the report output format
    url += '&rof=' + app.rof.csv;
    console.log('url = ' + url);

    // open separate window if returnURL is not true
    if (returnURL) {
        return url;
    } else {
        downloadMediaFromURL(url);
    }
};

//-------------------------------------------------------------------------------
// Pops up dialog to get custom width and height from user's input
//-------------------------------------------------------------------------------
window.popupPDFCustomDimensions = function () {
    w2popup.open({
        title     : 'PDF custom width and height',
        body      : '<div class="w2ui-centered">' +
            '<div class="w2ui-field"><label>Page Width (inch): </label><div><input type="text" name="custom_pdf_width" class="w2ui-input" value="'+app.pdfPageWidth+'" /></div></div>' +
            '<div class="w2ui-field"><label>Page Height (inch): </label><div><input type="text" name="custom_pdf_height"  class="w2ui-input" value="'+app.pdfPageHeight+'" /></div></div>' +
            '</div>',
        buttons   : '<button class="w2ui-btn" onclick="w2popup.close();">Close</button> '+
                    '<button class="w2ui-btn" onclick="saveCustomDims();" >Save</button>',
        width     : 500,
        height    : 200,
        overflow  : 'hidden',
        color     : '#333',
        speed     : '0.3',
        opacity   : '0.5',
        modal     : true,
        showClose : true,
    });
};

//-------------------------------------------------------------------------------
// Remembers custom dimensions set up by user locally in app variable
//-------------------------------------------------------------------------------
window.saveCustomDims = function () {
    var width = parseFloat($("input[name='custom_pdf_width']").val());
    if (!isNaN(width)) {
        app.pdfPageWidth = width;
    }
    var height = parseFloat($("input[name='custom_pdf_height']").val());
    if (!isNaN(height)) {
        app.pdfPageHeight = height;
    }
    w2popup.close();
};

//-------------------------------------------------------------------------------
// Download the PDF report for given id-focused report, date range
//
// @params
//   rptname            : report name to be downloaded
//   id                 : id of item on which report should focus
//   dtStart            : Start Date
//   dtStop             : Stop Date
//   returnURL          : it true then returns the url otherwise
//                        downloads the report from built url in separate window
//-------------------------------------------------------------------------------
window.exportItemReportPDF = function (rptname,id, dtStart, dtStop, returnURL){
    if (rptname === '') {
        return;
    }
    var BID = getCurrentBID();
    var BUD = getBUDfromBID(BID);
    var bizEDIEnabled = EDIEnabledForBUD(BUD);
    var edi = bizEDIEnabled ? 1 : 0;

    var url = '/v1/report/' + String(BID) + '/' + id + '?r=' + rptname + '&edi=' + String(edi);
    if (returnURL) {
        return finishReportPDF(url,rptname, dtStart, dtStop, returnURL);
    }
    finishReportPDF(url,rptname, dtStart, dtStop, returnURL);
};

//-------------------------------------------------------------------------------
// Download the PDF report for given report name, date range
//
// @params
//   rptname            : report name to be downloaded
//   dtStart            : Start Date
//   dtStop             : Stop Date
//   returnURL          : it true then returns the url otherwise
//                        downloads the report from built url in separate window
//-------------------------------------------------------------------------------
window.exportReportPDF = function (rptname, dtStart, dtStop, returnURL){
    if (rptname === '') {
        return;
    }

    var BID = getCurrentBID();
    var BUD = getBUDfromBID(BID);
    var bizEDIEnabled = EDIEnabledForBUD(BUD);
    var edi = bizEDIEnabled ? 1 : 0;

    var url = '/v1/report/' + String(BID) + '?r=' + rptname + '&edi=' + String(edi);
    if (returnURL) { // if retrunURL is set then we need to return it
        return finishReportPDF(url,rptname, dtStart, dtStop, returnURL);
    }
    finishReportPDF(url,rptname, dtStart, dtStop, returnURL);
};

window.finishReportPDF = function (url,rptname, dtStart, dtStop, returnURL) {
    // if both dates are available then only append dtstart and dtstop in query params
    if (dtStart && dtStop) {
        url += '&dtstart=' + dtStart; // StartDate
        url += '&dtstop=' + dtStop; // stopDate
    }

    // now append the report output format
    url += '&rof=' + app.rof.pdf;

    // need to pass page width and height
    url += '&pw=' + app.pdfPageWidth + "&ph=" + app.pdfPageHeight;
    console.log('url = ' + url);

    // open separate window if returnURL is not true
    if (returnURL) {
        return url;
    } else {
        downloadMediaFromURL(url);
    }
};

//-------------------------------------------------------------------------------
// Download the media using provided URL
//
// @params
//   url            : the url to download the media
//-------------------------------------------------------------------------------
window.downloadMediaFromURL = function (url) {
    var idown = $('#down_iframe');
    if (idown.length > 0) {
        idown.attr('src', url);
    } else {
        idown = $('<iframe>', { id: 'down_iframe', src: url }).hide().appendTo('body');
    }

    // reset the url after download after sometime
    setTimeout(function() {
        idown.attr('src', '');
    }, 1000);
};

//-------------------------------------------------------------------------------
// returns true/false tells whether EDI mode enabled for business BUD
//
// @params
//   BUD            : business designation
//-------------------------------------------------------------------------------
window.EDIEnabledForBUD = function(BUD) {
    if (app.bizFLAGS && app.bizFLAGS[BUD]) {
        return (app.bizFLAGS[BUD]&1) > 0;
    }
    return false;
};

//---------------------------------------------------------------------------------
// prepareW2UIStuff - it will prepare lists, items, other things which are
//                    required by w2ui objects. It will feed those in "w2ui"
//                    of app variable
//
// @params  app  - app variable of application
//---------------------------------------------------------------------------------
window.prepareW2UIStuff = function prepareW2UIStuff(app) {

    // cycle frequencies
    app.w2ui.listItems.cycleFreq = [];
    if (app.cycleFreq) {
        app.cycleFreq.forEach(function(freq, index) {
            app.w2ui.listItems.cycleFreq.push({ id: index, text: freq });
        });
    }

    // rental agreement states
    app.w2ui.listItems.RAStates = [];
    if (app.RAStates) {
        app.RAStates.forEach(function(freq, index) {
            app.w2ui.listItems.RAStates.push({ id: index, text: freq });
        });
    }

    // rental agreement action
    app.w2ui.listItems.RAActions = [];
    if (app.RAActions) {
        app.w2ui.listItems.RAActions.push({ id: -1, text: '--Select an Action--' });
        app.RAActions.forEach(function(freq, index) {
            app.w2ui.listItems.RAActions.push({ id: index, text: freq });
        });
    }
};

//-----------------------------------------------------------------------------
// reassignGridRecids -  will reassign the grid record's recid
//                       in case of record deleted within the grid
// @params
//   gridName = w2ui grid component name
//-----------------------------------------------------------------------------
window.reassignGridRecids = function(gridName) {
    app.last.grid_sel_recid = -1;

    if (gridName in w2ui) {
        var grid = w2ui[gridName];
        for (var j = 0; j < grid.records.length; j++) {
            grid.records[j].recid = j + 1;
        }
        // need to refresh the grid as it will assign new recid in DOM tr's attribute "recid"
        grid.refresh();
    }
};

// -------------------------------------------------------------------------------
// SetFormRecordFromData -  sets form record from given data
//
// It sets data from local raflow only for fields which are defined in form
// definition
// -------------------------------------------------------------------------------
window.SetFormRecordFromData = function(/*onlyRequired, */form, data) {
    var fields = form.fields || [];

    /*// if onlyRequired is true, then set data only on required fields
    if (onlyRequired) {
        fields = fields.filter(function(field) { return field.required; });
    }*/

    // for each field in form
    fields.forEach(function(fieldItem) {
        form.record[fieldItem.field] = data[fieldItem.field];
    });

    form.refresh();
};

// -------------------------------------------------------------------------------
// SetDataFromFormRecord -  sets data (passed by reference) field value
//                          from form record
//
// It sets data from form record only on those field which do exist in data
// -------------------------------------------------------------------------------
window.SetDataFromFormRecord = function(ID, /*onlyRequired,*/ form, data) {
    var fields = form.fields || [],
        formData = getFormSubmitData(form.record, true);

    /*// if onlyRequired is true, then only deal with required field defined in the form
    if (onlyRequired) {
        fields.forEach(function(fieldItem) {
            if ( !fieldItem.required && formData.hasOwnProperty(fieldItem.field) ) {
                delete formData[fieldItem.field];
            }
        });
    }*/

    // set data
    if (ID === 0) {
        data = formData;
    } else {
        fields.forEach(function(fieldItem) {
            if (data.hasOwnProperty(fieldItem.field)) {
                data[fieldItem.field] = formData[fieldItem.field];
            }
        });
    }

    return data;
};

/*global
    w2ui, app, console, $, plural, switchToGrid, showReport, form_dirty_alert, loginPopupOptions, getAboutInfo,
    switchToClosePeriod
*/
"use strict";


// buildSidebar creates the w2ui sidebar element for the Roller interface.
//
// INPUTS:
//  uitype - 0 means build the full roller interface
//           1 means build the Receipt-only interface
//----------------------------------------------------------------------------
window.buildSidebar = function(flag) {
    var sbdata;
    if (flag === 0) {
        sbdata = {
            name: 'sidebarL1',
            nodes: [
                { id: 'workflowreceipts', text: plural(app.sAssessment)+' / '+plural(app.sReceipt), img: 'icon-folder', expanded: true, group: true,
                    nodes: [
                            { id: 'asms',         text: 'Assess Charges',                icon: 'far fa-star',      hint: plural(app.sAssessment) },
                            { id: 'receipts',     text: 'Tendered Payment ' + app.sReceipt, icon: 'fas fa-star',        hint: plural(app.sReceipt) },
                            { id: 'expense',      text: plural(app.sExpense),            icon: 'fas fa-minus-circle',hint: plural(app.sExpense) },
                            { id: 'deposit',      text: 'Deposits',                      icon: 'fas fa-plus-circle', hint: 'Make Deposit' },
                            { id: 'allocfunds',   text: 'Apply '+plural(app.sReceipt),   icon: 'far fa-check-circle' },
                            // { id: 'gdssvcs',      text: 'Goods & Services',              icon: 'fas fa-coffee' },
                   ]
                },
                { id: 'rentagr', text: plural(app.sRentalAgreement), img: 'icon-folder', expanded: true, group: true,
                    nodes: [
                            { id: 'raflows',   text: plural(app.sRentalAgreement),          icon: 'fas fa-certificate', hint: 'Rental Agreements' },
                            { id: 'transactants', text: plural(app.sTransactant),        icon: 'fas fa-users' },
                            // { id: 'assignrnt',    text: 'Assign A ' + app.sRentable,     icon: 'far fa-check-square' },
                            // { id: 'movein',       text: app.sTransactant + ' Arrival',   icon: 'fas fa-sign-in-alt' },
                            // { id: 'moveout',      text: app.sTransactant + ' Departure', icon: 'fas fa-sign-out-alt' },
                            // { id: 'updatera',     text: 'Extend ' + app.sRentalAgreement,icon: 'fas fa-pencil-alt' },
                    ]
                },
                { id: 'collections', text: 'Collections', img: 'icon-folder', expanded: true, group: true,
                    nodes: [
                            { id: 'rr',           text: 'Rent Roll',                     icon: 'fas fa-chart-line',   hint: 'Rent Roll' },
                            { id: 'stmt',         text: 'RA Statements',                 icon: 'fas fa-clipboard', hint: 'Rental Agreement Statements' },
                            { id: 'payorstmt',    text: 'Payor Statements',              icon: 'far fa-clipboard', hint: 'Payor Statements' },
                            // { id: 'dlnq',         text: 'Delinquency Analysis',          icon: 'fas fa-chart-pie',   hint: 'Delinquency Analysis' },
                            // { id: 'prepnotice',   text: 'Prepare Notices',               icon: 'far fa-file-alt', hint: 'Prepare Notices' },
                    ]
                },
                { id: 'acct', text: 'Accounting', img: 'icon-folder', expanded: true, group: true,
                    nodes: [
                            { id: 'closePeriod', text: 'Close Period',                   icon: 'far fa-caret-square-down', hint: 'Close Period' },
                            { id: 'adjust',      text: 'Adjust Closed Period',           icon: 'fas fa-lock-open',         hint: 'Adjust Closed Period' },
                    ]
                },
                { id: 'facilities', text: 'Facilities Management', img: 'icon-folder', expanded: false, group: true,
                    nodes: [
                            { id: 'svcreq',      text: 'Create Service Request',         icon: 'far fa-square',         hint: 'Create Service Request' },
                            { id: 'svcreqcmp',   text: 'Complete Service Request',       icon: 'far fa-check-square',   hint: 'Complete Service Request' },
                            { id: 'housekpg',    text: 'Housekeeping',                   icon: 'fas fa-home',           hint: 'Housekeeping' },
                            { id: 'prvmaint',    text: 'Preventative Maintenance',       icon: 'fas fa-wrench',         hint: 'Preventative Maintenance' },
                            { id: 'invntory',    text: 'Inventory',                      icon: 'fas fa-shopping-cart',  hint: 'Preventative Maintenance' },
                    ]
                },
                { id: 'tasks', text: 'Tasks', img: 'icon-folder', expanded: true, group: true,
                    nodes: [
                            { id: 'tlds',       text: 'Task List Definitions',           icon: 'far fa-list-ul',        hint: 'Task List Definitions' },
                            { id: 'tls',        text: 'Task Lists',                      icon: 'fas fa-list-alt',       hint: 'Task Lists' },
                    ]
                },
                 { id: 'reports', text: 'Reports', img: 'icon-folder', expanded: false, group: true,
                    nodes: [
                           //{ id: 'RPTasmrpt',     text: 'Assessments',                     icon: 'far fa-file-alt' },
                           //{ id: 'RPTb',          text: 'Business Units',                  icon: 'far fa-file-alt' },
                           { id: 'RPTar',           text: 'Account Rules',                   icon: 'far fa-file-alt' },
                           { id: 'RPTcoa',          text: 'Chart Of Accounts',               icon: 'far fa-file-alt' },
                           //{ id: 'RPTdpm',        text: 'Deposit Methods',                 icon: 'far fa-file-alt' },
                           //{ id: 'RPTdep',        text: 'Depository Accounts',             icon: 'far fa-file-alt' },
                           { id: 'RPTdelinq',       text: 'Delinquency',                     icon: 'far fa-file-alt' },
                           { id: 'RPTgsr',          text: 'GSR',                             icon: 'far fa-file-alt' },
                           { id: 'RPTj',            text: 'Journal',                         icon: 'far fa-file-alt' },
                           { id: 'RPTl',            text: 'Ledger',                          icon: 'far fa-file-alt' },
                           { id: 'RPTla',           text: 'Ledger Activity',                 icon: 'far fa-file-alt' },
                           { id: 'RPTpeople',       text: app.sTransactant,                  icon: 'far fa-file-alt' },
                           //{ id: 'RPTpmt',        text: 'Payment Types',                   icon: 'far fa-file-alt' },
                           //{ id: 'RPTrcptlist',   text: 'Receipts List',                    icon: 'far fa-file-alt' },
                           { id: 'RPTrcbt',         text: app.sRentable+' Type Counts',      icon: 'far fa-file-alt' },
                           { id: 'RPTr',            text: plural(app.sRentable),             icon: 'far fa-file-alt' },
                           { id: 'RPTra',           text: plural(app.sRentalAgreement),      icon: 'far fa-file-alt' },
                           { id: 'RPTrat',          text: app.sRentalAgreement+' Templates', icon: 'far fa-file-alt' },
                           { id: 'RPTrt',           text: app.sRentable+' Types',            icon: 'far fa-file-alt' },
                           { id: 'RPTrr',           text: 'RentRoll',                        icon: 'far fa-file-alt' },
                           //{ id: 'RPTstatements', text: 'Statements',                      icon: 'far fa-file-alt' },
                           //{ id: 'RPTsl',         text: 'String Lists',                    icon: 'far fa-file-alt' },
                           { id: 'RPTtb',           text: 'Trial Balance',                   icon: 'far fa-file-alt' },//
                    ]
                },
                { id: 'setup', text: 'Setup', img: 'icon-wrench', expanded: true, group: true,
                    nodes: [
                            { id: 'business',    text: 'Business Unit',                    icon: 'far fa-building' },
                            { id: 'accounts',    text: 'Chart Of Accounts',                icon: 'fas fa-list' },
                            { id: 'pmts',        text: 'Payment Types',                    icon: 'far fa-credit-card' },
                            { id: 'dep',         text: 'Depository Accounts',              icon: 'fas fa-university' },
                            { id: 'depmeth',     text: 'Deposit Methods',                  icon: 'far fa-envelope' },
                            { id: 'ars',         text: 'Account Rules',                    icon: 'fas fa-cogs' },
                            { id: 'rt',          text: plural(app.sRentableType),          icon: 'fas fa-asterisk', hint: 'Rentable Types' },
                            { id: 'rentables',   text: plural(app.sRentable),              icon: 'fas fa-cube' },
                            // { id: 'changeRT',    text: 'Change ' + app.sRentable +' Type', icon: 'fas fa-sync-alt' },
                            // { id: 'permissions', text: 'Permissions',                      icon: 'far fa-thumbs-up' },
                    ]
                },
                { id: 'admin', text: 'Administrator', img: 'icon-wrench', expanded: false, group: true,
                    nodes: [
                            { id: 'about',  text: 'Product Info',        icon: 'fas fa-info' },
                            { id: 'tws',    text: 'Timed Work Schedule', icon: 'far fa-calendar-alt' },
                            { id: 'ledgers',text: 'Ledgers',             icon: 'fas fa-book' },
                    ]
                },
            ],
            onExpand: function(event) {
                //var x = getCurrentBusiness();
                //console.log('current biz = ' + x.value + '  name = ' + x.name );
                switch (event.target) {
                    case 'reports':
                        var w = w2ui.reportslayout;
                        w2ui.toplayout.content('main', w);
                        w2ui.toplayout.hide('right',true);

                        // if not report node then unselect any other node
                        if (!(w2ui.sidebarL1.selected && w2ui.sidebarL1.selected.startsWith("RPT"))) {
                            w2ui.sidebarL1.unselect();
                        }

                        break;
                }

            },
            onFlat: function (event) {
                console.log('event.goFlat = ' + event.goFlat );
                $('#sidebarL1').css('width', (event.goFlat ? '35px' : ''+app.sidebarWidth+'px'));
            },
            onClick: function (event) {
                console.log('event.target = ' + event.target);
                var target = event.target;
                var no_callBack = function(target) {
                    console.log("sidebar active form dirty - no callBack", target);
                    return false;
                },
                yes_callBack = function(target) {
                    console.log("sidebar active form dirty - yes callBack", target);

                    // if node is other than report nodes then
                    // reset report layout content
                    if (!(target.startsWith("RPT"))) {
                        w2ui.reportslayout.content('main', '');
                        w2ui.sidebarL1.unselect();
                    }

                    switch(target) {
                        case 'accounts':
                        case 'rt':
                        case 'rentables':
                        case 'transactants':
                        case 'rentalagrs':
                        case 'receipts':
                        case 'asms':
                        case 'pmts':
                        case 'dep':
                        case 'ars':
                        case 'tws':
                        case 'ledgers':
                        case 'stmt':
                        case 'depmeth':
                        case 'allocfunds':
                        case 'deposit':
                        case 'expense':
                        case 'payorstmt':
                        case 'tls':
                        case 'tlds':
                        case 'rr':
                        case 'business':
                            switchToGrid(target);
                            break;
                        case 'raflows':
                            switchToGrid(target, "flow");
                            break;
                        case 'closePeriod':
                            switchToClosePeriod();
                            break;

                        case 'goRatePlan':
                            w2ui.toplayout.content('main', '<h1>Sorry :-(</h1><h2>Rate Plan...  Not Available</h2><h3>But coming soon!</h3>');
                            w2ui.toplayout.hide('right',true);
                            break;
                        case 'goServiceMenu':
                            w2ui.toplayout.content('main', '<h1>Sorry :-(</h1><h2>Service Menu...  Not Available</h2><h3>But coming soon!</h3>');
                            w2ui.toplayout.hide('right',true);
                            break;
                        case 'mkdep':
                            w2ui.toplayout.load('main', '/webclient/html/formmkdep.html');
                            w2ui.toplayout.hide('right',true);
                            break;
                        case 'gdssvcs':
                            w2ui.toplayout.load('main', '/webclient/html/formgas.html');
                            w2ui.toplayout.hide('right',true);
                            break;
                        case 'assignrnt':
                            w2ui.toplayout.load('main', '/webclient/html/formaar.html');
                            w2ui.toplayout.hide('right',true);
                            break;
                        case 'movein':
                            w2ui.toplayout.load('main', '/webclient/html/formmvin.html');
                            w2ui.toplayout.hide('right',true);
                            break;
                        case 'moveout':
                            w2ui.toplayout.load('main', '/webclient/html/formmvout.html');
                            w2ui.toplayout.hide('right',true);
                            break;
                        case 'updatera':
                            w2ui.toplayout.load('main', '/webclient/html/formraextend.html');
                            w2ui.toplayout.hide('right',true);
                            break;
                        case 'dlnq':
                            w2ui.toplayout.load('main', '/webclient/html/formdlnq.html');
                            w2ui.toplayout.hide('right',true);
                            break;
                        case 'prepnotice':
                            w2ui.toplayout.load('main', '/webclient/html/formprepnotice.html');
                            w2ui.toplayout.hide('right',true);
                            break;
                        case 'adjust':
                            w2ui.toplayout.load('main', '/webclient/html/formadjust.html');
                            w2ui.toplayout.hide('right',true);
                            break;
                        case 'svcreq':
                            w2ui.toplayout.load('main', '/webclient/html/formcsr.html');
                            w2ui.toplayout.hide('right',true);
                            break;
                        case 'svcreqcmp':
                            w2ui.toplayout.load('main', '/webclient/html/formcmplsr.html');
                            w2ui.toplayout.hide('right',true);
                            break;
                        case 'housekpg':
                            w2ui.toplayout.load('main', '/webclient/html/formhskp.html');
                            w2ui.toplayout.hide('right',true);
                            break;
                        case 'prvmaint':
                            w2ui.toplayout.load('main', '/webclient/html/formprvm.html');
                            w2ui.toplayout.hide('right',true);
                            break;
                        case 'invntory':
                            w2ui.toplayout.load('main', '/webclient/html/forminv.html');
                            w2ui.toplayout.hide('right',true);
                            break;
                        case 'changeRT':
                            w2ui.toplayout.load('main', '/webclient/html/formchgrt.html');
                            w2ui.toplayout.hide('right',true);
                            break;
                        case 'permissions':
                            w2ui.toplayout.load('main', '/webclient/html/formperm.html');
                            w2ui.toplayout.hide('right',true);
                            break;
                        case 'RPTar':
                        case 'RPTasmrpt':
                        case 'RPTb':
                        case 'RPTcoa':
                        case 'RPTdelinq':
                        case 'RPTdep':
                        case 'RPTdpm':
                        case 'RPTgsr':
                        case 'RPTj':
                        case 'RPTl':
                        case 'RPTla':
                        case 'RPTpeople':
                        case 'RPTpmt':
                        case 'RPTr':
                        case 'RPTra':
                        case 'RPTrat':
                        case 'RPTrcbt':  // rentable count by type
                        case 'RPTrcptlist':
                        case 'RPTrcpt':
                        case 'RPTrr':
                        case 'RPTrt':
                        case 'RPTsl':
                        case 'RPTstatements':
                        case 'RPTtb':
                            showReport(target);
                            app.last.report = target;
                            break;
                        case 'about':
                            w2ui.toplayout.load('main', '/webclient/html/about.html');
                            w2ui.toplayout.hide('right',true);
                            getAboutInfo();
                            break;
                        default:
                            console.log('unhandled event target: ' + target);
                    }
                };

                // warn user if form has been changed
                // also here we need to bind current event to both function for
                // use of event inside those function
                var yes_cb_args = [target],
                    nb_cb_args = [target];
                form_dirty_alert(yes_callBack, no_callBack, yes_cb_args, nb_cb_args);
            }
        };
    } else {
        sbdata = {
            name: 'sidebarL1',
            nodes: [
                { id: 'workflowreceipts', text: plural(app.sAssessment)+' / '+plural(app.sReceipt), img: 'icon-folder', expanded: true, group: true,
                    nodes: [
                            { id: 'receipts',     text: 'Tendered Payment '+app.sReceipt, icon: 'fas fa-star',        hint: plural(app.sReceipt) },
                   ]
                },
                { id: 'reports', text: 'Reports', img: 'icon-folder', expanded: false, group: true,
                    nodes: [
                          { id: 'RPTrcptlist',   text: 'Tendered Payment Log',       icon: 'far fa-file-alt' },
                    ]
                },
            ],
            onExpand: function(event) {
                //var x = getCurrentBusiness();
                //console.log('current biz = ' + x.value + '  name = ' + x.name );
                switch (event.target) {
                    case 'reports':
                        var w = w2ui.reportslayout;
                        w2ui.toplayout.content('main', w);
                        w2ui.toplayout.hide('right',true);
                        break;
                }

            },
            onFlat: function (event) {
                console.log('event.goFlat = ' + event.goFlat );
                $('#sidebarL1').css('width', (event.goFlat ? '35px' : ''+app.sidebarWidth+'px'));
            },
            onClick: function (event) {
                console.log('event.target = ' + event.target);
                var target = event.target;
                var no_callBack = function(target) {
                    console.log("sidebar active form dirty - no callBack", target);
                    return false;
                },
                yes_callBack = function(target) {
                    console.log("sidebar active form dirty - yes callBack", target);
                    switch(target) {
                        case 'receipts':
                            // w2ui.sidebarL1.collapse('reports'); // close reports when jumping to a main view
                            switchToGrid(target);
                            break;
                        case 'RPTrcptlist':
                            showReport(target);
                            app.last.report = target;
                            break;
                        case 'about':
                            // w2ui.sidebarL1.collapse('reports'); // close reports when jumping to a main view
                            w2ui.toplayout.load('main', '/webclient/html/about.html');
                            w2ui.toplayout.hide('right',true);
                            getAboutInfo();
                            break;
                        default:
                            console.log('unhandled event target: ' + target);
                    }
                };

                // warn user if form has been changed
                // also here we need to bind current event to both function for
                // use of event inside those function
                var yes_cb_args = [target],
                    nb_cb_args = [target];
                form_dirty_alert(yes_callBack, no_callBack, yes_cb_args, nb_cb_args);
            }
        };
    }
    w2ui.toplayout.content('left',$().w2sidebar(sbdata));
};


//---------------------------------------------------------------------------------
// getAboutInfo - contacts the server to get info about its version, and updates
//          the version (about) html page
//
// @params  <none>
// @returns <none>
//---------------------------------------------------------------------------------
window.getAboutInfo = function () {
    $.get('/v1/version/')
    .done( function(data) {
        if (typeof data == 'string') {  // it's weird, a successful data add gets parsed as an object, an error message does not
            document.getElementById("appVer").innerHTML = data;
            //w2ui.toplayout.refresh('main');
        } else {
            console.log('received response of type ' + typeof data + ' : ' + data);
        }
    })
    .fail( function() {
        console.log('Error getting /v1/version/');
    });
};

"use strict";
/*global
    GridMoneyFormat, number_format, w2ui, $, app, console,
    form_dirty_alert, addDateNavToToolbar, setToStmtForm, renderStmtReversal
*/

window.buildStatementsElements = function () {
    //------------------------------------------------------------------------
    //          stmtGrid  -  THE LIST OF ALL RENTAL AGREEMENTS
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'stmtGrid',
        url: '/v1/stmt',
        multiSelect: false,
        postData: {searchDtStart: app.D1, searchDtStop: app.D2},
        show: {
            toolbar         : true,
            footer          : true,
            toolbarAdd      : false,   // indicates if toolbar add new button is visible
            toolbarDelete   : false,   // indicates if toolbar delete button is visible
            toolbarSave     : false,   // indicates if toolbar save button is visible
            selectColumn    : false,
            expandColumn    : false,
            toolbarEdit     : false,
            toolbarSearch   : false,
            toolbarInput    : true,
            searchAll       : false,
            toolbarReload   : true,
            toolbarColumns  : true,
        },
        columns: [
            {field: 'recid', hidden: true,  caption: 'recid',            size: '40px',  sortable: true},
            {field: 'BID',   hidden: true,  caption: 'BID',              size: '40px',  sortable: true},
            {field: 'RAID',  hidden: false, caption: 'Rental Agreement', size: '110px', sortable: true},
            {field: 'Payors',hidden: false, caption: 'Payors',           size: '250px', sortable: true},
        ],
        onClick: function(event) {
            event.onComplete = function () {
                var yes_args = [this, event.recid],
                    no_args = [this],
                    no_callBack = function(grid) {
                        grid.select(app.last.grid_sel_recid);
                        return false;
                    },
                    yes_callBack = function(grid, recid) {
                        app.last.grid_sel_recid = parseInt(recid);

                        // keep highlighting current row in any case
                        grid.select(app.last.grid_sel_recid);

                        var rec = grid.get(recid);
                        console.log( 'BID = ' + rec.BID + ',   RAID = ' + rec.RAID);
                        setToStmtForm(rec.BID, rec.RAID, app.D1, app.D2);
                    };

                // warn user if form content has been changed
                form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
            };
        },
    });

    addDateNavToToolbar('stmt');

    //------------------------------------------------------------------------
    //  stmtDetailForm
    //------------------------------------------------------------------------
    $().w2form({
        name: 'stmtDetailForm',
        style: 'border: 0px; background-color: transparent;',
        header: 'Statement Detail',
        url: '/v1/stmtinfo',
        formURL: '/webclient/html/formstmtdet.html',
        toolbar: {
            items: [
                { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
                { type: 'break' },
                { type: 'button', id: 'csvexport', icon: 'fas fa-table', tooltip: 'export to CSV' },
                { type: 'button', id: 'pdfexport', icon: 'far fa-file-pdf', tooltip: 'export to PDF' },
                { id: 'bt3', type: 'spacer' },
                { id: 'btnClose', type: 'button', icon: 'fas fa-times' },
            ],
            onClick: function (event) {
                var r = w2ui.stmtDetailForm.record;
                event.onComplete = function() {
                    var d1, d2, url;
                    switch(event.target) {
                    case 'btnClose':
                        var no_callBack = function() { return false; },
                            yes_callBack = function() {
                                w2ui.toplayout.hide('right',true);
                                w2ui.stmtGrid.render();
                            };
                        form_dirty_alert(yes_callBack, no_callBack);
                        break;
                    case 'csvexport':
                        d1 = document.getElementsByName("stmtDetailD1")[0].value;
                        d2 = document.getElementsByName("stmtDetailD2")[0].value;
                        url = exportReportCSV("RPTrastmt", d1, d2, true);
                        url += "&raid=" + r.RAID;
                        downloadMediaFromURL(url);
                        break;
                    case 'pdfexport':
                        d1 = document.getElementsByName("stmtDetailD1")[0].value;
                        d2 = document.getElementsByName("stmtDetailD2")[0].value;
                        url = exportReportPDF("RPTrastmt", d1, d2, true);
                        url += "&raid=" + r.RAID;
                        downloadMediaFromURL(url);
                        break;
                    }
                };
            },
        },
        fields: [
            { field: 'recid', type: 'int', required: false, html: {page: 0, column: 0 } },
            { field: 'RAID', type: 'int', required: false, html: {  page: 0, column: 0 } },
            { field: 'BID', type: 'int', required: false, html: { page: 0, column: 0 } },
            { field: 'Balance', type: 'float', required: false, html: { page: 0, column: 0 }, render: 'money' },
            { field: 'Payors', type: 'text', required: false, html: { page: 0, column: 0 } },
            { field: 'AgreementStart', type: 'date', required: false, html: { page: 0, column: 0 } },
            { field: 'AgreementStop', type: 'date', required: false, html: { page: 0, column: 0 } },
            { field: 'PossessionStart', type: 'date', required: false, html: { page: 0, column: 0 } },
            { field: 'PossessionStop', type: 'date', required: false, html: { page: 0, column: 0 } },
            { field: 'RentStart', type: 'date', required: false, html: { page: 0, column: 0 } },
            { field: 'RentStop', type: 'date', required: false, html: { page: 0, column: 0 } },
            { field: 'PayorUnalloc', type: 'text', required: false, html: { page: 0, column: 0 } },
        ],
        onRefresh: function(event) {
            event.onComplete = function() {
                var x = document.getElementById("bannerRAID");
                if (x !== null) {
                    x.innerHTML = '' + this.record.RAID;
                }
                x = document.getElementById("bannerPayors");
                if (x !== null) {
                    x.innerHTML = '' + this.record.Payors;
                }
                x = document.getElementById("RentalAgreementDates");
                if (x !== null) {
                    x.innerHTML = '' + this.record.AgreementStart + ' - ' + this.record.AgreementStop;
                }
                x = document.getElementById("PossessionDates");
                if (x !== null) {
                    x.innerHTML = '' + this.record.PossessionStart + ' - ' + this.record.PossessionStop;
                }
                x = document.getElementById("RentDates");
                if (x !== null) {
                    x.innerHTML = '' + this.record.RentStart + ' - ' + this.record.RentStop;
                }
                x = document.getElementById("CurrentStatementBalance");
                if (x !== null) {
                    x.innerHTML = '$ ' + number_format(this.record.Balance ,2);
                }
                x = document.getElementById("payorunalloc");
                if (x !== null) {
                    x.innerHTML = '' + this.record.PayorUnalloc;
                }
            };
        },

    });

    //------------------------------------------------------------------------
    //  stmtDetailGrid  -  lists all the assessments and receipts for
    //                     the selected Rental Agreement from the stmtGrid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'stmtDetailGrid',
        url: '/v1/stmtdetail',
        multiSelect: false,
        postData: {searchDtStart: app.D1, searchDtStop: app.D2},
        show: {
            toolbar         : true,
            footer          : true,
            toolbarAdd      : false,   // indicates if toolbar add new button is visible
            toolbarDelete   : false,   // indicates if toolbar delete button is visible
            toolbarSave     : false,   // indicates if toolbar save button is visible
            selectColumn    : false,
            expandColumn    : false,
            toolbarEdit     : false,
            toolbarSearch   : false,
            toolbarInput    : false,   // the text area for searches
            searchAll       : false,
            toolbarReload   : false,
            toolbarColumns  : false,
        },
        columns: [
            {field: 'recid',        caption: 'recid',        size: '35px',  sortable: true, hidden: true},
            {field: 'Dt',           caption: 'Date',         size: '75px',  sortable: true},
            {field: 'Reverse',      caption: ' ',            size: '12px',  sortable: true, render: renderStmtReversal },
            {field: 'ID',           caption: 'ID',           size: '80px',  sortable: true},
            {field: 'RentableName', caption: app.sRentable,  size: '30%',   sortable: true},
            {field: 'Descr',        caption: 'Description',  size: '60%',   sortable: true},
            {field: 'AsmtAmount',   caption: 'Assessment',   size: '90px',  sortable: true, style: 'text-align: right',
                    render: function (record,index,col_index) { return stmtRenderHandler(record,index,col_index,record.AsmtAmount,true); },
            },
            {field: 'RcptAmount',   caption: 'Applied Funds',size: '95px', sortable: true, style: 'text-align: right',
                    render: function (record,index,col_index) { return stmtRenderHandler(record,index,col_index,record.RcptAmount,true); },
            },
            {field: 'Balance',      caption: 'Balance',      size: '90px', sortable: true, style: 'text-align: right',
                    render: function (record,index,col_index) { return stmtRenderHandler(record,index,col_index,record.Balance,false); },
            },
            {field: 'dummy',      caption: ' ',            size: '8px' },
        ],
    });

    addDateNavToToolbar('stmtDetail');

    //------------------------------------------------------------------------
    //  stmtlayout - The layout to contain the stmtForm and stmtDetailGrid
    //               top  - stmtForm
    //               main - stmtDetailGrid
    //------------------------------------------------------------------------
    $().w2layout({
        name: 'stmtLayout',
        padding: 0,
        panels: [
            { type: 'left',    size: '30%', hidden: true },
            { type: 'top',     size: 240,   hidden: false, content: 'top',  resizable: true, style: app.pstyle },
            { type: 'main',    size: '70%', hidden: false, content: 'main', resizable: true, style: app.pstyle },
            { type: 'preview', size: 0,     hidden: true,  content: 'PREVIEW'  },
            { type: 'bottom',  size: 0,     hidden: true },
            { type: 'right',   size: 0,     hidden: true }
        ]
    });
};

window.renderStmtReversal = function (record /*, index, col_index*/) {
    if (typeof record === "undefined") {
        return;
    }
    if ( record.Reverse ) { // if reversed then
        return '<i class="fas fa-exclamation-triangle" title="reversed" aria-hidden="true" style="color: #FFA500;"></i>';
    }
    return '';
};

window.stmtRenderHandler = function (record,index,col_index,amt,bRemoveZero) {
    if (record.Reverse && col_index == 8) { return; }  // don't update balance if it's a reversal
    if (Math.abs(amt) < 0.001) {
        if (record.Descr.includes("Closing Balance") || !bRemoveZero) {
            return '$ 0.00';
        }
    }
    return GridMoneyFormat(amt);
};

//-----------------------------------------------------------------------------
// setToStmtForm -  enable the Statement form in toplayout.  Also, set
//                the forms url and request data from the server
// @params
//   bid = business id (or the BUD)
//  raid = Rental Agreement ID
// d1,d2 = date range to use
//-----------------------------------------------------------------------------
window.setToStmtForm = function (bid, raid, d1,d2) {
    if (raid > 0) {
        w2ui.stmtDetailGrid.url = '/v1/stmtdetail/' + bid + '/' + raid;
        w2ui.stmtDetailForm.url = '/v1/stmtinfo/' + bid + '/' + raid;
        w2ui.stmtDetailForm.postData = {
            searchDtStart: d1,
            searchDtStop: d2,
        };

        // ==================
        // INTERNAL FUNCTION
        // ==================
        var showForm = function() {
            w2ui.toplayout.content('right', w2ui.stmtLayout);
            w2ui.toplayout.show('right', true);
            w2ui.toplayout.sizeTo('right', 850);
            w2ui.toplayout.render();
            app.new_form_rec = false;  // mark as record exists
            app.form_is_dirty = false; // mark as no changes yet
            // NOTE: remove any error tags bound to field from previous form
            $().w2tag();
            // SHOW the right panel now
            w2ui.toplayout.show('right', true);
        };

        w2ui.stmtDetailForm.request(function(event) {
            if (event.status === "success") {
                showForm();
                return true;
            } else {
                showForm();
                w2ui.stmtDetailForm.message("Could not get form data from server...!!");
                return false;
            }
        });
    }
};

//-----------------------------------------------------------------------------
// createStmtForm - add the grid and form to the statement layout.  I'm not
//      sure why this is necessary. But if I put this grid and form directly
//      into the layout when it gets created, they do not work correctly.
// @params
//-----------------------------------------------------------------------------
window.createStmtForm = function () {
    w2ui.stmtLayout.content('top',w2ui.stmtDetailForm);
    w2ui.stmtLayout.content('main',w2ui.stmtDetailGrid);
};

/*global
    GridMoneyFormat, number_format, w2ui, $, app, console,
    form_dirty_alert, addDateNavToToolbar, renderPayorStmtReversal, payorstmtRenderHandler,
    dateFromString, exportReportCSV, exportReportPDF,getGridReversalSymbolHTML, setToPayorStmtForm, renderPayorStmtDate
*/
"use strict";

window.buildPayorStatementElements = function () {
    //------------------------------------------------------------------------
    //  payorstmt  -  lists all the assessments and receipts for
    //                     the selected Payors
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'payorstmtGrid',
        url: '/v1/payorstmt',
        multiSelect: false,
        postData: {searchDtStart: app.D1, searchDtStop: app.D2},
        show: {
            toolbar         : true,
            footer          : true,
            toolbarAdd      : false,   // indicates if toolbar add new button is visible
            toolbarDelete   : false,   // indicates if toolbar delete button is visible
            toolbarSave     : false,   // indicates if toolbar save button is visible
            selectColumn    : false,
            expandColumn    : false,
            toolbarEdit     : false,
            toolbarSearch   : false,
            toolbarInput    : true,    // the text area for searches
            searchAll       : false,
            toolbarReload   : false,
            toolbarColumns  : false,
        },
        columns: [
            {field: 'IsSubTotalRow', caption: 'Is SubTotal Row',                sortable: false, hidden: true},
            {field: 'recid',         caption: 'recid',           size: '35px',  sortable: true,  hidden: true},
            {field: 'TCID',          caption: 'TCID',            size: '75px',  sortable: true},
            {field: 'FirstName',     caption: 'FirstName',       size: '150px', sortable: true},
            {field: 'LastName',      caption: 'LastName',        size: '150px', sortable: true},
            {field: 'CompanyName',   caption: 'CompanyName',     size: '200px', sortable: true},
            {field: 'IsCompany',     caption: 'IsCompany',       size: '200px', sortable: true,  hidden: true },
        ],
        onClick: function(event) {
            event.onComplete = function () {
                var yes_args = [this, event.recid],
                    no_args = [this],
                    no_callBack = function(grid) {
                        grid.select(app.last.grid_sel_recid);
                        return false;
                    },
                    yes_callBack = function(grid, recid) {
                        app.last.grid_sel_recid = parseInt(recid);

                        // keep highlighting current row in any case
                        grid.select(app.last.grid_sel_recid);

                        var rec = grid.get(recid);
                        console.log( 'BID = ' + rec.BID + ',   RAID = ' + rec.RAID);
                        setToPayorStmtForm(rec.BID, rec.TCID, app.D1, app.D2);
                    };

                // warn user if form content has been changed
                form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
            };
        },
    });

    addDateNavToToolbar('payorstmt');

    //------------------------------------------------------------------------
    //  payorStmtInfoForm
    //------------------------------------------------------------------------
    $().w2form({
        name: 'payorStmtInfoForm',
        style: 'border: 0px; background-color: transparent;',
        header: 'Payor Statement',
        url: '/v1/payorstmtinfo',
        formURL: '/webclient/html/formpayorstmtdet.html',
        toolbar: {
            items: [
                { id: 'btnNotes',     type: 'button', icon: 'far fa-sticky-note' },
                {                     type: 'break' },
                { id: 'payorstmtint', type: 'radio', group: '1', text: 'Internal', icon: 'far fa-file-alt', checked: true },
                { id: 'payorstmtext', type: 'radio', group: '1', text: 'External', icon: 'far fa-file' },
                {                     type: 'break' },
                { id: 'csvexport',    type: 'button', icon: 'fas fa-table', tooltip: 'export to CSV' },
                { id: 'pdfexport',    type: 'button', icon: 'far fa-file-pdf', tooltip: 'export to PDF' },
                {                     type: 'spacer' },
                { id: 'btnClose',     type: 'button', icon: 'fas fa-times' },
            ],
            onClick: function (event) {
                event.onComplete = function() {
                    var g = w2ui.payorStmtDetailGrid;
                    var r = w2ui.payorStmtInfoForm.record;
                    var d1, d2, url;
                    switch(event.target) {
                    case 'btnClose':
                        var no_callBack = function() { return false; },
                            yes_callBack = function() {
                                w2ui.toplayout.hide('right',true);
                                w2ui.payorstmtGrid.render();
                            };
                        form_dirty_alert(yes_callBack, no_callBack);
                        break;
                    case 'payorstmtint':
                        app.PayorStmtExt = false;
                        g.postData.Bool1 = false;
                        g.url = '/v1/payorstmt/' + r.BID + '/' + r.TCID;
                        g.reload();
                        break;
                    case 'payorstmtext':
                        app.PayorStmtExt = true;
                        g.postData.Bool1 = true;
                        g.url = '/v1/payorstmt/' + r.BID + '/' + r.TCID;
                        g.reload();
                        break;
                    case 'csvexport':
                        d1 = document.getElementsByName("payorStmtDetailD1")[0].value;
                        d2 = document.getElementsByName("payorStmtDetailD2")[0].value;
                        url = exportReportCSV("RPTpayorstmt", d1, d2, true);
                        url += "&internal=" + !app.PayorStmtExt;
                        url += "&tcid=" + r.TCID;
                        downloadMediaFromURL(url);
                        break;
                    case 'pdfexport':
                        d1 = document.getElementsByName("payorStmtDetailD1")[0].value;
                        d2 = document.getElementsByName("payorStmtDetailD2")[0].value;
                        url = exportReportPDF("RPTpayorstmt", d1, d2, true);
                        url += "&internal=" + !app.PayorStmtExt;
                        url += "&tcid=" + r.TCID;
                        downloadMediaFromURL(url);
                        break;
                    }
                };
            },
        },
        fields: [
            { field: 'recid', type: 'int', required: false, html: {page: 0, column: 0 } },
            { field: 'RAID', type: 'int', required: false, html: {  page: 0, column: 0 } },
            { field: 'TCID', type: 'int', required: false, html: {  page: 0, column: 0 } },
            { field: 'BID', type: 'int', required: false, html: { page: 0, column: 0 } },
            { field: 'FirstName', type: 'text', required: false, html: { page: 0, column: 0 } },
            { field: 'MiddleName', type: 'text', required: false, html: { page: 0, column: 0 } },
            { field: 'LastName', type: 'text', required: false, html: { page: 0, column: 0 } },
            { field: 'PayorIsCompany', type: 'checkbox', required: false, html: { page: 0, column: 0 } },
            { field: 'CompanyName', type: 'text', required: false, html: { page: 0, column: 0 } },
            { field: 'Address', type: 'text', required: false, html: { page: 0, column: 0 } },
        ],
        onRefresh: function(event) {
            var f = this;
            event.onComplete = function() {
                var r = f.record;
                var x = document.getElementById("bannerTCID");
                if (x !== null) {
                    var title;
                    if (r.PayorIsCompany) {
                        title = r.CompanyName;
                    } else {
                        title = r.FirstName + ' ';
                        if (typeof r.MiddleName == "string") {
                            if (r.MiddleName.length > 0 ) {
                                title += r.MiddleName + ' ';
                            }
                        }
                        title += r.LastName + ' ';
                    }
                    x.innerHTML = title;
                }
                x = document.getElementById("payorstmtaddr");
                if (x !== null) {
                    x.innerHTML = '' + r.Address;
                }
                // x = document.getElementById("RentalAgreementDates");
                // if (x !== null) {
                //     x.innerHTML = '' + this.record.AgreementStart + ' - ' + this.record.AgreementStop;
                // }
                // x = document.getElementById("PossessionDates");
                // if (x !== null) {
                //     x.innerHTML = '' + this.record.PossessionStart + ' - ' + this.record.PossessionStop;
                // }
                // x = document.getElementById("RentDates");
                // if (x !== null) {
                //     x.innerHTML = '' + this.record.RentStart + ' - ' + this.record.RentStop;
                // }
                // x = document.getElementById("CurrentStatementBalance");
                // if (x !== null) {
                //     x.innerHTML = '$ ' + number_format(this.record.Balance ,2);
                // }
                // x = document.getElementById("payorunalloc");
                // if (x !== null) {
                //     x.innerHTML = '' + this.record.PayorUnalloc;
                // }
            };
        },

    });

    //------------------------------------------------------------------------
    //  payorStmtDetailGrid  -  lists all the assessments and receipts for
    //                     the selected Rental Agreement from the stmtGrid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'payorStmtDetailGrid',
        url: '/v1/payorstmt',
        multiSelect: false,
        postData: {searchDtStart: app.D1, searchDtStop: app.D2, Bool1: app.PayorStmtExt},
        show: {
            toolbar         : true,
            footer          : true,
            toolbarAdd      : false,   // indicates if toolbar add new button is visible
            toolbarDelete   : false,   // indicates if toolbar delete button is visible
            toolbarSave     : false,   // indicates if toolbar save button is visible
            selectColumn    : false,
            expandColumn    : false,
            toolbarEdit     : false,
            toolbarSearch   : false,
            toolbarInput    : false,   // the text area for searches
            searchAll       : false,
            toolbarReload   : false,
            toolbarColumns  : false,
        },
        columns: [
            {field: 'recid',           caption: 'recid',           size: '35px',  sortable: true, hidden: true},
            {field: 'Date',            caption: 'Date',            size: '70px',  sortable: true, render: function(rec) {return renderPayorStmtDate(rec.Date); }},
            {field: 'Reverse',         caption: ' ',               size: '12px',  sortable: true, render: renderPayorStmtReversal },
            {field: 'Payor',           caption: 'Payor',           size: '100px', sortable: true},
            {field: 'TCID',            caption: 'TCID',            size: '80px',  sortable: true, hidden: true},
            {field: 'RAID',            caption: 'RAID',            size: '45px',  sortable: true },
            {field: 'ASMID',           caption: 'ASMID',           size: '55px',  sortable: true },
            {field: 'RCPTID',          caption: 'RCPTID',          size: '60px',  sortable: true },
            {field: 'RentableName',    caption: app.sRentable,     size: '30%',   sortable: true},
            {field: 'Description',     caption: 'Description',     size: '60%',   sortable: true},
            {field: 'UnappliedAmount', caption: 'Unapplied Funds', size: '90px',  sortable: true, style: 'text-align: right',
                    render: function (record,index,col_index) { return payorstmtRenderHandler(record,index,col_index,record.UnappliedAmount,true); },
            },
            {field: 'AppliedAmount',   caption: 'Applied Funds',   size: '95px', sortable: true, style: 'text-align: right',
                    render: function (record,index,col_index) { return payorstmtRenderHandler(record,index,col_index,record.AppliedAmount,true); },
            },
            {field: 'Assessment',      caption: 'Assessment',      size: '90px',  sortable: true, style: 'text-align: right',
                    render: function (record,index,col_index) { return payorstmtRenderHandler(record,index,col_index,record.Assessment,true); },
            },
            {field: 'Balance',         caption: 'Balance',         size: '90px', sortable: true, style: 'text-align: right',
                    render: function (record,index,col_index) { return payorstmtRenderHandler(record,index,col_index,record.Balance,false); },
            },
            {field: 'spacer',          caption: ' ',               size: '7px'},

        ],
    });

    addDateNavToToolbar('payorStmtDetail');

    //------------------------------------------------------------------------
    //  payorstmtlayout - The layout to contain the stmtForm and payorStmtDetailGrid
    //               top  - stmtForm
    //               main - payorStmtDetailGrid
    //------------------------------------------------------------------------
    $().w2layout({
        name: 'payorstmtLayout',
        padding: 0,
        panels: [
            { type: 'left',    size: '30%', hidden: true },
            { type: 'top',     size: 170,   hidden: false, content: 'top',  resizable: true, style: app.pstyle },
            { type: 'main',    size: '70%', hidden: false, content: 'main', resizable: true, style: app.pstyle },
            { type: 'preview', size: 0,     hidden: true,  content: 'PREVIEW'  },
            { type: 'bottom',  size: 0,     hidden: true },
            { type: 'right',   size: 0,     hidden: true }
        ]
    });
};

window.payorstmtRenderHandler = function (record,index,col_index,amt,bRemoveZero) {
    var f = w2ui.payorStmtDetailGrid.columns[col_index];
    if (record.Reverse && f.field == "Balance") { return; }  // don't update balance if it's a reversal
    if (record.Description.includes("***") || record.Description.length == 0) {return;} // blank if it's a header or spacer
    if (Math.abs(amt) < 0.001) {
        if (record.Description.includes("Closing Balance") || !bRemoveZero) {
            return '$ 0.00';
        }
    }
    return GridMoneyFormat(amt);
};

window.renderPayorStmtReversal = function (record /*, index, col_index*/) {
    if (typeof record === "undefined") {
        return;
    }
    if ( record.Reverse ) { // if reversed then
        return getGridReversalSymbolHTML();
    }
    return '';
};

window.renderPayorStmtDate = function (s) {
    //var d = new Date(y);
    var d = dateFromString(s);
    if (d.getFullYear() < 1971) {
        return '';
    }
    return dateFmtStr(d);
};

//-----------------------------------------------------------------------------
// renderPayorStmtID - render the ID number for RAID, ASMID, and RCPTID.
//        If the ID is > 0 return the number, otherwise just return an
//        empty string.
// @params
//    record = current record being rendered
//     index = index within the record array
// col_index = column index within the record
//
// @returns
//      an empty string if the id is 0
//      the number if ID >= 1
//-----------------------------------------------------------------------------
window.renderPayorStmtID = function (record, index, col_index) {
    var f = w2ui.payorStmtDetailGrid.columns[col_index];
    var n = 0;
    switch ( f.field ) {
        case "RAID":   n = record.RAID; break;
        case "ASMID":  n = record.ASMID; break;
        case "RCPTID": n = record.RCPTID; break;
        default:
            return '';
    }
    if (n > 0) {
        return ''+n;
    }
    return '';
};

//-----------------------------------------------------------------------------
// setToPayorStmtForm -  enable the Statement form in toplayout.  Also, set
//                the forms url and request data from the server
// @params
//   bid = business id (or the BUD)
//  tcid = Payor's TCID
// d1,d2 = date range to use
//-----------------------------------------------------------------------------
window.setToPayorStmtForm = function (bid, tcid, d1,d2) {
    if (tcid > 0) {
        w2ui.payorStmtDetailGrid.url = '/v1/payorstmt/' + bid + '/' + tcid;
        w2ui.payorStmtInfoForm.url = '/v1/payorstmtinfo/' + bid + '/' + tcid;
        w2ui.payorStmtInfoForm.postData = {
            searchDtStart: d1,
            searchDtStop: d2,
            Bool1: app.PayorStmtExt,
        };

        // ==================
        // INTERNAL FUNCTION
        // ==================
        var showForm = function() {
            w2ui.toplayout.content('right', w2ui.payorstmtLayout);
            w2ui.toplayout.show('right', true);
            w2ui.toplayout.sizeTo('right', 1000);
            w2ui.toplayout.render();
            app.new_form_rec = false;  // mark as record exists
            app.form_is_dirty = false; // mark as no changes yet
            // NOTE: remove any error tags bound to field from previous form
            $().w2tag();
            // SHOW the right panel now
            w2ui.toplayout.show('right', true);
        };

        w2ui.payorStmtInfoForm.header = 'Payor Statement for TCID ' + tcid;
        w2ui.payorStmtInfoForm.request(function(event) {
            if (event.status === "success") {
                showForm();
                return true;
            } else {
                showForm();
                w2ui.payorStmtInfoForm.message("Could not get form data from server...!!");
                return false;
            }
        });
    }
};

//-----------------------------------------------------------------------------
// createPayorStmtForm - add the grid and form to the statement layout.  I'm not
//      sure why this is necessary. But if I put this grid and form directly
//      into the layout when it gets created, they do not work correctly.
// @params
//-----------------------------------------------------------------------------
window.createPayorStmtForm = function () {
    w2ui.payorstmtLayout.content('top',w2ui.payorStmtInfoForm);
    w2ui.payorstmtLayout.content('main',w2ui.payorStmtDetailGrid);
};

"use strict";
/*global
    w2ui, $, app, console, w2utils,
    form_dirty_alert, addDateNavToToolbar, w2uiDateControlString,
    dateFromString, taskDateRender, setToTLForm,
    taskFormDueDate,taskCompletionChange,taskFormDoneDate,
    openTaskForm,setInnerHTML,w2popup,ensureSession,dtFormatISOToW2ui,
    createNewTaskList, getBUDfromBID, exportItemReportPDF, exportItemReportCSV,
    popupNewTaskListForm, getTLDs, getCurrentBID, getNewTaskListRecord,
    closeTaskForm, setTaskButtonsState, renderTaskGridDate, localtimeToUTC, TLD,
    taskFormDueDate1,
*/

var TL = {
    TLFormWidth: 700,           // width of the entire form
    TaskWidth: 600,             // width of task form over tasklist grid
    formBtnsDisabled: false,    // indicates whether the tasklist save/delete buttons should be on/off
    TIME0: '1/1/1970',          // value of time if date control returns an empty string
};

var TLData = {
    sDtDue: '',
    sDtPreDue: '',
};


window.getNewTaskListRecord = function (bid) {
    var rec = {
        BID: bid,
        TLDID: 0,
        Name: '',
        Pivot: w2uiDateControlString(new Date()),
    };
    return rec;
};

window.buildTaskListElements = function () {
    //------------------------------------------------------------------------
    //          tlsGrid  -  TASK LISTS in the date range
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'tlsGrid',
        url: '/v1/tls',
        multiSelect: false,
        postData: {searchDtStart: app.D1, searchDtStop: app.D2},
        show: {
            toolbar         : true,
            footer          : true,
            toolbarAdd      : true,    // indicates if toolbar add new button is visible
            toolbarDelete   : false,   // indicates if toolbar delete button is visible
            toolbarSave     : false,   // indicates if toolbar save button is visible
            selectColumn    : false,
            expandColumn    : false,
            toolbarEdit     : false,
            toolbarSearch   : false,
            toolbarInput    : false,
            searchAll       : false,
            toolbarReload   : true,
            toolbarColumns  : true,
        },
        columns: [
            {field: 'recid',     hidden: true,  caption: 'recid',             size: '40px',  sortable: true},
            {field: 'BID',       hidden: true,  caption: 'BID',               size: '40px',  sortable: true},
            {field: 'Name',      hidden: false, caption: 'Name',              size: '110px', sortable: true},
            {field: 'DtPreDue',  hidden: false, caption: 'Pre Due',           size: '150px', sortable: true,
                render: function (record, index, col_index) { if (typeof record === "undefined") {return '';} return taskDateRender(record.DtPreDue); }
            },
            {field: 'DtPreDone', hidden: false, caption: 'Pre Due completed', size: '150px', sortable: true,
                render: function (record, index, col_index) { if (typeof record === "undefined") {return '';} return taskDateRender(record.DtPreDone); }
            },
            {field: 'DtDue',     hidden: false, caption: 'Due',               size: '150px', sortable: true,
                render: function (record, index, col_index) {if (typeof record === "undefined") {return ''; } return taskDateRender(record.DtDue); }
            },
            {field: 'DtDone',    hidden: false, caption: 'Due completed',     size: '150px', sortable: true,
                render: function (record, index, col_index) { if (typeof record === "undefined") {return '';} return taskDateRender(record.DtDone); }
            },
        ],
        onClick: function(event) {
            event.onComplete = function () {
                var yes_args = [this, event.recid],
                    no_args = [this],
                    no_callBack = function(grid) {
                        grid.select(app.last.grid_sel_recid);
                        return false;
                    },
                    yes_callBack = function(grid, recid) {
                        app.last.grid_sel_recid = parseInt(recid);

                        // keep highlighting current row in any case
                        grid.select(app.last.grid_sel_recid);

                        var rec = grid.get(recid);
                        console.log( 'BID = ' + rec.BID + ',   TLID = ' + rec.TLID);
                        setToTLForm(rec.BID, rec.TLID, app.D1, app.D2);
                    };
                form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
            };
        },
        onAdd: function(event) {
            event.onComplete = function () {
                var bid = getCurrentBID();
                createNewTaskList(bid);
            };
        },
    });

    addDateNavToToolbar('tls'); // "Grid" is appended to the

    //-----------------------------------------------------------------------------
    // taskFormDueDate - form formatting.  Can be used by either the TaskList or
    //    Task forms. Both have  DtDu, DtPreDue, ChkDtDu, chk DtPreDue.
    //
    //  TaskList FLAG Field Definition
    //    1<<0 : 0 = active, 1 = inactive
    //    1<<1 : 0 = task list definition does not have a PreDueDate, 1 = has a PreDueDate
    //    1<<2 : 0 = task list definition does not have a DueDate, 1 = has a DueDate
    //    1<<3 : 0 = DtPreDue has not been set, 1 = DtPreDue has been set
    //    1<<4 : 0 = DtDue has not been set, 1 = DtDue has been set
    //    1<<5 : 0 = no notification has been sent, 1 = Notification sent on DtLastNotify
    // @params
    //       f = the form
    //       r = data record to use for the form data
    //
    // @returns
    //      updated value for ChkDt...  true if year >= 2000
    //
    //-----------------------------------------------------------------------------
    window.taskFormDueDate1 = function (f,r) {

        //-----------------------------------------------------------------------
        // First, set the state of the toggle button. Whethere it can be set
        // or not depends on whether the task or tasklist definition has set
        // the PreDueDate and DueDate.  If it has, then the user cannot change
        // the value of PreDue or Due.  If the definition does not set the
        // due date then the user can set it to whatever they want. That
        // includes leaving it unset.
        //-----------------------------------------------------------------------
        var disable;
        if ( (r.FLAGS & 2) !== 0 ) { disable = true;} else {disable=false;}
        $(f.box).find("input[name=ChkDtPreDue]").prop( "disabled", disable );

        if ( (r.FLAGS & 4) !== 0 ) { disable = true;} else { disable=false; }
        $(f.box).find("input[name=ChkDtDue]").prop( "disabled", disable );
    };


    //------------------------------------------------------------------------
    //  tlsInfoForm
    //------------------------------------------------------------------------
    $().w2form({
        name: 'tlsInfoForm',
        style: 'border: 0px; background-color: transparent;',
        header: 'Task List',
        url: '/v1/tl',
        formURL: '/webclient/html/formtl.html',
        toolbar: {
            items: [
                // { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },

                { type: 'button', id: 'csvexport', icon: 'fas fa-table',    tooltip: 'export to CSV' },
                { type: 'button', id: 'pdfexport', icon: 'far fa-file-pdf', tooltip: 'export to PDF' },
                { type: 'spacer', id: 'bt3'  },
                { type: 'button', id: 'btnClose',  icon: 'fas fa-times' },
            ],
            onClick: function (event) {
                event.onComplete = function() {
                    // var g = w2ui.tlsDetailGrid;
                    // var r = w2ui.tlsInfoForm.record;
                    // var d1, d2, url;
                    switch(event.target) {
                    case 'btnClose':
                        var no_callBack = function() { return false; },
                            yes_callBack = function() {
                                closeTaskForm();
                                w2ui.toplayout.hide('right',true);
                                w2ui.tlsGrid.render();
                            };
                        form_dirty_alert(yes_callBack, no_callBack);
                        break;
                    case 'csvexport':
                        exportItemReportCSV("RPTtl", w2ui.tlsInfoForm.record.TLID, app.D1, app.D2);
                        break;
                    case 'pdfexport':
                        exportItemReportPDF("RPTtl", w2ui.tlsInfoForm.record.TLID, app.D1, app.D2);
                        break;
                    }
                };
            },
        },
        fields: [
            { field: 'recid',        type: 'int',       required: false },
            { field: 'TLID',         type: 'int',       required: false },
            { field: 'PTLID',        type: 'int',       required: false },
            { field: 'BID',          type: 'int',       required: false },
            { field: 'BUD',          type: 'list',      required: true, options: {items: app.businesses} },
            { field: 'Name',         type: 'text',      required: true },
            { field: 'Cycle',        type: 'list',      required: true, options: {items: app.w2ui.listItems.cycleFreq}, },
            { field: 'DtDue',        type: 'datetime',  required: false },
            { field: 'DtPreDue',     type: 'datetime',  required: false },
            { field: 'DtDone',       type: 'datetime',  required: false },
            { field: 'DtPreDone',    type: 'datetime',  required: false },
            { field: 'FLAGS',        type: 'int',       required: false },
            { field: 'DoneUID',      type: 'int',       required: false },
            { field: 'DoneName',     type: 'text',      required: false },
            { field: 'PreDoneUID',   type: 'int',       required: false },
            { field: 'PreDoneName',  type: 'text',      required: false },
            { field: 'EmailList',    type: 'text',      required: false },
            { field: 'Comment',      type: 'text',      required: false },
            { field: 'CreateTS',     type: 'date',      required: false },
            { field: 'CreateBy',     type: 'int',       required: false },
            { field: 'LastModTime',  type: 'date',      required: false },
            { field: 'LastModBy',    type: 'int',       required: false },
            { field: 'TZOffset',     type: 'int',       required: false },
            { field: 'ChkDtDue',     type: 'checkbox',  required: false },
            { field: 'ChkDtDone',    type: 'checkbox',  required: false },
            { field: 'ChkDtPreDue',  type: 'checkbox',  required: false },
            { field: 'ChkDtPreDone', type: 'checkbox',  required: false },
            { field: 'TZOffset',     type: 'int',       required: false },
        ],
        onRefresh: function(event) {
            event.onComplete = function(event) {
                var f = w2ui.tlsInfoForm;
                var r = f.record;
                if (typeof r.DtPreDue === "undefined") {
                    return;
                }
                // r.ChkDtPreDue  = taskFormDueDate(r.DtPreDue,  r.ChkDtPreDue,'sDtPreDue','no pre-due date');
                // r.ChkDtDue     = taskFormDueDate(r.DtDue,     r.ChkDtDue,   'sDtDue',   'no due date');
                taskFormDueDate1(f,r);
                r.ChkDtDone    = taskFormDoneDate(r.ChkDtDone,    r.DtDone,   r.DtDue,      r.ChkDtDone,    r.DoneUID,    r.DoneName,    'sDtDone',   'tlDoneName',    'tlOverdue');
                r.ChkDtPreDone = taskFormDoneDate(r.ChkDtPreDone, r.DtPreDone,r.DtPreDue,   r.ChkDtPreDone, r.PreDoneUID, r.PreDoneName, 'sDtPreDone','tlPreDoneName', 'tlPreOverdue');
            };
        },
        onLoad: function(event) {
            event.onComplete = function(event) {
                var f = w2ui.tlsInfoForm;
                var r = f.record;

                // translate dates into a format that w2ui understands
                r.DtPreDue  = dtFormatISOToW2ui(r.DtPreDue);
                r.DtDue     = dtFormatISOToW2ui(r.DtDue);
                r.DtPreDone = dtFormatISOToW2ui(r.DtPreDone);
                r.DtDone    = dtFormatISOToW2ui(r.DtDone);

                if (r.DtDone === "") {
                    r.DtDone = new Date();
                }
                if (r.DtPreDone === "") {
                    r.DtPreDone = new Date();
                }

                // now enable/disable as needed
                taskFormDueDate1(f,r);
                $(f.box).find("input[name=DtDue]").prop( "disabled", !r.ChkDtDue );
                $(f.box).find("input[name=DtPreDue]").prop( "disabled", !r.ChkDtPreDue );
            };
        },
        onChange: function(event) {
            event.onComplete = function() {
                var f = w2ui.tlsInfoForm;
                var r = f.record;
                var s = '';
                switch (event.target) {
                case "ChkDtPreDone":
                    taskCompletionChange(event.value_new,"sDtPreDone");
                    r.DtPreDone = new Date();
                    break;
                case "ChkDtDone":
                    taskCompletionChange(event.value_new,"sDtDone");
                    r.DtDone = new Date();
                    break;
                case "ChkDtPreDue":
                    $(f.box).find("input[name=DtPreDue]").prop( "disabled", !r.ChkDtPreDue );
                    if (r.ChkDtPreDue) {
                        if (r.DtPreDue === "" && TLData.sDtPreDue.length > 1) {
                            r.DtPreDue = TLData.sDtPreDue;
                        }
                    } else {
                        TLData.sDtPreDue = r.DtPreDue;
                        r.DtPreDue = '';
                    }
                    f.refresh();
                    break;
                case "ChkDtDue":
                    $(f.box).find("input[name=DtDue]").prop( "disabled", !r.ChkDtDue ); if (r.ChkDtDue) {
                        if (r.DtDue === "" && TLData.sDtDue.length > 1) {
                            r.DtDue = TLData.sDtDue;
                        }
                    } else {
                        TLData.sDtDue = r.DtDue;
                        r.DtDue = '';
                    }
                    f.refresh();
                    break;
                }
            };
        },
    });

    // addDateNavToToolbar('tlsInfoForm');

    //------------------------------------------------------------------------
    //  tlsTaskGrid  -  lists all the tasks associated with this tasklist
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'tlsDetailGrid',
        url: '/v1/tasks/',
        multiSelect: false,
        postData: {searchDtStart: app.D1, searchDtStop: app.D2, Bool1: app.PayorStmtExt},
        columns: [
            {field: 'recid',        caption: 'recid',       size: '35px', sortable: true, hidden: true},
            { field: 'TID',         caption: 'TID',         size: '35px', sotrable: true, hidden: true},
            { field: 'BID',         caption: 'BID',         size: '35px', sotrable: true, hidden: true},
            { field: 'TLID',        caption: 'TLID',        size: '35px', sotrable: true, hidden: true},
            { field: 'TaskName',    caption: 'Name',        size: '300px',sotrable: true, hidden: false},
            { field: 'Worker',      caption: 'Worker',      size: '75px', sotrable: true, hidden: false},
            // { field: 'DtPreDue',    caption: 'DtPreDue',    size: '80px', sotrable: true, hidden: false,
            //     render: function(record, index, col_index) {return renderTaskGridDate(record.DtPreDue); }
            // },
            // { field: 'DtPreDone',   caption: 'DtPreDone',   size: '80px', sotrable: true, hidden: false,
            //     render: function(record, index, col_index) {return renderTaskGridDate(record.DtPreDone); }
            // },
            // { field: 'DtDue',       caption: 'DtDue',       size: '80px', sotrable: true, hidden: false,
            //     render: function(record, index, col_index) {return renderTaskGridDate(record.DtDue); }
            // },
            // { field: 'DtDone',      caption: 'DtDone',      size: '80px', sotrable: true, hidden: false,
            //     render: function(record, index, col_index) {
            //         return renderTaskGridDate(record.DtDone);
            //     }
            // },
            { field: 'DtPreDue',    caption: 'DtPreDue',    size: '80px', sotrable: true, hidden: false,
                render: function(record, index, col_index) {return taskDateRender(record.DtPreDue); }
            },
            { field: 'DtPreDone',   caption: 'DtPreDone',   size: '80px', sotrable: true, hidden: false,
                render: function(record, index, col_index) {return taskDateRender(record.DtPreDone); }
            },
            { field: 'DtDue',       caption: 'DtDue',       size: '80px', sotrable: true, hidden: false,
                render: function(record, index, col_index) {return taskDateRender(record.DtDue); }
            },
            { field: 'DtDone',      caption: 'DtDone',      size: '80px', sotrable: true, hidden: false,
                render: function(record, index, col_index) { return taskDateRender(record.DtDone); }
            },
            { field: 'FLAGS',       caption: 'FLAGS',       size: '35px', sotrable: true, hidden: true},
            { field: 'DoneUID',     caption: 'DoneUID',     size: '35px', sotrable: true, hidden: true},
            { field: 'PreDoneUID',  caption: 'PreDoneUID',  size: '35px', sotrable: true, hidden: true},
            { field: 'TaskComment', caption: 'Comment',     size: '35px', sotrable: true, hidden: true},
            { field: 'LastModTime', caption: 'LastModTime', size: '35px', sotrable: true, hidden: true},
            { field: 'LastModBy',   caption: 'LastModBy',   size: '35px', sotrable: true, hidden: true},
            { field: 'CreateTS',    caption: 'CreateTS',    size: '35px', sotrable: true, hidden: true},
            { field: 'CreateBy',    caption: 'CreateBy',    size: '35px', sotrable: true, hidden: true},
        ],
        onClick: function(event) {
            event.onComplete = function (event) {
                var r = w2ui.tlsDetailGrid.records[event.recid];
                console.log( 'detail clicked: v1/tasks/' + r.BID + '/'+ r.TID);
                openTaskForm(r.BID,r.TID);
            };
        },
        onRender: function (event) {
            event.onComplete = function (event) {
                setTaskButtonsState();
            };
        },
        onReload: function(event) {
            event.onComplete = function (event) {
                setTaskButtonsState();
            };
        },
    });

    //------------------------------------------------------------------------
    //  taskForm
    //  FLAG Field TaskListDefinition
    //    1<<0 : 0 = active, 1 = inactive
    //    1<<1 : 0 = task list definition does not have a PreDueDate, 1 = has a PreDueDate
    //    1<<2 : 0 = task list definition does not have a DueDate, 1 = has a DueDate
    //    1<<3 : 0 = DtPreDue has not been set, 1 = DtPreDue has been set
    //    1<<4 : 0 = DtDue has not been set, 1 = DtDue has been set
    //    1<<5 : 0 = no notification has been sent, 1 = Notification sent on DtLastNotify
    //------------------------------------------------------------------------
    $().w2form({
        name: 'taskForm',
        style: 'border: 0px; background-color: transparent;',
        formURL: '/webclient/html/formtask.html',
        url: '/v1/task',
        toolbar: {
            items: [
                { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
                { id: 'bt3', type: 'spacer' },
                { id: 'btnClose', type: 'button', icon: 'fas fa-times' },
            ],
            onClick: function (event) {
                event.onComplete = function() {
                    switch(event.target) {
                    case 'btnClose':
                        var no_callBack = function() { return false; };
                        var yes_callBack = function() {
                                closeTaskForm();
                                w2ui.tlLayout.render();
                        };
                        form_dirty_alert(yes_callBack, no_callBack);
                        break;
                    }
                };
            },
        },
        fields: [
            { field: 'recid',        type: 'text',     required: false },
            { field: 'TID',          type: 'text',     required: false },
            { field: 'BID',          type: 'text',     required: false },
            { field: 'TLID',         type: 'text',     required: false },
            { field: 'TaskName',     type: 'text',     required: true  },
            { field: 'Worker',       type: 'text',     required: false },
            { field: 'DtDue',        type: 'datetime', required: false },
            { field: 'DtPreDue',     type: 'datetime', required: false },
            { field: 'DtDone',       type: 'datetime', required: false },
            { field: 'DtPreDone',    type: 'datetime', required: false },
            { field: 'FLAGS',        type: 'text',     required: false },
            { field: 'DoneUID',      type: 'text',     required: false },
            { field: 'PreDoneUID',   type: 'text',     required: false },
            { field: 'TaskComment',  type: 'text',     required: false },
            { field: 'LastModTime',  type: 'date',     required: false },
            { field: 'LastModBy',    type: 'int',      required: false },
            { field: 'CreateTS',     type: 'date',     required: false },
            { field: 'CreateBy',     type: 'int',      required: false },
            { field: 'TZOffset',     type: 'int',      required: false },
            { field: 'ChkDtDue',     type: 'checkbox', required: false },
            { field: 'ChkDtDone',    type: 'checkbox', required: false },
            { field: 'ChkDtPreDue',  type: 'checkbox', required: false },
            { field: 'ChkDtPreDone', type: 'checkbox', required: false },
        ],
        actions: {
            save: function(target, data){
                //---------------------------------------------------------
                // When the w2popup is active, it suspends the operation
                // of things like setInterval() handling.  So the session
                // may have expired by the time we close this dialog. So,
                // we need to explicity call ensureSession to make sure
                // we have a session before proceeding.
                //---------------------------------------------------------
                ensureSession();

                //---------------------------
                // Now, on with the save...
                //---------------------------
                var f = w2ui.taskForm;
                var r = f.record;
                var d = {cmd: "save", record: r};
                r.DtDone = localtimeToUTC(r.DtDone);
                r.DtPreDone = localtimeToUTC(r.DtPreDone);
                r.DtDue = localtimeToUTC(r.DtDue);
                r.DtPreDue = localtimeToUTC(r.DtPreDue);
                if (r.DtDone.length === 0) {
                    r.DtDone = TLD.TIME0;
                }
                if (r.DtPreDone.length === 0) {
                    r.DtPreDone = TLD.TIME0;
                }
                if (r.DtDue.length === 0) {
                    r.DtDue = TLD.TIME0;
                }
                if (r.DtPreDue.length === 0) {
                    r.DtPreDue = TLD.TIME0;
                }
                r.TZOffset = app.TZOffset;
                var dat=JSON.stringify(d);
                f.url = '/v1/task/' + r.BID + '/' + r.TID;
                $.post(f.url,dat)
                .done(function(data) {
                    if (data.status === "error") {
                        f.error(w2utils.lang(data.message));
                        return;
                    }
                    //w2ui.tlsDetailGrid.url = '/v1/tl/'
                    w2ui.tlsDetailGrid.reload();
                    // w2popup.close();
                    closeTaskForm();
                    setTaskButtonsState();
                    w2ui.tlLayout.render();
                })
                .fail(function(/*data*/){
                    f.error("Save Tasklist failed.");
                    return;
                });
            },
        },
       onRefresh: function(event) {
            event.onComplete = function(event) {
                var f = w2ui.taskForm;
                var r = f.record;
                if (typeof r.DtPreDue === "undefined") {
                    return;
                }
                // r.ChkDtPreDue  = taskFormDueDate(r.DtPreDue,      r.ChkDtPreDue,'tskDtPreDue',  'no pre-due date'               );
                // r.ChkDtDue     = taskFormDueDate(r.DtDue,         r.ChkDtDue,   'tskDtDue',     'no due date'                   );
                taskFormDueDate1(f,r);
                r.ChkDtPreDone = taskFormDoneDate(r.ChkDtPreDone, r.DtPreDone,  r.DtPreDue,   r.ChkDtPreDone, r.PreDoneUID, r.TaskPreDoneName, 'tskDtPreDone', 'tskPreDoneName', 'tskPreOverdue');
                r.ChkDtDone    = taskFormDoneDate(r.ChkDtDone,    r.DtDone,     r.DtDue,      r.ChkDtDone,    r.DoneUID,    r.TaskDoneName,    'tskDtDone',    'tskDoneName',    'tskOverdue'   );
            };
        },
        onChange: function(event) {
            event.onComplete = function() {
                var f = w2ui.taskForm;
                var r = f.record;
                switch (event.target) {
                case "ChkDtPreDone":
                    taskCompletionChange(event.value_new,"tskDtPreDone");
                    break;
                case "ChkDtDone":
                    taskCompletionChange(event.value_new,"tskDtDone");
                    break;
                case "ChkDtPreDue":
                    $(f.box).find("input[name=DtPreDue]").prop( "disabled", !r.ChkDtPreDue );
                    if (r.ChkDtPreDue) {
                        if (r.DtPreDue === "" && TLData.sDtPreDue.length > 1) {
                            r.DtPreDue = TLData.sDtPreDue;
                        }
                    } else {
                        TLData.sDtPreDue = r.DtPreDue;
                        r.DtPreDue = '';
                    }
                    f.refresh();
                    break;
                case "ChkDtDue":
                    $(f.box).find("input[name=DtDue]").prop( "disabled", !r.ChkDtDue );
                    if (r.ChkDtDue) {
                        if (r.DtDue === "" && TLData.sDtDue.length > 1) {
                            r.DtDue = TLData.sDtDue;
                        }
                    } else {
                        TLData.sDtDue = r.DtDue;
                        r.DtDue = '';
                    }
                    f.refresh();
                    break;
                }

            };
        },
        onRender: function(event) {
            event.onComplete = function(event) {
                setTaskButtonsState();
            };
        },
        onLoad: function(event) {
            event.onComplete = function(event) {
                var f = w2ui.taskForm;
                var r = f.record;

                // translate dates into a format that w2ui understands
                r.DtPreDue  = dtFormatISOToW2ui(r.DtPreDue);
                r.DtDue     = dtFormatISOToW2ui(r.DtDue);
                r.DtPreDone = dtFormatISOToW2ui(r.DtPreDone);
                r.DtDone    = dtFormatISOToW2ui(r.DtDone);

                if (r.DtDone === "") {
                    r.DtDone = new Date();
                }
                if (r.DtPreDone === "") {
                    r.DtPreDone = new Date();
                }

                // now enable/disable as needed
                taskFormDueDate1(f,r);
                $(f.box).find("input[name=DtDue]").prop( "disabled", !r.ChkDtDue );
                $(f.box).find("input[name=DtPreDue]").prop( "disabled", !r.ChkDtPreDue );
            };
        },
    });

    //------------------------------------------------------------------------
    //  tlsCloseForm
    //------------------------------------------------------------------------
    $().w2form({
        name: 'tlsCloseForm',
        style: 'border: 0px; background-color: transparent;',
        formURL: '/webclient/html/formtlclose.html',
        url: '',
        fields: [],
        actions: {
            save: function(target, data){
                // getFormSubmitData(data.postData.record);
                var r = w2ui.tlsInfoForm.record;

                //------------------------------------------------
                // due and done times do not matter, server looks
                // at the check values and sets time based on its
                // own local clock. We do not accept these times
                // from a client.
                //------------------------------------------------
                r.DtDone = TLD.TIME0;
                r.DtPreDone = TLD.TIME0;
                r.TZOffset = app.TZOffset;
                r.DtDue = localtimeToUTC(r.DtDue);
                r.DtPreDue = localtimeToUTC(r.DtPreDue);
                var cycle = r.Cycle.id;
                r.Cycle = cycle;

                var tl = {
                    cmd: "save",
                    record: r,
                };
                var dat=JSON.stringify(tl);
                var url='/v1/tl/' + w2ui.tlsInfoForm.record.BID + '/' + w2ui.tlsInfoForm.record.TLID;
                $.post(url,dat)
                .done(function(data) {
                    if (data.status === "error") {
                        w2ui.tlsInfoForm.error(w2utils.lang(data.message));
                        return;
                    }
                    w2ui.toplayout.hide('right',true);
                    w2ui.tlsGrid.render();
                })
                .fail(function(/*data*/){
                    w2ui.tlsInfoForm.error("Save Tasklist failed.");
                    return;
                });
            },
            delete: function(target,data) {
                var tl = {
                    cmd: "delete",
                };
                var dat=JSON.stringify(tl);
                var url='/v1/tl/' + w2ui.tlsInfoForm.record.BID + '/' + w2ui.tlsInfoForm.record.TLID;
                $.post(url,dat)
                .done(function(data) {
                    if (data.status === "error") {
                        w2ui.tlsInfoForm.error(w2utils.lang(data.message));
                        return;
                    }
                    w2ui.toplayout.hide('right',true);
                    w2ui.tlsGrid.render();
                })
                .fail(function(/*data*/){
                    w2ui.tlsInfoForm.error("Save Tasklist failed.");
                    return;
                });
            },
        },
    });

    //------------------------------------------------------------------------
    //  tlLayout - The layout to contain the stmtForm and tlsDetailGrid
    //               top  - stmtForm
    //               main - tlsDetailGrid
    //------------------------------------------------------------------------
    $().w2layout({
        name: 'tlLayout',
        padding: 0,
        panels: [
            { type: 'left',    size: 0,     hidden: true },
            { type: 'top',     size: '40%', hidden: false, content: 'top',  resizable: true, style: app.pstyle },
            { type: 'main',    size: '60%', hidden: false, content: 'main', resizable: true, style: app.pstyle },
            { type: 'preview', size: 0,     hidden: true,  content: 'PREVIEW'  },
            { type: 'bottom',  size: 50,    hidden: false, content: 'bottom', resizable: false, style: app.pstyle },
            { type: 'right',   size: 0,     hidden: true }
        ]
    });

    //------------------------------------------------------------------------
    //  newTaskListForm
    //------------------------------------------------------------------------
    $().w2form({
        name: 'newTaskListForm',
        style: 'border: 0px; background-color: transparent;',
        formURL: '/webclient/html/formnewtl.html',
        url: '/v1/tl',
        fields: [
            { field: 'BID',      type: 'int',  required: false },
            { field: 'TLDID',    type: 'int',  required: false },
            { field: 'Name',     type: 'list', required: true, options:  {items: [], selected: {}},  },
            { field: 'Pivot',    type: 'date', required: true },
        ],
        actions: {
            save: function(target, data){
                var f = w2ui.newTaskListForm;
                var r = f.record;
                f.url = '/v1/tl/' + r.BID + '/0';
                var s = r.Name.text;
                r.TLDID = r.Name.id;
                r.Name = s;
                r.Pivot = localtimeToUTC(r.Pivot);
                r.Timezone = app.timezone;
                var params = {cmd: 'save', formname: f.name, record: r };

                var dat = JSON.stringify(params);
                var BID = r.BID;

                // submit request
                $.post(f.url, dat, null, "json")
                .done(function(data) {
                    if (data.status != "success") {
                        return;
                    }
                    w2ui.tlsGrid.reload();
                    var tlid = data.recid;
                    setToTLForm(BID, tlid, app.D1, app.D2);
                    w2popup.close();
                })
                .fail(function(/*data*/){
                    console.log("Payor Fund Allocation failed.");
                });

            },
        },
        // onLoad: function(event) {
        //     event.onComplete = function(event) {

        //     };
        // },
        onRefresh: function(event) {
            // var f = this;
            // event.onComplete = function(event) {
            // };
        },
        onChange: function(event) {
            // event.onComplete = function() {
            // };
        },
    });

};

window.finishTaskListForm = function () {
    w2ui.tlLayout.content('top',   w2ui.tlsInfoForm);
    w2ui.tlLayout.content('main',  w2ui.tlsDetailGrid);
    w2ui.tlLayout.content('bottom',w2ui.tlsCloseForm);
};

//-----------------------------------------------------------------------------
// createNewTaskList - pop up dialog where the user can select one of the
//      defined TaskListDefinitions and set the Pivot date. Then create a
//      new TaskList, update the grid, and bring it up in the edit form
//
// @params
//
// @returns
//
//-----------------------------------------------------------------------------
window.createNewTaskList = function (bid) {
    //-------------------------------------------------------
    // First get the latest list of TaskListDefinitions...
    //-------------------------------------------------------
    getTLDs(bid,popupNewTaskListForm);
};


//-----------------------------------------------------------------------------
// renderTaskGridDate - if the year is 1970 or less return '', otherwise
//      return the date string (ds).
//
// @params - ds = date string
//
// @return date string or ''
//
//-----------------------------------------------------------------------------
window.renderTaskGridDate = function (ds) {
    var d = new Date(ds);
    if (d.getFullYear() > 1970) {
        return ds;
    }
    return '';
};


//-----------------------------------------------------------------------------
// getTLDs - return the promise object of request to get latest
//           TaskListDefinitions for given BID.
//           It updates the "app.TaskListDefinitions" variable for requested BUD
//
// @params  - BID     : Business ID (expected current one)
//          - handler : Business Unit Designation
// @return  - promise object from $.get
//-----------------------------------------------------------------------------
window.getTLDs = function (BID,handler) {
    var BUD = getBUDfromBID(BID);

    // return promise
    return $.get("/v1/uival/" + BID + "/app.TaskListDefinitions", null, null, "json")
            .done(function(data) {
                // if it doesn't meet this condition, then save the data
                if (app.TaskListDefinitions === null ) {
                    app.TaskListDefinitions = [];
                }
                app.TaskListDefinitions[BUD] = data[BUD];
                var f = w2ui.newTaskListForm;
                f.get('Name').options.items = app.TaskListDefinitions[BUD];
                f.record = getNewTaskListRecord(BID);
                f.record.TLID = app.TaskListDefinitions[BUD][0].id;
                f.record.Name = app.TaskListDefinitions[BUD][0];
                f.refresh();
                handler(BID);
            });
};

//-----------------------------------------------------------------------------
// popupNewTaskListForm - Bring up the task edit form
//
// @params
//     bid = business id
//
// @returns
//
//-----------------------------------------------------------------------------
window.popupNewTaskListForm = function (bid) {
    w2ui.newTaskListForm.url = '/v1/tl/' + bid + '/0';
    // w2ui.newTaskListForm.request();
    $().w2popup('open', {
        title   : 'New Task List',
        body    : '<div id="form" style="width: 100%; height: 100%;"></div>',
        style   : 'padding: 15px 0px 0px 0px',
        width   : 450,
        height  : 220,
        showMax : true,
        onToggle: function (event) {
            $(w2ui.newTaskListForm.box).hide();
            event.onComplete = function () {
                $(w2ui.newTaskListForm.box).show();
                w2ui.newTaskListForm.resize();
            };
        },
        onOpen: function (event) {
            event.onComplete = function () {
                $('#w2ui-popup #form').w2render('newTaskListForm');
            };
        }
    });
};
//-----------------------------------------------------------------------------
// setToTLForm -  enable the Statement form in toplayout.  Also, set
//                the forms url and request data from the server
// @params
//   bid = business id (or the BUD)
//    id = Task List TLID
// d1,d2 = date range to use
//-----------------------------------------------------------------------------
window.setToTLForm = function (bid, id, d1,d2) {
    if (id > 0) {
        w2ui.tlsGrid.url = '/v1/tls/' + bid;                    // the grid of tasklists
        w2ui.tlsDetailGrid.url = '/v1/tasks/' + bid + '/' + id; // the tasks associated with the selected tasklist
        w2ui.tlsInfoForm.url = '/v1/tl/' + bid + '/' + id;      // the tasklist details
        w2ui.tlsInfoForm.postData = {
            searchDtStart: d1,
            searchDtStop: d2,
        };
        w2ui.tlsInfoForm.header = 'Task List ' + id;
        w2ui.tlsInfoForm.request();

        w2ui.toplayout.content('right', w2ui.tlLayout);
        w2ui.toplayout.show('right', true);
        w2ui.toplayout.sizeTo('right', TL.TLFormWidth);
        w2ui.toplayout.render();
        app.new_form_rec = false;  // mark as record exists
        app.form_is_dirty = false; // mark as no changes yet
    }
};

//-----------------------------------------------------------------------------
// taskDateRender - If the date is less than year 2000 then return a blank
//                otherwise return the date as a string.
// @params
//   y - the date to be printed
// @returns
//   the string to print
//-----------------------------------------------------------------------------
window.taskDateRender = function (x) {
    if (x === null) {
        return '';
    }
    var y;
    if (typeof x == "string"){
        y = dateFromString(x);
    }
    if (typeof x == "object") {
        y = x;
    }
    var yr = y.getFullYear();
    if ( yr <= 1970) {
        return '';
    }
    // return dtTextRender(x,0,0);
    return dtFormatISOToW2ui(x);
};

//-----------------------------------------------------------------------------
// openTaskForm - Bring up the task edit form
//
// @params
//     bid = business id
//     tid = task id
//
// @returns
//
//-----------------------------------------------------------------------------
window.openTaskForm = function (bid,tid) {
    TL.formBtnsDisabled = true;
    w2ui.taskForm.url = '/v1/task/' + bid + '/' + tid;
    w2ui.taskForm.request();
    var n = '' + tid;
    w2ui.taskForm.header = 'Task ('+ (n === '0' ? 'new':n)  + ')';
    w2ui.tlLayout.content('right', w2ui.taskForm);
    w2ui.tlLayout.sizeTo('right', TL.TaskWidth);
    w2ui.tlLayout.show('right');
    w2ui.tlLayout.render();
};

//-----------------------------------------------------------------------------
// closeTaskForm - Close the task descriptor edit form
//
// @params
//     bid = business id
//     tdid = task descriptor id
//
// @returns
//
//-----------------------------------------------------------------------------
window.closeTaskForm = function (bid,tdid) {
    w2ui.tlLayout.hide('right');
    w2ui.tlLayout.sizeTo('right', 0);
    w2ui.tlsDetailGrid.render();
    TL.formBtnsDisabled = false;
};

//-----------------------------------------------------------------------------
// setInnerHTML - form formatting.  saves a few lines by handling the null case.
//
// @params
//      id  = html element id for string update
//      s   = string for no date value
//
// @returns
//
//-----------------------------------------------------------------------------
window.setInnerHTML = function (id,s) {
    var e = document.getElementById(id);
    if (e != null) {
        e.innerHTML = s;
    }
};

//-----------------------------------------------------------------------------
// taskFormDueDate - form formatting
//
// @params
//       dt = datetime string
//       b  = boolean check box value (false = unchecked)
//      id  = html element id for string update
//      txt = string for no date value
//
// @returns
//      updated value for ChkDt...  true if year >= 2000
//
//-----------------------------------------------------------------------------
window.taskFormDueDate = function (dt,b,id,txt) {
    if (dt !== null && dt.length > 0) {
        var y = dateFromString(dt);
        var s = '';
        b = y.getFullYear() >= 2000;
        if (b) {
            s = taskDateRender(dt);
        } else {
            s = txt;
        }
        setInnerHTML(id,s);
    }
    return b;
};

//-----------------------------------------------------------------------------
// taskFormDoneDate - form formatting
//       r.ChkDtPreDone = taskFormDoneDate(r.ChkDtPreDone, r.DtPreDone,r.DtPreDue,   r.ChkDtPreDone, r.PreDoneUID, r.PreDoneName, 'sDtPreDone','tlPreDoneName', 'tlPreOverdue');
// @params
//      bDone = boolean indicates whether or not a done date has been supplied.
//              This value may change during editing. When the user checks
//              the box, the server will supply the done date.  If the box is
//              unchecked, the server will mark that no done date has been
//              supplied (thus the task is not completed)
//      sDtDone  = datetime string when the task was completed
//      sDtDue  = due datetime string - indicates when the task was due
//
//      uid  = uid of user who marked this as done
//      name = name associated with uid
//      id   = html element id for string update
//      id2  = html area for name
//      id3  = string to indicate late
//
// @returns
//      updated value for ChkDt...  true if year >= 2000
//
//-----------------------------------------------------------------------------
window.taskFormDoneDate = function (bDone,sDtDone,sDtDue,b,uid,name,id,id2,id3) {
    var strDoneDate = ""; // string for sDtDone

    if (typeof sDtDone== "string") {
        strDoneDate = sDtDone;
    } else if (typeof sDtDone == "object") {
        strDoneDate = sDtDone.toISOString();
    }

    if (strDoneDate !== null && strDoneDate.length > 0) {
        //--------------------------
        // id: date
        //--------------------------
        var y = new Date(strDoneDate);
        var s = '';
        if (bDone) {
            bDone = y.getFullYear() >= 2000;
            if (bDone) {
                s = taskDateRender(sDtDone);
            }
        }
        setInnerHTML(id,s);

        //--------------------------
        // id2: name indicator
        //--------------------------
        setInnerHTML(id2, (uid > 0) ? '('+name+')' : '');

        //--------------------------
        // id3: late indicator:
        //      if a Done date has been supplied, see if it's past the due date
        //      if no Done date has been supplied, see if the current time is past the due date
        //--------------------------
        var dtDue = dateFromString(sDtDue);
        var now = new Date();
        var dtDone = dateFromString(strDoneDate);
        s = '';
        if ( (bDone && dtDone > dtDue) || (!bDone && now > dtDue)) {
            if (dtDue.getFullYear() > 1970) {
                s = '<span style="color:#FC0D1B;">&nbsp;LATE</span>';
            }
        }
        if ( bDone && dtDone <= dtDue ) {
            s = '&#9989;';
        }
        setInnerHTML(id3,s);
    }
    return bDone;
};

//-----------------------------------------------------------------------------
// taskCompletionChange - form formatting
//
// @params
//       b  = boolean check box value (false = unchecked)
//      id  = html element id for string update
//
// @returns
//      updated value for ChkDt...  true if year >= 2000
//
//-----------------------------------------------------------------------------
window.taskCompletionChange = function (b,id) {
    var s;
    if (b) { // marked as complete?
        s = '<span style="color:blue;">mark as completed when Save is clicked</span>';
    } else {
        s = '<span style="color:blue;">mark as not completed when Save is clicked</span>';
    }
    setInnerHTML(id,s);
};

//-----------------------------------------------------------------------------
// setTaskButtonsState - set the form Save / Delete button state to
//                       the value in TL.
//
// @params
//
// @returns
//
//-----------------------------------------------------------------------------
window.setTaskButtonsState = function() {
    $(w2ui.tlsCloseForm.box).find("button[name=save]").prop( "disabled", TL.formBtnsDisabled );
    $(w2ui.tlsCloseForm.box).find("button[name=delete]").prop( "disabled", TL.formBtnsDisabled );
};

"use strict";
/*global
    w2ui, $, app, console,setToTLDForm, w2alert,
    form_dirty_alert, addDateNavToToolbar, w2utils,
    openTaskDescForm, ensureSession, dtFormatISOToW2ui,
    dtFormatISOToW2ui, localtimeToUTC, setDefaultFormFieldAsPreviousRecord,
    getTLDInitRecord, getCurrentBID, getTDInitRecord, saveTaskListDefinition,
    closeTaskDescForm, setTaskDescButtonsState, newDateKeepOldTime,
    w2uiDateTimeControlString, tldsLoadEventCB,
*/

// Temporary storage for when a date is toggled off
var TaskDescData = {
    sEpochDue: '',
    sEpochPreDue: '',
};

var TLDData = {
    sEpoch: '',
    sEpochDue: '',
    sEpochPreDue: '',
};

var TLD = {
    FormWidth: 550,
    TaskDescWidth: 600,
    formBtnsDisabled: false,
    TIME0: '1/1/1970',
};

window.getTLDInitRecord = function (BID, previousFormRecord){
    var y = new Date();
    var y1 = new Date( y.getFullYear(), y.getMonth(), 1);
    var month = (y.getMonth() + 1) % 12;
    var epochPreDue = new Date(y.getFullYear(), y.getMonth(), 20);
    var epochDue = new Date(y.getFullYear(), month, 0);

    // var Cycle;
    // for (var i = 0; i < app.cycleFreq.length; i++) {
    //     if (app.cycleFreq[i] === "Monthly") {
    //         Cycle = i;
    //     }
    // }

    var defaultFormData = {
        TLDID: 0,
        BID: BID,
        Name: '',
        Cycle: 6,
        ChkEpochDue: true,
        ChkEpochPreDue: true,
        Epoch: dtFormatISOToW2ui(y1.toString()),
        EpochDue: dtFormatISOToW2ui(epochDue.toString()),
        EpochPreDue: dtFormatISOToW2ui(epochPreDue.toString()),
        DurWait: 86400000000000,
        FLAGS: 0,
        Comment: '',
        CreateTS: y.toString(),
        CreateBy: app.uid,
        LastModTime: y.toString(),
        LastModBy: app.uid,
        EmailList: '',
    };

    // if called after 'save and add another' action there previous form record is passed as Object
    // else it is null
    if ( previousFormRecord ) {
        defaultFormData = setDefaultFormFieldAsPreviousRecord(
            [ 'ChkEpochDue', 'ChkEpochPreDue', 'EpochDue', 'EpochPreDue'], // Fields to Reset
            defaultFormData,
            previousFormRecord
        );
    }
    return defaultFormData;
};

window.getTDInitRecord = function (BID, TDID, previousFormRecord){
    var y = new Date();
    var y1 = new Date( y.getFullYear(), y.getMonth(), 1);
    var month = (y.getMonth() + 1) % 12;
    var epochPreDue = new Date(y.getFullYear(), y.getMonth(), 20);
    var epochDue = new Date(y.getFullYear(), month, 0);

    var defaultFormData = {
        TDID: 0,
        Worker: '',
        lstWorker: '',
        DoneUID: 0,
        PreDoneUID: 0,
        TLDID: w2ui.tldsInfoForm.record.TLDID,
        BID: BID,
        Name: '',
        Cycle: 6,
        ChkEpochDue: true,
        ChkEpochPreDue: true,
        Epoch: dtFormatISOToW2ui(y1.toString()),
        EpochDue: dtFormatISOToW2ui(epochDue.toString()),
        EpochPreDue: dtFormatISOToW2ui(epochPreDue.toString()),
        FLAGS: 0,
        Comment: '',
        CreateTS: y.toString(),
        CreateBy: app.uid,
        LastModTime: y.toString(),
        LastModBy: app.uid,
    };

    // if called after 'save and add another' action there previous form record is passed as Object
    // else it is null
    if ( previousFormRecord ) {
        defaultFormData = setDefaultFormFieldAsPreviousRecord(
            [ 'ChkEpochDue', 'ChkEpochPreDue', 'EpochDue', 'EpochPreDue'], // Fields to Reset
            defaultFormData,
            previousFormRecord
        );
    }
    return defaultFormData;
};


window.buildTaskListDefElements = function () {
    //------------------------------------------------------------------------
    //          tldsGrid  -  THE LIST OF ALL Task List Definitions
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'tldsGrid',
        url: '/v1/tlds',
        multiSelect: false,
        postData: {searchDtStart: app.D1, searchDtStop: app.D2},
        show: {
            toolbar         : true,
            footer          : true,
            toolbarAdd      : true,   // indicates if toolbar add new button is visible
            toolbarDelete   : false,   // indicates if toolbar delete button is visible
            toolbarSave     : false,   // indicates if toolbar save button is visible
            selectColumn    : false,
            expandColumn    : false,
            toolbarEdit     : false,
            toolbarSearch   : false,
            toolbarInput    : true,
            searchAll       : false,
            toolbarReload   : true,
            toolbarColumns  : true,
        },
        columns: [
            {field: 'recid',     hidden: true,  caption: 'recid',                   size: '40px',  sortable: true},
            {field: 'BID',       hidden: true,  caption: 'BID',                     size: '40px',  sortable: true},
            {field: 'Name',      hidden: false, caption: 'Name',                    size: '250px', sortable: true},
        ],
        onClick: function(event) {
            event.onComplete = function () {
                var yes_args = [this, event.recid],
                    no_args = [this],
                    no_callBack = function(grid) {
                        grid.select(app.last.grid_sel_recid);
                        return false;
                    },
                    yes_callBack = function(grid, recid) {
                        app.last.grid_sel_recid = parseInt(recid);

                        // keep highlighting current row in any case
                        grid.select(app.last.grid_sel_recid);

                        var rec = grid.get(recid);
                        console.log( 'BID = ' + rec.BID + ',   TLDID = ' + rec.TLDID);
                        setToTLDForm(rec.BID, rec.TLDID, app.D1, app.D2);
                    };

                // warn user if form content has been changed
                form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
            };
        },
        onAdd: function (/*event*/) {
            var yes_args = [this],
                no_callBack = function() { return false; },
                yes_callBack = function(grid) {
                    var BID = getCurrentBID();
                    // reset it
                    app.last.grid_sel_recid = -1;
                    grid.selectNone();
                    setToTLDForm(BID, 0, app.D1, app.D2);
                };

                // warn user if form content has been changed
                form_dirty_alert(yes_callBack, no_callBack, yes_args);
        },
    });

    addDateNavToToolbar('tlds'); // "Grid" is appended to the

    //------------------------------------------------------------------------
    //  tldsInfoForm
    //------------------------------------------------------------------------
    $().w2form({
        name: 'tldsInfoForm',
        style: 'border: 0px; background-color: transparent;',
        header: 'Task List Definition',
        url: '/v1/tld',
        formURL: '/webclient/html/formtld.html',
        toolbar: {
            items: [
                { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
                { id: 'bt3', type: 'spacer' },
                { id: 'btnClose', type: 'button', icon: 'fas fa-times' },
            ],
            onClick: function (event) {
                event.onComplete = function() {
                    // var g = w2ui.tlsDetailGrid;
                    // var r = w2ui.tlsInfoForm.record;
                    // var d1, d2, url;
                    switch(event.target) {
                    case 'btnClose':
                        var no_callBack = function() { return false; },
                            yes_callBack = function() {
                                closeTaskDescForm();
                                w2ui.toplayout.hide('right',true);
                                w2ui.tlsGrid.render();
                            };
                        form_dirty_alert(yes_callBack, no_callBack);
                        break;
                    }
                };
            },
        },
        fields: [
            { field: 'recid',          type: 'int',      required: false },
            { field: 'TLDID',          type: 'int',      required: false },
            { field: 'BID',            type: 'int',      required: false },
            { field: 'Name',           type: 'text',     required: true },
            { field: 'Cycle',          type: 'list',     required: true, options: {items: app.w2ui.listItems.cycleFreq}, },
            { field: 'ChkEpochDue',    type: 'checkbox', required: false },
            { field: 'ChkEpochPreDue', type: 'checkbox', required: false },
            { field: 'Epoch',          type: 'datetime', required: false },
            { field: 'EpochDue',       type: 'datetime', required: false },
            { field: 'EpochPreDue',    type: 'datetime', required: false },
            { field: 'FLAGS',          type: 'int',      required: false },
            { field: 'EmailList',      type: 'text',     required: false },
            { field: 'Comment',        type: 'text',     required: false },
            { field: 'DurWait',        type: 'int',      required: false },
            { field: 'CreateTS',       type: 'date',     required: false },
            { field: 'CreateBy',       type: 'int',      required: false },
            { field: 'TZOffset',       type: 'int',      required: false },
            { field: 'LastModTime',    type: 'date',     required: false },
            { field: 'LastModBy',      type: 'int',      required: false },
        ],
        onLoad: function(event) {
            event.onComplete = function(event) {
                var f = w2ui.tldsInfoForm;
                var r = f.record;
                if (typeof r.EpochPreDue === "undefined") {
                    return;
                }

                // translate dates into a format that w2ui understands
                r.EpochPreDue = dtFormatISOToW2ui(r.EpochPreDue);
                r.EpochDue    = dtFormatISOToW2ui(r.EpochDue);
                r.Epoch       = dtFormatISOToW2ui(r.Epoch);

                // now enable/disable as needed
                $(f.box).find("input[name=EpochDue]").prop( "disabled", !r.ChkEpochDue );
                $(f.box).find("input[name=EpochPreDue]").prop( "disabled", !r.ChkEpochPreDue );
                $(f.box).find("input[name=Epoch]").prop( "disabled", r.Cycle < 4);  // enable if recur is Daily, Weekly, Monthlhy, quarterly or yearly
            };
        },
        onChange: function(event) {
            event.onComplete = function() {
                var f = this;
                var r = f.record;
                var b;
                switch (event.target) {
                case "ChkEpochPreDue":
                    $(f.box).find("input[name=EpochPreDue]").prop( "disabled", !r.ChkEpochPreDue );
                    if (r.ChkEpochPreDue) {
                        if (r.EpochPreDue === "" && TLDData.sEpochPreDue.length > 1) {
                            r.EpochPreDue = TLDData.sEpochPreDue;
                        }
                    } else {
                        TLDData.sEpochPreDue = r.EpochPreDue;
                        r.EpochPreDue = '';
                    }
                    f.refresh();
                    break;
                case "ChkEpochDue":
                    $(f.box).find("input[name=EpochDue]").prop( "disabled", !r.ChkEpochDue );
                    if (r.ChkEpochDue) {
                        if (r.EpochDue === "" && TLDData.sEpochDue.length > 1) {
                            r.EpochDue = TLDData.sEpochDue;
                        }
                    } else {
                        TLDData.sEpochDue = r.EpochDue;
                        r.EpochDue = '';
                    }
                    f.refresh();
                    break;
                case "Cycle":
                    b = r.Cycle.id < 4; // 4 is daily
                    $(f.box).find("input[name=Epoch]").prop( "disabled", b);
                    if (b && event.value_previous.id >= 4) {  // change from need date to don't need date
                        TLDData.sEpoch = r.Epoch;
                        r.Epoch = '';
                    } else if (!b && event.value_previous.id < 4 ) { // change from don't need date to need date
                        if (r.Epoch === "" && TLDData.sEpoch.length > 1) {
                            r.Epoch = TLDData.sEpoch;
                        }
                    }
                    f.refresh();
                    break;
                case "Epoch":
                case "EpochDue":
                case "EpochPreDue":
                    // all dates must be in sync if cycle > 0 and < 4
                    if (0 < r.Cycle.id && r.Cycle.id <= 4) {
                        if (event.value_new === "") {
                            r[event.target] = event.value_previous;
                            event.isCancelled = true;
                            f.refresh();
                            return;
                        }
                        var dt = new Date(r[event.target]);
                        var da = dt.getDate();
                        var mn = dt.getMonth();
                        var yr = dt.getFullYear();
                        r.Epoch       = w2uiDateTimeControlString(newDateKeepOldTime(r.Epoch,yr,mn,da));
                        r.EpochDue    = w2uiDateTimeControlString(newDateKeepOldTime(r.EpochDue,yr,mn,da));
                        r.EpochPreDue = w2uiDateTimeControlString(newDateKeepOldTime(r.EpochPreDue,yr,mn,da));
                    }
                    // we must always keep epoch at localtime 00:00
                    var ddt = new Date(r.Epoch);
                    //var dd1 = new Date(ddt.getFullYear(), ddt.getMonth(), ddt.getDate(), 0, 0 );
                    r.Epoch = w2uiDateTimeControlString(ddt);
                    f.refresh();
                    break;
                }
            };
        },

    });

    //------------------------------------------------------------------------
    //  tldsTaskGrid  -  lists all the tasks associated with the task list
    //                   definition currently being edited.
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'tldsDetailGrid',
        url: '/v1/tds/',
        multiSelect: false,
        postData: {searchDtStart: app.D1, searchDtStop: app.D2, Bool1: app.PayorStmtExt},
        show: {
            toolbar         : true,
            footer          : false,
            toolbarAdd      : true,   // indicates if toolbar add new button is visible
            toolbarDelete   : false,   // indicates if toolbar delete button is visible
            toolbarSave     : false,   // indicates if toolbar save button is visible
            selectColumn    : false,
            expandColumn    : false,
            toolbarEdit     : false,
            toolbarSearch   : false,
            toolbarInput    : false,
            searchAll       : false,
            toolbarReload   : false,
            toolbarColumns  : true,
        },
        columns: [
            { field: 'recid',       caption: 'recid',       size: '35px',  sortable: true, hidden: true},
            { field: 'TDID',        caption: 'TDID',        size: '35px',  sotrable: true, hidden: true},
            { field: 'BID',         caption: 'BID',         size: '35px',  sotrable: true, hidden: true},
            { field: 'TLDID',       caption: 'TLDID',       size: '35px',  sotrable: true, hidden: true},
            { field: 'TDName',      caption: 'Name',        size: '360px', sotrable: true, hidden: false},
            { field: 'Worker',      caption: 'Worker',      size: '95px',  sotrable: true, hidden: false},
            { field: 'EpochPreDue', caption: 'Pre Due',     size: '130px', sotrable: true, hidden: false,
                render: function (rec, idx, col) {if (typeof rec === "undefined") {return ''; } return dtFormatISOToW2ui(rec.EpochPreDue); }
            },
            { field: 'EpochDue',    caption: 'Due',         size: '130px', sotrable: true, hidden: false,
                render: function (rec, idx, col) {if (typeof rec === "undefined") {return ''; } return dtFormatISOToW2ui(rec.EpochDue); }
            },
            { field: 'FLAGS',       caption: 'FLAGS',       size: '35px',  sotrable: true, hidden: true},
            { field: 'DoneUID',     caption: 'DoneUID',     size: '35px',  sotrable: true, hidden: true},
            { field: 'PreDoneUID',  caption: 'PreDoneUID',  size: '35px',  sotrable: true, hidden: true},
            { field: 'Comment',     caption: 'Comment',     size: '35px',  sotrable: true, hidden: true},
            { field: 'LastModTime', caption: 'LastModTime', size: '35px',  sotrable: true, hidden: true},
            { field: 'LastModBy',   caption: 'LastModBy',   size: '35px',  sotrable: true, hidden: true},
            { field: 'CreateTS',    caption: 'CreateTS',    size: '35px',  sotrable: true, hidden: true},
            { field: 'CreateBy',    caption: 'CreateBy',    size: '35px',  sotrable: true, hidden: true},
        ],
        onClick: function(event) {
            event.onComplete = function (event) {
                var r = w2ui.tldsDetailGrid.records[event.recid];
                openTaskDescForm(r.BID,r.TDID);
            };
        },
        onRender: function (event) {
            event.onComplete = function (event) {
                setTaskDescButtonsState();
            };
        },
        onAdd: function (event) {
            // make sure that task list definition itself has been saved, if not, we'll need to save it.
            var r = w2ui.tldsInfoForm.record;
            if (r.TLDID === 0) {
                if (saveTaskListDefinition(false,true) > 0) {
                    return;  // an error occurred.
                }
            }
            openTaskDescForm(w2ui.tldsInfoForm.record.BID,0);
        }
    });

    //------------------------------------------------------------------------
    //  taskDescForm
    //------------------------------------------------------------------------
    $().w2form({
        name: 'taskDescForm',
        style: 'border: 0px; background-color: transparent;',
        formURL: '/webclient/html/formtd.html',
        url: '/v1/td',
        toolbar: {
            items: [
                { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
                { id: 'bt3', type: 'spacer' },
                { id: 'btnClose', type: 'button', icon: 'fas fa-times' },
            ],
            onClick: function (event) {
                event.onComplete = function() {
                    switch(event.target) {
                    case 'btnClose':
                        var no_callBack = function() { return false; },
                            yes_callBack = function() {
                                closeTaskDescForm();
                                w2ui.tldLayout.render();
                            };
                        form_dirty_alert(yes_callBack, no_callBack);
                        break;
                    }
                };
            },
        },
        fields: [
            { field: 'recid',          type: 'int',         required: false },
            { field: 'TDID',           type: 'int',         required: false },
            { field: 'BID',            type: 'int',         required: false },
            { field: 'TLDID',          type: 'int',         required: false },
            { field: 'TDName',         type: 'text',        required: true  },
            { field: 'Worker',         type: 'text',        required: false },
            { field: 'lstWorker',      type: 'list',        required: false, options: {items: app.workers}, },
            { field: 'EpochDue',       type: 'datetime',    required: false },
            { field: 'EpochPreDue',    type: 'datetime',    required: false },
            { field: 'ChkEpochDue',    type: 'checkbox',    required: false },
            { field: 'ChkEpochPreDue', type: 'checkbox',    required: false },
            { field: 'FLAGS',          type: 'text',        required: false },
            { field: 'DoneUID',        type: 'int',         required: false },
            { field: 'PreDoneUID',     type: 'int',         required: false },
            { field: 'TDComment',      type: 'text',        required: false },
            { field: 'LastModTime',    type: 'date',        required: false },
            { field: 'LastModBy',      type: 'int',         required: false },
            { field: 'CreateTS',       type: 'date',        required: false },
            { field: 'CreateBy',       type: 'int',         required: false },
            { field: 'TZOffset',       type: 'int',         required: false },
        ],
        actions: {
            save: function(target, data){
                //---------------------------------------------------------
                // When the w2popup is active, it suspends the operation
                // of things like setInterval() handling.  So the session
                // may have expired by the time we close this dialog. So,
                // we need to explicity call ensureSession to make sure
                // we have a session before proceeding.
                //---------------------------------------------------------
                ensureSession();

                //---------------------------
                // Now, on with the save...
                //---------------------------
                var f = w2ui.taskDescForm;
                var r = f.record;
                r.Worker = r.lstWorker.text;
                if (r.TLDID === 0) {
                    r.TLDID = w2ui.tldsInfoForm.record.TLDID;  // this should no longer be
                }

                //------------------------------------------------
                // convert times to UTC before saving
                //------------------------------------------------
                r.EpochDue = localtimeToUTC(r.EpochDue);
                r.EpochPreDue = localtimeToUTC(r.EpochPreDue);
                if (r.EpochDue.length === 0) {
                    r.EpochDue = TLD.TIME0;
                }
                if (r.EpochPreDue.length === 0) {
                    r.EpochPreDue = TLD.TIME0;
                }
                r.TZOffset = app.TZOffset;

                var d = {cmd: "save", record: r};
                var dat=JSON.stringify(d);
                f.url = '/v1/td/' + r.BID + '/' + r.TDID;

                $.post(f.url,dat)
                .done(function(data) {
                    if (data.status === "error") {
                        f.error(w2utils.lang(data.message));
                        return;
                    }
                    w2ui.tldsDetailGrid.url='/v1/tds/'+w2ui.taskDescForm.record.BID+'/'+w2ui.taskDescForm.record.TLDID;
                    w2ui.tldsDetailGrid.reload();
                    // w2popup.close();
                    closeTaskDescForm();
                    setTaskDescButtonsState();
                })
                .fail(function(/*data*/){
                    f.error("Save TaskDescriptor failed.");
                    return;
                });
            },
            delete: function(target, data) {
                ensureSession();
                var f = w2ui.taskDescForm;
                var r = f.record;
                var d = {cmd: "delete"};
                var dat=JSON.stringify(d);
                f.url = '/v1/td/' + r.BID + '/' + r.TDID;
                $.post(f.url,dat)
                .done(function(data) {
                    if (data.status === "error") {
                        f.error(w2utils.lang(data.message));
                        return;
                    }
                    w2ui.tldsDetailGrid.reload();
                    // w2popup.close();
                    closeTaskDescForm();
                })
                .fail(function(/*data*/){
                    f.error("Delete TaskDescriptor failed.");
                    return;
                });
            },
        },
       onLoad: function(event) {
            event.onComplete = function(event) {
                var f = w2ui.taskDescForm;
                var r = f.record;
                if (typeof r.EpochPreDue === "undefined") {
                    return;
                }
                r.EpochPreDue = dtFormatISOToW2ui(r.EpochPreDue);
                r.EpochDue    = dtFormatISOToW2ui(r.EpochDue);
                $(f.box).find("input[name=EpochPreDue]").prop( "disabled", !r.ChkEpochPreDue );
                $(f.box).find("input[name=EpochDue]").prop( "disabled", !r.ChkEpochDue );
            };
        },
       onRender: function(event) {
            event.onComplete = function(event) {
                setTaskDescButtonsState();
            };
        },
        onChange: function(event) {
            event.onComplete = function() {
                var f = this;
                var r = f.record;
                switch (event.target) {
                case "ChkEpochPreDue":
                    $(f.box).find("input[name=EpochPreDue]").prop( "disabled", !r.ChkEpochPreDue );
                    if (r.ChkEpochPreDue) {
                        if (r.EpochPreDue === "" && TaskDescData.sEpochPreDue.length > 1) {
                            r.EpochPreDue = TaskDescData.sEpochPreDue;
                        }
                    } else {
                        TaskDescData.sEpochPreDue = r.EpochPreDue;
                        r.EpochPreDue = '';
                    }
                    f.refresh();
                    break;
                case "ChkEpochDue":
                    $(f.box).find("input[name=EpochDue]").prop( "disabled", !r.ChkEpochDue );
                    if (r.ChkEpochDue) {
                        if (r.EpochDue === "" && TaskDescData.sEpochDue.length > 1) {
                            r.EpochDue = TaskDescData.sEpochDue;
                        }
                    } else {
                        TaskDescData.sEpochDue = r.EpochDue;
                        r.EpochDue = '';
                    }
                    f.refresh();
                    break;
                }
            };
        },
    });


    //------------------------------------------------------------------------
    //  tldsCloseForm
    //------------------------------------------------------------------------
    $().w2form({
        name: 'tldsCloseForm',
        style: 'border: 0px; background-color: transparent;',
        formURL: '/webclient/html/formtldclose.html',
        url: '',
        fields: [],
        actions: {
            save: function(target, data){
                saveTaskListDefinition(true,false);
            },
            delete: function(target, data) {
                var tl = {
                    cmd: "delete",
                };
                var dat = JSON.stringify(tl);
                var url = '/v1/tld/' + w2ui.tldsInfoForm.record.BID + '/' + w2ui.tldsInfoForm.record.TLDID;
                $.post(url,dat)
                .done(function(data) {
                    if (data.status === "error") {
                        w2ui.tldsInfoForm.error(w2utils.lang(data.message));
                        return;
                    }
                    w2ui.toplayout.hide('right',true);
                    w2ui.tldsGrid.render();
                })
                .fail(function(/*data*/){
                    w2ui.tldsInfoForm.error("Delete Tasklist Definition failed.");
                    return;
                });
            }
        },
    });

    //------------------------------------------------------------------------
    //  payorstmtlayout - The layout to contain the stmtForm and tlsDetailGrid
    //               top  - stmtForm
    //               main - tlsDetailGrid
    //------------------------------------------------------------------------
    $().w2layout({
        name: 'tldLayout',
        padding: 0,
        panels: [
            { type: 'left',    size: 0,     hidden: true },
            { type: 'top',     size: '30%', hidden: false, content: 'top',  resizable: true, style: app.pstyle },
            { type: 'main',    size: '70%', hidden: false, content: 'main', resizable: true, style: app.pstyle },
            { type: 'preview', size: 0,     hidden: true,  content: 'PREVIEW'  },
            { type: 'bottom',  size: 50,    hidden: false, content: 'bottom', resizable: false, style: app.pstyle },
            { type: 'right',   size: 0,     hidden: true }
        ]
    });
};

window.finishTLDForm = function () {
    w2ui.tldLayout.content('top',   w2ui.tldsInfoForm);
    w2ui.tldLayout.content('main',  w2ui.tldsDetailGrid);
    w2ui.tldLayout.content('bottom',w2ui.tldsCloseForm);
};

//-----------------------------------------------------------------------------
// saveTaskListDefinition - save the task list definition, called from
// multiple places.
//
// @params
//     hide = boolean - indicates whether or not the dialog should close
//            after the save is complete
//     reloadTldsInfo = boolean - indicates if we need to explicitly reload
//            w2ui.tldsInfoForm.record
//
// @returns
//     0 = no errors, just continue
//     1 = error message was popped up.
//
//-----------------------------------------------------------------------------
window.saveTaskListDefinition = function (hide, reloadTldsInfo) {
    var tmp         = w2ui.tldsInfoForm.record;
    var y           = tmp.Cycle.id;
    tmp.Cycle       = y; // we don't want the struct, we just want the ID
    tmp.Epoch       = localtimeToUTC(tmp.Epoch);
    tmp.EpochDue    = localtimeToUTC(tmp.EpochDue);
    tmp.EpochPreDue = localtimeToUTC(tmp.EpochPreDue);
    if (tmp.Epoch.length === 0) {
        tmp.Epoch = TLD.TIME0;
    }
    if (tmp.EpochDue.length === 0) {
        tmp.EpochDue = TLD.TIME0;
    }
    if (tmp.EpochPreDue.length === 0) {
        tmp.EpochPreDue = TLD.TIME0;
    }
    if (tmp.Name.length === 0) {
        w2alert('Please name the task list definition, then try again.');
        return 1;
    }
    var tl = {
        cmd: "save",
        record: tmp,
    };
    var dat = JSON.stringify(tl);
    var url = '/v1/tld/' + w2ui.tldsInfoForm.record.BID + '/' + w2ui.tldsInfoForm.record.TLDID;
    $.post(url,dat)
    .done(function(data) {
        if (data.status === "error") {
            w2ui.tldsInfoForm.error(w2utils.lang(data.message));
            return;
        }
        if (hide) {
            w2ui.toplayout.hide('right',true);
        }
        w2ui.tldsGrid.render();
        w2ui.tldsInfoForm.record.TLDID = data.recid;
        if (reloadTldsInfo) {
            w2ui.tldsInfoForm.reload(tldsLoadEventCB);
        }
    })
    .fail(function(/*data*/){
        w2ui.tldsInfoForm.error("Save Tasklist failed.");
        return;
    });
    return 0;
};

//-----------------------------------------------------------------------------
// tldsLoadEventCB - handle ui updates when info is loaded
//
// @params
//     bid = business id
//     tdid = task descriptor id
//
// @returns
//
//-----------------------------------------------------------------------------
window.tldsLoadEventCB = function () {
    var f = w2ui.tldsInfoForm;
    var r = f.record;
    if (typeof r.EpochPreDue === "undefined") {
        return;
    }

    /*****************************************************************
     * Without the next 3 checks, the interface will show the Epoch,
     * PreDue and Due dates as "1/1/1970" when those controls should
     * be initialized with an empty string
     *****************************************************************/
    if (typeof r.Epoch == "string" && r.Epoch === "1/1/1970") {
        r.Epoch = "";
        f.fields[f.get("Epoch",true)].el.value = "";
    }
    if (typeof r.EpochDue == "string" && r.EpochDue === "1/1/1970") {
        r.EpochDue = "";
        f.fields[f.get("EpochDue",true)].el.value = "";
    }
    if (typeof r.EpochPreDue == "string" && r.EpochPreDue === "1/1/1970") {
        r.EpochPreDue = "";
        f.fields[f.get("EpochPreDue",true)].el.value = "";
    }

    if (typeof r.Cycle === "object") {
        var c = r.Cycle.id;
        r.Cycle = c;
    }

    // translate dates into a format that w2ui understands
    r.EpochPreDue = dtFormatISOToW2ui(r.EpochPreDue);
    r.EpochDue    = dtFormatISOToW2ui(r.EpochDue);
    r.Epoch       = dtFormatISOToW2ui(r.Epoch);

    // now enable/disable as needed
    $(f.box).find("input[name=EpochDue]").prop( "disabled", !r.ChkEpochDue );
    $(f.box).find("input[name=EpochPreDue]").prop( "disabled", !r.ChkEpochPreDue );
    $(f.box).find("input[name=Epoch]").prop( "disabled", r.Cycle < 4);  // enable if recur is Daily, Weekly, Monthlhy, quarterly or yearly
};

//-----------------------------------------------------------------------------
// openTaskDescForm - Bring up the task descriptor edit form
//
// @params
//     bid = business id
//     tdid = task descriptor id
//
// @returns
//
//-----------------------------------------------------------------------------
window.openTaskDescForm = function (bid,tdid) {
    TLD.formBtnsDisabled = true;
    if (tdid > 0) {
        w2ui.taskDescForm.url = '/v1/td/' + bid + '/' + tdid;
        w2ui.taskDescForm.request();
    } else {
        w2ui.taskDescForm.url = '';
        w2ui.taskDescForm.record = getTDInitRecord(bid, tdid, null);
    }
    var n = '' + tdid;
    w2ui.taskDescForm.header = 'Task Descriptor  ('+ (n === '0' ? 'new':n)  + ')';
    w2ui.tldLayout.content('right', w2ui.taskDescForm);
    w2ui.tldLayout.sizeTo('right', TLD.TaskDescWidth);
    w2ui.tldLayout.show('right');
    w2ui.tldLayout.render();
};

//-----------------------------------------------------------------------------
// closeTaskDescForm - Close the task descriptor edit form
//
// @params
//     bid = business id
//     tdid = task descriptor id
//
// @returns
//
//-----------------------------------------------------------------------------
window.closeTaskDescForm = function (bid,tdid) {
    w2ui.tldLayout.hide('right');
    w2ui.tldLayout.sizeTo('right', 0);
    w2ui.tldsDetailGrid.render();
    TLD.formBtnsDisabled = false;
};

//-----------------------------------------------------------------------------
// setToTLDForm - enable the Task List Definition form.  Also, set
//                the forms url and request data from the server
// @params
//   bid = business id (or the BUD)
//    id = Task List TLID
// d1,d2 = date range to use
//-----------------------------------------------------------------------------
window.setToTLDForm = function (bid, id, d1,d2) {
    if (id > 0) {
        w2ui.tldsGrid.url = '/v1/tlds/' + bid;                    // the grid of tasklist Defs
        w2ui.tldsDetailGrid.url = '/v1/tds/' + bid + '/' + id; // the tasks associated with the selected tasklistDefinition
        w2ui.tldsInfoForm.url = '/v1/tld/' + bid + '/' + id;      // the tasklist def details
        w2ui.tldsInfoForm.postData = {
            searchDtStart: d1,
            searchDtStop: d2,
        };
        w2ui.tldsInfoForm.header = 'Task List Definition ' + id;
        w2ui.tldsInfoForm.request();

    } else {
        w2ui.tldsDetailGrid.url = '';
        w2ui.tldsDetailGrid.records = [];
        w2ui.tldsInfoForm.header = 'Task List Definition (new)';
        w2ui.tldsInfoForm.record = getTLDInitRecord(bid, null);
    }
    w2ui.toplayout.content('right', w2ui.tldLayout);
    w2ui.toplayout.show('right', true);
    w2ui.toplayout.sizeTo('right', 700);
    w2ui.toplayout.render();
    app.new_form_rec = false;  // mark as record exists
    app.form_is_dirty = false; // mark as no changes yet
};
//-----------------------------------------------------------------------------
// setTaskDescButtonsState - set the form Save / Delete button state to
//                       the value in TL.
//
// @params
//
// @returns
//
//-----------------------------------------------------------------------------
window.setTaskDescButtonsState = function() {
    $(w2ui.tldsCloseForm.box).find("button[name=save]").prop( "disabled", TLD.formBtnsDisabled );
    $(w2ui.tldsCloseForm.box).find("button[name=delete]").prop( "disabled", TLD.formBtnsDisabled );
};

/* global
    transactantFields, transactantTabs, getSLStringList, getStringListData, onCheckboxesChange
*/
"use strict";

window.getTransactantInitRecord = function (BID, BUD) {
    var y = new Date();

    return {
        recid: 0,
        BID: BID,
        BUD: BUD,
        NLID: 0,
        TCID: 0,
        TMPTCID: 0,
        IsRenter: false,
        IsOccupant: true,
        IsGuarantor: false,
        FirstName: "",
        MiddleName: "",
        LastName: "",
        PreferredName: "",
        IsCompany: false,
        CompanyName: "",
        PrimaryEmail: "",
        SecondaryEmail: "",
        WorkPhone: "",
        CellPhone: "",
        Address: "",
        Address2: "",
        City: "",
        State: "",
        PostalCode: "",
        Country: "",
        Website: "",
        Comment: "",
        Points: 0,
        DateofBirth: "1/1/1900",
        EmergencyContactName: "",
        EmergencyContactAddress: "",
        EmergencyContactTelephone: "",
        EmergencyContactEmail: "",
        AlternateEmailAddress: "",
        EligibleFutureUser: true,
        Industry: 0,
        SourceSLSID: 0,
        CreditLimit: 0.00,
        TaxpayorID: "",
        GrossIncome: 0,
        DriversLicense: "",
        ThirdPartySource: "",
        EligibleFuturePayor: true,
        CompanyAddress: "",
        CompanyCity: "",
        CompanyState: "",
        CompanyPostalCode: "",
        CompanyEmail: "",
        CompanyPhone: "",
        Occupation: "",
        CurrentAddress: "",
        CurrentLandLordName: "",
        CurrentLandLordPhoneNo: "",
        CurrentLengthOfResidency: "",
        CurrentReasonForMoving: 0,
        PriorAddress: "",
        PriorLandLordName: "",
        PriorLandLordPhoneNo: "",
        PriorLengthOfResidency: "",
        PriorReasonForMoving: 0,
        Evicted: false,
        EvictedDes: "",
        Convicted: false,
        ConvictedDes: "",
        Bankruptcy: false,
        BankruptcyDes: "",
        OtherPreferences: "",
        // FollowUpDate: "1/1/1900",
        // CommissionableThirdParty: "",
        SpecialNeeds: "",
        LastModTime: y.toISOString(),
        LastModBy: 0
    };
};


window.buildTransactElements = function() {

    app.transactantFields = [
        {field: 'recid',                     type: 'int',       required: false, html: {page: 0, column: 0}},
        {field: 'BID',                       type: 'int',       required: false, html: {page: 0, column: 0}},
        {field: 'BUD',                       type: 'list',      required: false, html: {page: 0, column: 0}, options: {items: app.businesses}},
        {field: 'NLID',                      type: 'int',       required: false, html: {page: 0, column: 0}},
        {field: 'TCID',                      type: 'int',       required: false, html: {page: 0, column: 0}},
        {field: 'TMPTCID',                   type: 'int',       required: true,  html: {page: 0, column: 0}},
        {field: 'IsRenter',                  type: 'checkbox',  required: false, html: {page: 0, column: 0}},  // will be responsible for paying rent
        {field: 'IsOccupant',                type: 'checkbox',  required: false, html: {page: 0, column: 0}},  // will reside in and/or use the items rented
        {field: 'IsGuarantor',               type: 'checkbox',  required: false, html: {page: 0, column: 0}},  // responsible for making sure all rent is paid
        // ----------- Transactant --------------
        {field: 'FirstName',                 type: 'text',      required: false, html: {page: 0, column: 0}},
        {field: 'MiddleName',                type: 'text',      required: false, html: {page: 0, column: 0}},
        {field: 'LastName',                  type: 'text',      required: false, html: {page: 0, column: 0}},
        {field: 'PreferredName',             type: 'text',      required: false, html: {page: 0, column: 0}},
        {field: 'IsCompany',                 type: 'checkbox',  required: true,  html: {page: 0, column: 0}},
        {field: 'CompanyName',               type: 'text',      required: false, html: {page: 0, column: 0}},
        {field: 'PrimaryEmail',              type: 'email',     required: false, html: {page: 0, column: 0}},
        {field: 'SecondaryEmail',            type: 'email',     required: false, html: {page: 0, column: 0}},
        {field: 'WorkPhone',                 type: 'phone',     required: false, html: {page: 0, column: 0}},
        {field: 'CellPhone',                 type: 'phone',     required: false, html: {page: 0, column: 0}},
        {field: 'Address',                   type: 'text',      required: false, html: {page: 0, column: 0}},
        {field: 'Address2',                  type: 'text',      required: false, html: {page: 0, column: 0}},
        {field: 'City',                      type: 'text',      required: false, html: {page: 0, column: 0}},
        {field: 'State',                     type: 'list',      required: false, html: {page: 0, column: 0}, options: {items: app.usStateAbbr}},
        {field: 'PostalCode',                type: 'text',      required: false, html: {page: 0, column: 0}},
        {field: 'Country',                   type: 'text',      required: false, html: {page: 0, column: 0}},
        {field: 'Website',                   type: 'text',      required: false, html: {page: 0, column: 0}},
        {field: 'Comment',                   type: 'text',      required: false, html: {page: 0, column: 0}},
        // ----------- Prospect -----------
        {field: 'CompanyAddress',            type: 'text',      required: false, html: {page: 1, column: 0}},
        {field: 'CompanyCity',               type: 'text',      required: false, html: {page: 1, column: 0}},
        {field: 'CompanyState',              type: 'list',      required: false, html: {page: 1, column: 0}, options: {items: app.usStateAbbr}},
        {field: 'CompanyPostalCode',         type: 'text',      required: false, html: {page: 1, column: 0}},
        {field: 'CompanyEmail',              type: 'text',      required: false, html: {page: 1, column: 0}},
        {field: 'CompanyPhone',              type: 'text',      required: false, html: {page: 1, column: 0}},
        {field: 'Occupation',                type: 'text',      required: false, html: {page: 1, column: 0}},
        {field: 'CurrentAddress',            type: 'text',      required: false, html: {page: 1, column: 0}},  // Current Address
        {field: 'CurrentLandLordName',       type: 'text',      required: false, html: {page: 1, column: 0}},  // Current landlord's name
        {field: 'CurrentLandLordPhoneNo',    type: 'text',      required: false, html: {page: 1, column: 0}},  // Current landlord's phone number
        {field: 'CurrentLengthOfResidency',  type: 'text',      required: false, html: {page: 1, column: 0}},  // Length of residency at current address
        {field: 'CurrentReasonForMoving',    type: 'list',      required: false, html: {page: 1, column: 0}},  // Reason of moving from current address
        {field: 'PriorAddress',              type: 'text',      required: false, html: {page: 1, column: 0}},  // Prior Address
        {field: 'PriorLandLordName',         type: 'text',      required: false, html: {page: 1, column: 0}},  // Prior landlord's name
        {field: 'PriorLandLordPhoneNo',      type: 'text',      required: false, html: {page: 1, column: 0}},  // Prior landlord's phone number
        {field: 'PriorLengthOfResidency',    type: 'text',      required: false, html: {page: 1, column: 0}},  // Length of residency at Prior address
        {field: 'PriorReasonForMoving',      type: 'list',      required: false, html: {page: 1, column: 0}},  // Reason of moving from Prior address
        {field: 'Evicted',                   type: 'checkbox',  required: false, html: {page: 1, column: 0}},  // have you ever been Evicted
        {field: 'EvictedDes',                type: 'text',      required: false, html: {page: 1, column: 0}},
        {field: 'Convicted',                 type: 'checkbox',  required: false, html: {page: 1, column: 0}},  // have you ever been Arrested or convicted of a crime
        {field: 'ConvictedDes',              type: 'text',      required: false, html: {page: 1, column: 0}},
        {field: 'Bankruptcy',                type: 'checkbox',  required: false, html: {page: 1, column: 0}},  // have you ever been Declared Bankruptcy
        {field: 'BankruptcyDes',             type: 'text',      required: false, html: {page: 1, column: 0}},
        {field: 'OtherPreferences',          type: 'text',      required: false, html: {page: 1, column: 0}},
        // {field: 'FollowUpDate',              type: 'date',      required: false, html: {page: 1, column: 0}},
        // {field: 'CommissionableThirdParty',  type: 'text',      required: false, html: {page: 1, column: 0}},
        {field: 'ThirdPartySource',          type: 'text',      required: false, html: {page: 1, column: 0}},
        {field: 'SpecialNeeds',              type: 'text',      required: false, html: {page: 1, column: 0}},  // In an effort to accommodate you, please advise us of any special needs,

        // ----------- Payor ----------
        {field: 'CreditLimit',               type: 'money',     required: false, html: {page: 2, column: 0}},
        {field: 'TaxpayorID',                type: 'text',      required: false, html: {page: 2, column: 0}},
        {field: 'GrossIncome',               type: 'money',     required: false, html: {page: 2, column: 0}},
        {field: 'DriversLicense',            type: 'text',      required: false, html: {page: 2, column: 0}},  // Driving licence number of applicants
        {field: 'EligibleFuturePayor',       type: 'checkbox',  required: false, html: {page: 2, column: 0}},
        // ----------- User ----------
        {field: 'Points',                    type: 'int',       required: false, html: {page: 3, column: 0}},
        {field: 'DateofBirth',               type: 'date',      required: false, html: {page: 3, column: 0}},
        {field: 'EmergencyContactName',      type: 'text',      required: false, html: {page: 3, column: 0}},
        {field: 'EmergencyContactAddress',   type: 'text',      required: false, html: {page: 3, column: 0}},
        {field: 'EmergencyContactTelephone', type: 'text',      required: false, html: {page: 3, column: 0}},
        {field: 'EmergencyContactEmail',     type: 'text',      required: false, html: {page: 3, column: 0}},
        {field: 'AlternateEmailAddress',     type: 'text',      required: false, html: {page: 3, column: 0}},
        {field: 'EligibleFutureUser',        type: 'checkbox',  required: false, html: {page: 3, column: 0}},
        {field: 'Industry',                  type: 'list',      required: false, html: {page: 3, column: 0}}, // "Industries" string list
        {field: 'SourceSLSID',               type: 'list',      required: false, html: {page: 3, column: 0}}, // "HowFound" string list
        {field: 'CreateBy',                  type: 'int',       required: false, html: {page: 0, column: 0}},
        {field: 'CreateTS',                  type: 'time',      required: false, html: {page: 0, column: 0}},
        {field: 'LastModBy',                 type: 'int',       required: false, html: {page: 0, column: 0}},
        {field: 'LastModTime',               type: 'time',      required: false, html: {page: 0, column: 0}}
    ];

    app.transactantTabs = [
        {id: 'tab1', caption: app.sFirstTabTCForm},
        {id: 'tab4', caption: app.sProspect},
        {id: 'tab3', caption: app.sPayor},
        {id: 'tab2', caption: app.sUser}
    ];

    //------------------------------------------------------------------------
    //          transactantsGrid
    //------------------------------------------------------------------------
    $().w2grid({
        name: 'transactantsGrid',
        url: '/v1/transactants',
        multiSelect: false,
        show: {
            header: false,
            toolbar: true,
            footer: true,
            toolbarAdd: true,
            lineNumbers: false,
            selectColumn: false,
            expandColumn: false
        },
        columns: [
            {field: 'TCID',         caption: "TCID",          size: '50px',  sortable: true, style: 'text-align: right', hidden: false},
            {field: 'FirstName',    caption: "First Name",    size: '125px', sortable: true, hidden: false},
            {field: 'MiddleName',   caption: "Middle Name",   size: '20px',  sortable: true, hidden: true},
            {field: 'LastName',     caption: "Last Name",     size: '125px', sortable: true, hidden: false,
                render: function (record) {
                    var s = '';
                    if (typeof record === "undefined") {
                        return;
                    }
                    if (!record.IsCompany) {
                        s += '<span style="color:#999;font-size:16px"><i class="far fa-handshake" aria-hidden="true"></i></span>';
                    }
                    return s + ' ' + record.LastName;
                }
            },
            {field: 'CompanyName',  caption: "Company Name",  size: '125px', sortable: true, hidden: false,
                render: function (record) {
                    var s = '';
                    if (typeof record === "undefined") {
                        return;
                    }
                    if (record.IsCompany) {
                        s += '<span style="color:#999;font-size:16px"><i class="far fa-handshake" aria-hidden="true"></i></span>';
                    }
                    return s + ' ' + record.CompanyName;
                }
            },
            {field: 'PrimaryEmail', caption: "Primary Email", size: '175px', sortable: true, hidden: false},
            {field: 'CellPhone',    caption: "Cell Phone",    size: '100px', sortable: true, hidden: false},
            {field: 'WorkPhone',    caption: "Work Phone",    size: '100px', sortable: true, hidden: false},
        ],
        onRefresh: function(event) {
            event.onComplete = function() {
                if (app.active_grid == this.name) {
                    if (app.new_form_rec) {
                        this.selectNone();
                    }
                    else{
                        this.select(app.last.grid_sel_recid);
                    }
                }
            };
        },
        onClick: function(event) {
            event.onComplete = function () {
                var yes_args = [this, event.recid],
                    no_args = [this],
                    BID = getCurrentBID(),
                    BUD = getBUDfromBID(BID),
                    no_callBack = function(grid) {
                        grid.select(app.last.grid_sel_recid);
                        return false;
                    },
                    yes_callBack = function(grid, recid) {
                        app.last.grid_sel_recid = parseInt(recid);
                        // keep highlighting current row in any case
                        grid.select(app.last.grid_sel_recid);
                        var rec = grid.get(recid);

                        // get stringListData for list fields
                        getStringListData(BID, BUD).done(function (data) {
                            setToForm('transactantForm', '/v1/person/' + rec.BID + '/' + rec.TCID, 700, true);
                        }).fail(function (data) {
                            this.message(data.message);
                        });
                    };

                // warn user if form content has been changed
                form_dirty_alert(yes_callBack, no_callBack, yes_args, no_args);
             };
        },
        onAdd: function(/*event*/) {
            var yes_args = [this],
                no_callBack = function() { return false; },
                yes_callBack = function(grid) {
                    // reset it
                    app.last.grid_sel_recid = -1;
                    grid.selectNone();

                    // insert an empty record....
                    var x = getCurrentBusiness();
                    var BID=parseInt(x.value);
                    var BUD = getBUDfromBID(BID);

                    var record = getTransactantInitRecord(BID, BUD);
                    w2ui.transactantForm.record = record;

                    // get stringListData for list fields
                    getStringListData(BID, BUD).fail(function (data) {
                        this.message(data.message);
                    });

                    w2ui.transactantForm.refresh();
                    setToForm('transactantForm', '/v1/person/' + BID + '/0', 700);
                };

            // warn user if form content has been changed
            form_dirty_alert(yes_callBack, no_callBack, yes_args);
        }
    });


    //------------------------------------------------------------------------
    //          transactantForm
    //------------------------------------------------------------------------
    $().w2form({
        name: 'transactantForm',
        style: 'border: 0px; background-color: transparent;',
        header: app.sTransactant + ' Detail',
        url: '/v1/person',
        formURL: '/webclient/html/formtc.html',
        fields: app.transactantFields,
        tabs: app.transactantTabs,
        toolbar: {
            items: [
                { id: 'btnNotes', type: 'button', icon: 'far fa-sticky-note' },
                { id: 'bt3', type: 'spacer' },
                { id: 'btnClose', type: 'button', icon: 'fas fa-times' },
            ],
            onClick: function (event) {
                if (event.target == 'btnClose') {
                    var no_callBack = function() { return false; },
                        yes_callBack = function() {
                            w2ui.toplayout.hide('right',true);
                            w2ui.transactantsGrid.render();
                        };
                    form_dirty_alert(yes_callBack, no_callBack);
                }
                if (event.target == 'btnNotes') {
                    notesPopUp();
                }
            },
        },
        onValidate: function (event) {
            if (!this.record.IsCompany && this.record.FirstName === '') {
                event.errors.push({
                    field: this.get('FirstName'),
                    error: 'FirstName required when "Person or Company" field is set to Person'
                });
            }
            if (!this.record.IsCompany && this.record.LastName === '') {
                event.errors.push({
                    field: this.get('LastName'),
                    error: 'LastName required when "Person or Company" field is set to Person'
                });
            }
            if (this.record.IsCompany && this.record.CompanyName === '') {
                event.errors.push({
                    field: this.get('CompanyName'),
                    error: 'Company Name required when "Person or Company" field is set to Company'
                });
            }
        },
        actions: {
            save: function () {
                var tgrid = w2ui.transactantsGrid;
                console.log('before: tgrid.getSelection() = ' + tgrid.getSelection() );
                tgrid.selectNone();
                // clean dirty flag of form
                app.form_is_dirty = false;
                // clear the grid select recid
                app.last.grid_sel_recid  =-1;

                this.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }
                    w2ui.toplayout.hide('right',true);
                    tgrid.render();
                });
            },
            saveadd: function() {
                var f = this,
                    grid = w2ui.transactantsGrid,
                    x = getCurrentBusiness(),
                    r = f.record,
                    BID=parseInt(x.value),
                    BUD=getBUDfromBID(BID);

                // clean dirty flag of form
                app.form_is_dirty = false;
                // clear the grid select recid
                app.last.grid_sel_recid  =-1;

                // select none if you're going to add new record
                grid.selectNone();

                f.save({}, function (data) {
                    if (data.status == 'error') {
                        console.log('ERROR: '+ data.message);
                        return;
                    }

                    // JUST RENDER THE GRID ONLY
                    grid.render();

                    // add new empty record and just refresh the form, don't need to do CLEAR form
                    var record = getTransactantInitRecord(BID, BUD);

                    f.record = record;
                    f.header = "Edit Transactant (new)"; // have to provide header here, otherwise have to call refresh method twice to get this change in form
                    f.url = '/v1/person/' + BID+'/0';
                    f.refresh();
                });
            },
            delete: function(/*target, data*/) {
                var form = this;
                w2confirm(delete_confirm_options)
                .yes(function() {
                    var tgrid = w2ui.transactantsGrid;
                    var params = {cmd: 'delete', formname: form.name, TCID: form.record.TCID };
                    var dat = JSON.stringify(params);

                    // delete Transactant request
                    $.post(form.url, dat, null, "json")
                    .done(function(data) {
                        if (data.status === "error") {
                            form.error(w2utils.lang(data.message));
                            return;
                        }
                        w2ui.toplayout.hide('right',true);
                        tgrid.remove(app.last.grid_sel_recid);
                        tgrid.render();
                    })
                    .fail(function(/*data*/){
                        form.error("Delete Transactant failed.");
                        return;
                    });
                })
                .no(function() {
                    return;
                });
            }
        },
        onRefresh: function(event) {
            event.onComplete = function() {
                var f = this,
                    r = f.record,
                    header="",
                    BID = getCurrentBID(),
                    BUD = getBUDfromBID(BID);

                // custom header
                if (r.TCID) {
                    if (f.original.IsCompany) {
                        header = "Edit Transactant - {0} ({1})".format(r.CompanyName, r.TCID);
                    } else {
                        header = "Edit Transactant - {0} {1} ({2})".format(r.FirstName, r.LastName, r.TCID);
                    }
                } else {
                    header = "Edit Transactant ({0})".format("new");
                }

                formRefreshCallBack(f, "TCID", header);

                // Hide Transanctant role checkboxes
                f.get("IsRenter").hidden = true;
                f.get("IsGuarantor").hidden = true;
                f.get("IsGuarantor").hidden = true;
                $("div[name=transanctant-role-tile]").hide();

                // make TMPTCID required false as it's not part of this form
                f.get("TMPTCID").required = false;

                f.get('SourceSLSID').options.items = getSLStringList(BID, "HowFound");
                f.get('CurrentReasonForMoving').options.items = getSLStringList(BID, "WhyLeaving");
                f.get('PriorReasonForMoving').options.items = getSLStringList(BID, "WhyLeaving");
                f.get('Industry').options.items = getSLStringList(BID, "Industries");

                // Enable/Disable checkbox description text area
                onCheckboxesChange(this);
            };
        },
        onChange: function(event) {
            event.onComplete = function() {

                onCheckboxesChange(this);

                // formRecDiffer: 1=current record, 2=original record, 3=diff object
                var diff = formRecDiffer(this.record, app.active_form_original, {});
                // if diff == {} then make dirty flag as false, else true
                if ($.isPlainObject(diff) && $.isEmptyObject(diff)) {
                    app.form_is_dirty = false;
                } else {
                    app.form_is_dirty = true;
                }


            };
        },
        onSubmit: function(target, data){
            delete data.postData.record.LastModTime;
            delete data.postData.record.LastModBy;
            delete data.postData.record.CreateTS;
            delete data.postData.record.CreateBy;
            // server request form data
            getFormSubmitData(data.postData.record);
            data.postData.record.IsCompany = int_to_bool(data.postData.record.IsCompany);
            data.postData.record.EligibleFutureUser = int_to_bool(data.postData.record.EligibleFutureUser);
            data.postData.record.EligibleFuturePayor = int_to_bool(data.postData.record.EligibleFuturePayor);
            data.postData.record.Evicted = int_to_bool(data.postData.record.Evicted);
            data.postData.record.Convicted = int_to_bool(data.postData.record.Convicted);
            data.postData.record.Bankruptcy = int_to_bool(data.postData.record.Bankruptcy);
        }
    });

};

//-----------------------------------------------------------------------------
// getStringListData - return the promise object of request to get latest
//                           string list for given BID.
//                           It updates the "app.ReceiptRules" variable for requested BUD
// @params  - BID : Business ID (expected current one)
//          - BUD : Business Unit Designation
// @return  - promise object from $.get
//-----------------------------------------------------------------------------
window.getStringListData = function (BID, BUD) {
    // if not BUD in app.ReceiptRules then initialize it with blank list
    if (!(BUD in app.StringList)) {
        app.StringList[BUD] = [];
    }

    // return promise
    return $.get("/v1/uival/" + BID + "/app.Applicants", null, null, "json").done(function(data) {
        // if it doesn't meet this condition, then save the data
        if (data == null) {return;}
        if (!('status' in data && data.status !== "success")) {
            app.StringList[BUD] = data;
        }
    });
};

// getSLStringList - It provide string list of `SLName`
window.getSLStringList = function(BID, SLName){
    var BUD = getBUDfromBID(BID);
    app[SLName] = [];
    app.StringList[BUD].forEach(function (SLObject) {
        if(SLObject.Name === SLName){
            var defaultItem;
            switch (SLName){
                case "HowFound":
                    defaultItem = {id: 0, text: " -- Select Source SLSID -- "};
                    break;
                case "WhyLeaving":
                    defaultItem = {id: 0, text: " -- Select a Reason -- "};
                    break;
                case "ApplDeny":
                    defaultItem = {id: 0, text: " -- Select Decline Reason -- "};
                    break;
                case "Industries":
                    defaultItem = {id: 0, text: " -- Select Industry -- "};
                    break;
                default:
                    console.log("SLName doesn't exists");
            }

            // if default item is defined then
            if (defaultItem) {
                app[SLName].push(defaultItem);
            }

            // push all the items in app."StringListName" from StringList
            for(var index = 0 ; index < SLObject.S.length ; index++){
                app[SLName].push({id: SLObject.S[index].SLSID, text: SLObject.S[index].Value});
            }
        }
    });
    return app[SLName];
};

// updateRATransactantFormCheckboxes
// Convert checkboxes w2ui int(1/0) value to bool(true/false)
window.updateRATransactantFormCheckboxes = function (record) {
    record.IsRenter = int_to_bool(record.IsRenter);
    record.IsOccupant = int_to_bool(record.IsOccupant);
    record.IsGuarantor = int_to_bool(record.IsGuarantor);
    record.IsCompany = int_to_bool(record.IsCompany);
    record.Evicted = int_to_bool(record.Evicted);
    record.Bankruptcy = int_to_bool(record.Bankruptcy);
    record.Convicted = int_to_bool(record.Convicted);
    record.EligibleFuturePayor = int_to_bool(record.EligibleFuturePayor);
    record.EligibleFutureUser = int_to_bool(record.EligibleFutureUser);
};

// onCheckboxesChange
// Enable/Disable checkbox description text area
window.onCheckboxesChange = function (form) {
    $("#EvictedDes").prop("disabled", !form.record.Evicted);
    $("#ConvictedDes").prop("disabled", !form.record.Convicted);
    $("#BankruptcyDes").prop("disabled", !form.record.Bankruptcy);
};

"use strict";
window.buildTWSElements = function (){
//------------------------------------------------------------------------
//          twsGrid
//------------------------------------------------------------------------
$().w2grid({
    name: 'twsGrid',
    url: '/v1/tws',
    multiSelect: false,
    show: {
        header: false,
        toolbar: true,
        footer: true,
        toolbarReload   : true,
        toolbarColumns  : false,
        toolbarSearch   : false,
        toolbarAdd      : false,
        toolbarDelete   : false,
        toolbarInput    : false,
        searchAll       : false,
        toolbarSave     : false,
        toolbarEdit     : false,
        searches        : false,
        lineNumbers     : false,
        selectColumn    : false,
        expandColumn    : false,
    },
    columns: [
        {field: 'recid',        caption: "recid",            size: '35px',  sortable: true, hidden: true},
        {field: 'TWSID',        caption: "TWSID",            size: '55px',  sortable: true, hidden: false},
        {field: 'Owner',        caption: "Owner",            size: '125px', sortable: true, hidden: false},
        {field: 'OwnerData',    caption: "Owner Data",       size: '20px',  sortable: true, hidden: true},
        {field: 'WorkerName',   caption: "WorkerName",       size: '125px', sortable: true, hidden: false},
        {field: 'ActivateTime', caption: "Activate Time",    size: '158px', sortable: true, hidden: false},
        {field: 'RemainingTime', caption: "Activates in...", size: '158px', sortable: true, hidden: false},
        {field: 'Node',         caption: "Node",             size: '100px', sortable: true, hidden: false},
        {field: 'FLAGS',        caption: "FLAGS",            size: '50px',  sortable: true, hidden: false},
        {field: 'DtActivated',  caption: "DtActivated",      size: '158px', sortable: true, hidden: false},
        {field: 'DtCompleted',  caption: "DtCompleted",      size: '158px', sortable: true, hidden: false},
        {field: 'DtCreate',     caption: "DtCreate",         size: '158px', sortable: true, hidden: false},
        {field: 'DtLastUpdate', caption: "DtLastUpdate",     size: '158px', sortable: true, hidden: false},
    ],
    // onClick: function(event) {
    //     event.onComplete = function () {
    //         app.new_form_rec = false;
    //         var rec = this.get(event.recid);
    //         setToForm('transactantForm', '/v1/person/' + rec.BID + '/' + rec.TCID, 700, true);
    //      };
    // },
});
};
